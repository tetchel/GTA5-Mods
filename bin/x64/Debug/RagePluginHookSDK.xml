<?xml version="1.0"?>
<doc>
    <assembly>
        "RagePluginHook"
    </assembly>
    <members>
        <member name="P:Rage.Attributes.SettingAttribute.Type">
            <summary>
Gets the type of the setting.
</summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Rage.Attributes.SettingAttribute.DefaultValue">
            <summary>
Gets the default value of the setting.
</summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Rage.Attributes.SettingAttribute.Name">
            <summary>
Gets the name of the setting.
</summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Rage.Attributes.SettingAttribute.#ctor(System.String,System.Object,System.Type)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Attributes.SettingAttribute" /> class.
</summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="name" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="T:Rage.Attributes.SettingAttribute">
            <summary>
Provides information about a setting for the RAGE Plugin Hook.
</summary>
        </member>
        <member name="P:HeuristicsScannerAttribute.Arguments">
            <summary>
Gets or sets the array containing the arguments to pass to the <see cref="!:HeuristicsScanner" />'s constructor.
</summary>
        </member>
        <member name="P:HeuristicsScannerAttribute.HeuristicsScannerType">
            <summary>
Gets or sets the type of the <see cref="!:HeuristicsScanner" /> to use.
</summary>
        </member>
        <member name="M:HeuristicsScannerAttribute.#ctor(System.Type,System.Object[])">
            <summary>
Initializes a new instance of the <see cref="T:HeuristicsScannerAttribute" /> class.
</summary>
            <param name="heuristicsScannerType">The type of the <see cref="!:HeuristicsScanner" /> to use.</param>
        </member>
        <member name="T:HeuristicsScannerAttribute">
            <summary>
Undocumented.
</summary>
        </member>
        <member name="T:GamePropertyAttribute">
            <summary>
Undocumented.
</summary>
        </member>
        <member name="M:Rage.InternetTime.GetCurrentDateTime">
            <summary>
Gets the current date and time from the internet.
</summary>
            <remarks>The time server can only be accessed once every five seconds. If less than five seconds have passed since the last call to GetCurrentDateTime(), the time will be inferred from the last time returned. Note, that this limit is enforced across plugins.</remarks>
            <returns>A <see cref="T:System.DateTime" /> representing the current time in UTC.</returns>
        </member>
        <member name="P:Rage.InternetTime.LastTime">
            <summary>
Gets the last time retrieved from the server.
</summary>
            <value>The last time retrieved from the server.</value>
        </member>
        <member name="P:Rage.InternetTime.TimeSinceLastAccess">
            <summary>
Gets the time elapsed since the time was last retrieved from the server.
</summary>
            <value>The time elapsed since the time was last retrieved from the server.</value>
        </member>
        <member name="P:Rage.InternetTime.CanAccess">
            <summary>
                <para>Gets a value indicating whether the time can be retrieved right now.</para>
                <para>The time server can only be accessed once every five seconds. If less than five seconds have passed since the last call to GetCurrentDateTime(), this property will return false.</para>
            </summary>
            <value>
                <c>true</c> if the time can be retrieved; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Rage.InternetTime">
            <summary>
                <para>Class for getting the current time from the Internet.</para>
                <para>This class uses the TIME protocol to get the current time from nist1-macon.macon.ga.us.</para>
            </summary>
        </member>
        <member name="M:Rage.VehicleModder.ApplyAllMods">
            <summary>
Applies the maximum index of all mods to this vehicle.
</summary>
        </member>
        <member name="M:Rage.VehicleModder.InstallModKit">
            <summary>
Installs a default mod kit. Vehicles cannot be modified without a mod kit.
</summary>
        </member>
        <member name="M:Rage.VehicleWheel.BurstTire">
            <summary>
Bursts the tire on this wheel.
</summary>
        </member>
        <member name="M:Rage.VehicleWheel.FixTire">
            <summary>
Fixes the tire on this wheel.
</summary>
        </member>
        <member name="P:Rage.VehicleWheel.IsOnFire">
            <summary>
                <para>Gets or sets a value indicating whether this wheel is on fire.</para>
            </summary>
            <value>
                <c>true</c> if this wheel is on fire; otherwise <c>false</c>.</value>
        </member>
        <member name="P:Rage.VehicleWheel.IsDriveWheel">
            <summary>
                <para>Gets or sets a value indicating whether this wheel is a drive wheel.</para>
            </summary>
            <value>
                <c>true</c> if this wheel is a drive wheel; otherwise <c>false</c>.</value>
        </member>
        <member name="P:Rage.VehicleWheel.IsFacingLeft">
            <summary>
                <para>Gets or sets a value indicating whether this wheel is facing the left side of the vehicle.</para>
                <para>This determines only which way the wheel is facing, not where it's located.</para>
            </summary>
            <value>
                <c>true</c> if this wheel is facing the left side of the vehicle; otherwise <c>false</c>.</value>
        </member>
        <member name="P:Rage.VehicleWheel.IsSteeringWheel">
            <summary>
                <para>Gets or sets a value indicating whether this wheel is used for turning the vehicle.</para>
            </summary>
            <value>
                <c>true</c> if this wheel is used for turning the vehicle; otherwise <c>false</c>.</value>
            <remarks>Which way the wheel turns is determined by the sign of AngleLimit.</remarks>
        </member>
        <member name="P:Rage.VehicleWheel.IsTouching">
            <summary>
                <para>Gets a value indicating whether this wheel is currently touching a surface.</para>
            </summary>
            <value>
                <c>true</c> if this wheel is currently touching a surface; otherwise <c>false</c>.</value>
        </member>
        <member name="P:Rage.VehicleWheel.LastContactPoint">
            <summary>
                <para>Gets the position of the point the wheel was last touching.</para>
            </summary>
            <value>The position of the point the wheel was last touching.</value>
        </member>
        <member name="P:Rage.VehicleWheel.Temperature">
            <summary>
                <para>Gets or sets a value representing the temperature of this wheel.</para>
                <para>If the temperature gets too high, the tire will burst.</para>
            </summary>
            <value>The floating point value between 0.0f and 59.0f representing the temperature of this wheel.</value>
        </member>
        <member name="P:Rage.VehicleWheel.SuspensionStrength">
            <summary>
Gets or sets the strength of the suspension of this wheel.
</summary>
            <value>The strength of the suspension of this wheel.</value>
        </member>
        <member name="P:Rage.VehicleWheel.AngleLimit">
            <summary>
                <para>Gets or sets the maximum number of degrees this wheel can turn when steering inwards.</para>
                <para>This value also affects the maximum angle when turning outwards, however this value will be scaled to be a little larger.</para>
            </summary>
            <value>The maximum number of degrees this wheel can turn when steering inwards.</value>
        </member>
        <member name="P:Rage.VehicleWheel.TireHealth">
            <summary>
Gets the health of the tire of this wheel.
</summary>
            <value>The health of the tire of this wheel.</value>
        </member>
        <member name="P:Rage.VehicleWheel.Health">
            <summary>
Gets the health of this wheel.
</summary>
            <value>The health of this wheel.</value>
        </member>
        <member name="M:Rage.ConsoleCommands.ArgumentParsers.ConsoleCommandArgumentParserPed.Parse(System.String)">
            <summary>
Parses the specified argument as a <see cref="T:Rage.Ped" />.
</summary>
            <param name="argument">The argument to parse.</param>
            <returns>If successful, returns the resulting <see cref="T:Rage.Ped" />; otherwise, returns <c>null</c>.</returns>
        </member>
        <member name="P:Rage.HitResult.HitEntity">
            <summary>
Gets the <see cref="T:Rage.Entity" /> that was hit.
</summary>
            <value>If the trace hit something, the <see cref="T:Rage.Entity" /> that was hit; otherwise <c>null</c>.</value>
        </member>
        <member name="P:Rage.HitResult.HitNormal">
            <summary>
Gets the normal of the surface that was hit.
</summary>
            <value>If the trace hit something, the normal of the surface that was hit; otherwise <see cref="P:Rage.Vector3.Zero" />.</value>
        </member>
        <member name="P:Rage.HitResult.HitPosition">
            <summary>
Gets the position where the trace hit.
</summary>
            <value>If the trace hit something, the position where the trace hit; otherwise <see cref="P:Rage.Vector3.Zero" />.</value>
        </member>
        <member name="P:Rage.HitResult.Hit">
            <summary>
Gets a value indicating whether the trace hit anything.
</summary>
            <value>
                <c>true</c> if anything was hit; otherwise <c>false</c>.</value>
        </member>
        <member name="M:RagePluginHook.WorkingForm.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="F:RagePluginHook.WorkingForm.components">
            <summary>
Required designer variable.
</summary>
        </member>
        <member name="M:RagePluginHook.WorkingForm.Dispose">
            <summary>
Clean up any resources being used.
</summary>
        </member>
        <member name="M:RagePluginHook.CrashForm.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="F:RagePluginHook.CrashForm.components">
            <summary>
Required designer variable.
</summary>
        </member>
        <member name="M:RagePluginHook.CrashForm.Dispose">
            <summary>
Clean up any resources being used.
</summary>
        </member>
        <member name="M:Rage.VehicleWindow.Repair">
            <summary>
Repairs this window.
</summary>
        </member>
        <member name="M:Rage.VehicleWindow.Smash">
            <summary>
Smashes this window.
</summary>
        </member>
        <member name="M:Rage.VehicleWindow.RollDown">
            <summary>
Moves this window to the rolled down state.
</summary>
        </member>
        <member name="M:Rage.VehicleWindow.RollUp">
            <summary>
Moves this window to the rolled up state.
</summary>
        </member>
        <member name="M:Rage.VehicleWindow.Remove">
            <summary>
Removes this window.
</summary>
        </member>
        <member name="P:Rage.VehicleWindow.IsIntact">
            <summary>
Gets a value indicating whether this window is intact.
</summary>
            <value>Whether this window is intact..</value>
        </member>
        <member name="M:Rage.ConsoleCommands.ArgumentParsers.ConsoleCommandArgumentParserFractional.Parse(System.String)">
            <summary>
Parses the specified argument as a floating point number.
</summary>
            <param name="argument">The argument to parse.</param>
            <returns>If successful, returns the resulting <see cref="T:System.Single" />; otherwise, returns <c>null</c>.</returns>
        </member>
        <member name="M:Rage.Matrix.Equals(Rage.Matrix@,Rage.Matrix@)">
            <summary>
Determines whether the specified object instances are considered equal. 
</summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
                <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Matrix.Equals(Rage.Matrix)">
            <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Rage.Matrix.Equals(System.Object)">
            <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Rage.Matrix.GetHashCode">
            <summary>
Returns the hash code for this instance.
</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Rage.Matrix.ToString">
            <summary>
Converts the value of the object to its equivalent string representation.
</summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Rage.Matrix.op_Inequality(Rage.Matrix,Rage.Matrix)">
            <summary>
Tests for inequality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Matrix.op_Equality(Rage.Matrix,Rage.Matrix)">
            <summary>
Tests for equality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Matrix.op_Multiply(System.Single,Rage.Matrix)">
            <summary>
Scales a matrix by a given value.
</summary>
            <param name="right">The matrix to scale.</param>
            <param name="left">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.op_Multiply(Rage.Matrix,System.Single)">
            <summary>
Scales a matrix by a given value.
</summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.op_Multiply(Rage.Matrix,Rage.Matrix)">
            <summary>
Multiplies two matricies.
</summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matricies.</returns>
        </member>
        <member name="M:Rage.Matrix.op_Division(Rage.Matrix,System.Single)">
            <summary>
Scales a matrix by a given value.
</summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.op_Division(Rage.Matrix,Rage.Matrix)">
            <summary>
Divides two matricies.
</summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matricies.</returns>
        </member>
        <member name="M:Rage.Matrix.op_Subtraction(Rage.Matrix,Rage.Matrix)">
            <summary>
Subtracts two matricies.
</summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matricies.</returns>
        </member>
        <member name="M:Rage.Matrix.op_Addition(Rage.Matrix,Rage.Matrix)">
            <summary>
Adds two matricies.
</summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matricies.</returns>
        </member>
        <member name="M:Rage.Matrix.op_UnaryNegation(Rage.Matrix)">
            <summary>
Negates a matrix.
</summary>
            <param name="matrix">The matrix to negate.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.Transformation2D(Rage.Vector2@,System.Single,Rage.Vector2@,Rage.Vector2@,System.Single,Rage.Vector2@,Rage.Matrix@)">
            <summary>
Creates a 2D transformation matrix.
</summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:Rage.Matrix.Transformation2D(Rage.Vector2,System.Single,Rage.Vector2,Rage.Vector2,System.Single,Rage.Vector2)">
            <summary>
Creates a 2D transformation matrix.
</summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.Transformation(Rage.Vector3@,Rage.Quaternion@,Rage.Vector3@,Rage.Vector3@,Rage.Quaternion@,Rage.Vector3@,Rage.Matrix@)">
            <summary>
Creates a transformation matrix.
</summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:Rage.Matrix.Transformation(Rage.Vector3,Rage.Quaternion,Rage.Vector3,Rage.Vector3,Rage.Quaternion,Rage.Vector3)">
            <summary>
Creates a transformation matrix.
</summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.AffineTransformation2D(System.Single,Rage.Vector2@,System.Single,Rage.Vector2@,Rage.Matrix@)">
            <summary>
Creates a 2D affine transformation matrix.
</summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:Rage.Matrix.AffineTransformation2D(System.Single,Rage.Vector2,System.Single,Rage.Vector2)">
            <summary>
Creates a 2D affine transformation matrix.
</summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.AffineTransformation(System.Single,Rage.Vector3@,Rage.Quaternion@,Rage.Vector3@,Rage.Matrix@)">
            <summary>
Creates a 3D affine transformation matrix.
</summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:Rage.Matrix.AffineTransformation(System.Single,Rage.Vector3,Rage.Quaternion,Rage.Vector3)">
            <summary>
Creates a 3D affine transformation matrix.
</summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.Transpose(Rage.Matrix@,Rage.Matrix@)">
            <summary>
Calculates the transpose of the specified matrix.
</summary>
            <param name="matrix">The matrix whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified matrix.</param>
        </member>
        <member name="M:Rage.Matrix.Transpose(Rage.Matrix)">
            <summary>
Calculates the transpose of the specified matrix.
</summary>
            <param name="matrix">The matrix whose transpose is to be calculated.</param>
            <returns>The transpose of the specified matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.Invert(Rage.Matrix@,Rage.Matrix@)">
            <summary>
Calculates the inverse of the specified matrix.
</summary>
            <param name="matrix">The matrix whose inverse is to be calculated.</param>
            <param name="result">When the method completes, contains the inverse of the specified matrix.</param>
        </member>
        <member name="M:Rage.Matrix.Invert(Rage.Matrix)">
            <summary>
Calculates the inverse of the specified matrix.
</summary>
            <param name="matrix">The matrix whose inverse is to be calculated.</param>
            <returns>The inverse of the specified matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.Translation(Rage.Vector3@,Rage.Matrix@)">
            <summary>
Creates a translation matrix using the specified offsets.
</summary>
            <param name="amount">The offset for all three coordinate planes.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:Rage.Matrix.Translation(Rage.Vector3)">
            <summary>
Creates a translation matrix using the specified offsets.
</summary>
            <param name="amount">The offset for all three coordinate planes.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.Translation(System.Single,System.Single,System.Single,Rage.Matrix@)">
            <summary>
Creates a translation matrix using the specified offsets.
</summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:Rage.Matrix.Translation(System.Single,System.Single,System.Single)">
            <summary>
Creates a translation matrix using the specified offsets.
</summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.Scaling(Rage.Vector3@,Rage.Matrix@)">
            <summary>
Creates a matrix that scales along the x-axis, y-axis, and y-axis.
</summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:Rage.Matrix.Scaling(Rage.Vector3)">
            <summary>
Creates a matrix that scales along the x-axis, y-axis, and y-axis.
</summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.Scaling(System.Single,System.Single,System.Single,Rage.Matrix@)">
            <summary>
Creates a matrix that scales along the x-axis, y-axis, and y-axis.
</summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:Rage.Matrix.Scaling(System.Single,System.Single,System.Single)">
            <summary>
Creates a matrix that scales along the x-axis, y-axis, and y-axis.
</summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.PerspectiveOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Rage.Matrix@)">
            <summary>
Creates a right-handed, customized perspective projection matrix.
</summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:Rage.Matrix.PerspectiveOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
Creates a right-handed, customized perspective projection matrix.
</summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.PerspectiveOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Rage.Matrix@)">
            <summary>
Creates a left-handed, customized perspective projection matrix.
</summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:Rage.Matrix.PerspectiveOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
Creates a left-handed, customized perspective projection matrix.
</summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.PerspectiveFovRH(System.Single,System.Single,System.Single,System.Single,Rage.Matrix@)">
            <summary>
Creates a right-handed, perspective projection matrix based on a field of view.
</summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:Rage.Matrix.PerspectiveFovRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Creates a right-handed, perspective projection matrix based on a field of view.
</summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.PerspectiveFovLH(System.Single,System.Single,System.Single,System.Single,Rage.Matrix@)">
            <summary>
Creates a left-handed, perspective projection matrix based on a field of view.
</summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:Rage.Matrix.PerspectiveFovLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Creates a left-handed, perspective projection matrix based on a field of view.
</summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.PerspectiveRH(System.Single,System.Single,System.Single,System.Single,Rage.Matrix@)">
            <summary>
Creates a right-handed, perspective projection matrix.
</summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:Rage.Matrix.PerspectiveRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Creates a right-handed, perspective projection matrix.
</summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.PerspectiveLH(System.Single,System.Single,System.Single,System.Single,Rage.Matrix@)">
            <summary>
Creates a left-handed, perspective projection matrix.
</summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:Rage.Matrix.PerspectiveLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Creates a left-handed, perspective projection matrix.
</summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.OrthoOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Rage.Matrix@)">
            <summary>
Creates a right-handed, customized orthographic projection matrix.
</summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:Rage.Matrix.OrthoOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
Creates a right-handed, customized orthographic projection matrix.
</summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.OrthoOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Rage.Matrix@)">
            <summary>
Creates a left-handed, customized orthographic projection matrix.
</summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:Rage.Matrix.OrthoOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
Creates a left-handed, customized orthographic projection matrix.
</summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.OrthoRH(System.Single,System.Single,System.Single,System.Single,Rage.Matrix@)">
            <summary>
Creates a right-handed, orthographic projection matrix.
</summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:Rage.Matrix.OrthoRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Creates a right-handed, orthographic projection matrix.
</summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.OrthoLH(System.Single,System.Single,System.Single,System.Single,Rage.Matrix@)">
            <summary>
Creates a left-handed, orthographic projection matrix.
</summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:Rage.Matrix.OrthoLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Creates a left-handed, orthographic projection matrix.
</summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.LookAtRH(Rage.Vector3@,Rage.Vector3@,Rage.Vector3@,Rage.Matrix@)">
            <summary>
Creates a right-handed, look-at matrix.
</summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at matrix.</param>
        </member>
        <member name="M:Rage.Matrix.LookAtRH(Rage.Vector3,Rage.Vector3,Rage.Vector3)">
            <summary>
Creates a right-handed, look-at matrix.
</summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.LookAtLH(Rage.Vector3@,Rage.Vector3@,Rage.Vector3@,Rage.Matrix@)">
            <summary>
Creates a left-handed, look-at matrix.
</summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at matrix.</param>
        </member>
        <member name="M:Rage.Matrix.LookAtLH(Rage.Vector3,Rage.Vector3,Rage.Vector3)">
            <summary>
Creates a left-handed, look-at matrix.
</summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single,Rage.Matrix@)">
            <summary>
Creates a rotation matrix with a specified yaw, pitch, and roll.
</summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:Rage.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
Creates a rotation matrix with a specified yaw, pitch, and roll.
</summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.RotationQuaternion(Rage.Quaternion@,Rage.Matrix@)">
            <summary>
Creates a rotation matrix from a quaternion.
</summary>
            <param name="rotation">The quaternion to use to build the matrix.</param>
            <param name="result">The created rotation matrix.</param>
        </member>
        <member name="M:Rage.Matrix.RotationQuaternion(Rage.Quaternion)">
            <summary>
Creates a rotation matrix from a quaternion.
</summary>
            <param name="rotation">The quaternion to use to build the matrix.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.RotationAxis(Rage.Vector3@,System.Single,Rage.Matrix@)">
            <summary>
Creates a matrix that rotates around an arbitary axis.
</summary>
            <param name="axis">The axis around which to rotate.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:Rage.Matrix.RotationAxis(Rage.Vector3,System.Single)">
            <summary>
Creates a matrix that rotates around an arbitary axis.
</summary>
            <param name="axis">The axis around which to rotate.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.RotationZ(System.Single,Rage.Matrix@)">
            <summary>
Creates a matrix that rotates around the z-axis.
</summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:Rage.Matrix.RotationZ(System.Single)">
            <summary>
Creates a matrix that rotates around the z-axis.
</summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.RotationY(System.Single,Rage.Matrix@)">
            <summary>
Creates a matrix that rotates around the y-axis.
</summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:Rage.Matrix.RotationY(System.Single)">
            <summary>
Creates a matrix that rotates around the y-axis.
</summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.RotationX(System.Single,Rage.Matrix@)">
            <summary>
Creates a matrix that rotates around the x-axis.
</summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:Rage.Matrix.RotationX(System.Single)">
            <summary>
Creates a matrix that rotates around the x-axis.
</summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.Billboard(Rage.Vector3@,Rage.Vector3@,Rage.Vector3@,Rage.Vector3@,Rage.Matrix@)">
            <summary>
Creates a spherical billboard that rotates around a specified object position.
</summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard matrix.</param>
        </member>
        <member name="M:Rage.Matrix.Billboard(Rage.Vector3,Rage.Vector3,Rage.Vector3,Rage.Vector3)">
            <summary>
Creates a spherical billboard that rotates around a specified object position.
</summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.Lerp(Rage.Matrix@,Rage.Matrix@,System.Single,Rage.Matrix@)">
            <summary>
Performs a linear interpolation between two matricies.
</summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two matricies.</param>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:Rage.Matrix.Lerp(Rage.Matrix,Rage.Matrix,System.Single)">
            <summary>
Performs a linear interpolation between two matricies.
</summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two matrices.</returns>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:Rage.Matrix.Negate(Rage.Matrix@,Rage.Matrix@)">
            <summary>
Negates a matrix.
</summary>
            <param name="matrix">The matrix to be negated.</param>
            <param name="result">When the method completes, contains the negated matrix.</param>
        </member>
        <member name="M:Rage.Matrix.Negate(Rage.Matrix)">
            <summary>
Negates a matrix.
</summary>
            <param name="matrix">The matrix to be negated.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.Divide(Rage.Matrix@,System.Single,Rage.Matrix@)">
            <summary>
Scales a matrix by the given value.
</summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:Rage.Matrix.Divide(Rage.Matrix,System.Single)">
            <summary>
Scales a matrix by the given value.
</summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.Divide(Rage.Matrix@,Rage.Matrix@,Rage.Matrix@)">
            <summary>
Determines the quotient of two matrices.
</summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <param name="result">When the method completes, contains the quotient of the two matrices.</param>
        </member>
        <member name="M:Rage.Matrix.Divide(Rage.Matrix,Rage.Matrix)">
            <summary>
Determines the quotient of two matrices.
</summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:Rage.Matrix.Multiply(Rage.Matrix@,System.Single,Rage.Matrix@)">
            <summary>
Scales a matrix by the given value.
</summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:Rage.Matrix.Multiply(Rage.Matrix,System.Single)">
            <summary>
Scales a matrix by the given value.
</summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.Multiply(Rage.Matrix[],Rage.Matrix,Rage.Matrix[])">
            <summary>
Determines the products of of an array of matrices by a single matrix.
</summary>
            <param name="left">The first matrix array to multiply.</param>
            <param name="right">The matrix to multiply the matrices in the array by.</param>
            <param name="result">The array of products of the matrices.</param>
        </member>
        <member name="M:Rage.Matrix.Multiply(Rage.Matrix[],Rage.Matrix,Rage.Matrix[],System.Int32,System.Int32)">
            <summary>
Determines the products of of an array of matrices by a single matrix.
</summary>
            <param name="left">The first matrix array to multiply.</param>
            <param name="right">The matrix to multiply the matrices in the array by.</param>
            <param name="result">The array of products of the matrices.</param>
            <param name="offset">The offset at which to begin the multiplication.</param>
            <param name="count">The number of matrices to multiply, or 0 to process the entire array.</param>
        </member>
        <member name="M:Rage.Matrix.Multiply(Rage.Matrix[],Rage.Matrix[],Rage.Matrix[])">
            <summary>
Determines the products of two arrays of matrices.
</summary>
            <param name="left">The first matrix array to multiply.</param>
            <param name="right">The second matrix array to multiply.</param>
            <param name="result">The array of products of the two matrices.</param>
        </member>
        <member name="M:Rage.Matrix.Multiply(Rage.Matrix[],Rage.Matrix[],Rage.Matrix[],System.Int32,System.Int32)">
            <summary>
Determines the products of two arrays of matrices.
</summary>
            <param name="left">The first matrix array to multiply.</param>
            <param name="right">The second matrix array to multiply.</param>
            <param name="result">The array of products of the two matrices.</param>
            <param name="offset">The offset at which to begin the multiplication.</param>
            <param name="count">The number of matrices to multiply, or 0 to process the entire array.</param>
        </member>
        <member name="M:Rage.Matrix.Multiply(Rage.Matrix*,Rage.Matrix*,Rage.Matrix*,System.Int32)">
            <summary>
Determines the products of two arrays of matrices.
</summary>
            <param name="left">The first matrix array to multiply.</param>
            <param name="right">The second matrix array to multiply.</param>
            <param name="result">The array of products of the two matrices.</param>
        </member>
        <member name="M:Rage.Matrix.Multiply(Rage.Matrix@,Rage.Matrix@,Rage.Matrix@)">
            <summary>
Determines the product of two matrices.
</summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:Rage.Matrix.Multiply(Rage.Matrix,Rage.Matrix)">
            <summary>
Determines the product of two matrices.
</summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:Rage.Matrix.Subtract(Rage.Matrix@,Rage.Matrix@,Rage.Matrix@)">
            <summary>
Determines the difference between two matrices.
</summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <param name="result">When the method completes, contains the difference between the two matrices.</param>
        </member>
        <member name="M:Rage.Matrix.Subtract(Rage.Matrix,Rage.Matrix)">
            <summary>
Determines the difference between two matrices.
</summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:Rage.Matrix.Add(Rage.Matrix@,Rage.Matrix@,Rage.Matrix@)">
            <summary>
Determines the sum of two matrices.
</summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <param name="result">When the method completes, contains the sum of the two matrices.</param>
        </member>
        <member name="M:Rage.Matrix.Add(Rage.Matrix,Rage.Matrix)">
            <summary>
Determines the sum of two matrices.
</summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:Rage.Matrix.Determinant">
            <summary>
Calculates the determinant of the matrix.
</summary>
            <returns>The determinant of the matrix.</returns>
        </member>
        <member name="M:Rage.Matrix.Decompose(Rage.Vector3@,Rage.Quaternion@,Rage.Vector3@)">
            <summary>
Decomposes the matrix into its scalar, rotational, and translational elements.
</summary>
            <param name="scale">When the method completes, contains the scalar element of the matrix.</param>
            <param name="rotation">When the method completes, contains the translational element of the matrix.</param>
            <param name="translation">When the method completes, contains the rotational element of the matrix.</param>
            <returns>
                <c>true</c> if the decomposition was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Matrix.Invert">
            <summary>
Inverts the matrix.
</summary>
        </member>
        <member name="P:Rage.Matrix.IsIdentity">
            <summary>
Gets a value indicating whether this instance is an identity matrix.
</summary>
        </member>
        <member name="P:Rage.Matrix.Identity">
            <summary>
Gets a <see cref="T:Rage.Matrix" /> that represents an identity matrix.
</summary>
        </member>
        <member name="F:Rage.Matrix.M44">
            <summary>
Gets or sets the element of the matrix that exists in the fourth row and fourth column. 
</summary>
        </member>
        <member name="F:Rage.Matrix.M43">
            <summary>
Gets or sets the element of the matrix that exists in the fourth row and third column. 
</summary>
        </member>
        <member name="F:Rage.Matrix.M42">
            <summary>
Gets or sets the element of the matrix that exists in the fourth row and second column. 
</summary>
        </member>
        <member name="F:Rage.Matrix.M41">
            <summary>
Gets or sets the element of the matrix that exists in the fourth row and first column. 
</summary>
        </member>
        <member name="F:Rage.Matrix.M34">
            <summary>
Gets or sets the element of the matrix that exists in the third row and fourth column. 
</summary>
        </member>
        <member name="F:Rage.Matrix.M33">
            <summary>
Gets or sets the element of the matrix that exists in the third row and third column. 
</summary>
        </member>
        <member name="F:Rage.Matrix.M32">
            <summary>
Gets or sets the element of the matrix that exists in the third row and second column. 
</summary>
        </member>
        <member name="F:Rage.Matrix.M31">
            <summary>
Gets or sets the element of the matrix that exists in the third row and first column. 
</summary>
        </member>
        <member name="F:Rage.Matrix.M24">
            <summary>
Gets or sets the element of the matrix that exists in the second row and fourth column. 
</summary>
        </member>
        <member name="F:Rage.Matrix.M23">
            <summary>
Gets or sets the element of the matrix that exists in the second row and third column. 
</summary>
        </member>
        <member name="F:Rage.Matrix.M22">
            <summary>
Gets or sets the element of the matrix that exists in the second row and second column. 
</summary>
        </member>
        <member name="F:Rage.Matrix.M21">
            <summary>
Gets or sets the element of the matrix that exists in the second row and first column. 
</summary>
        </member>
        <member name="F:Rage.Matrix.M14">
            <summary>
Gets or sets the element of the matrix that exists in the first row and fourth column. 
</summary>
        </member>
        <member name="F:Rage.Matrix.M13">
            <summary>
Gets or sets the element of the matrix that exists in the first row and third column. 
</summary>
        </member>
        <member name="F:Rage.Matrix.M12">
            <summary>
Gets or sets the element of the matrix that exists in the first row and second column. 
</summary>
        </member>
        <member name="F:Rage.Matrix.M11">
            <summary>
Gets or sets the element of the matrix that exists in the first row and first column. 
</summary>
        </member>
        <member name="T:Rage.Matrix">
            <summary>
Defines a 4x4 matrix.
</summary>
            <unmanaged>D3DXMATRIX</unmanaged>
        </member>
        <member name="M:Rage.HandlingData.IsValid">
            <inheritdocs />
        </member>
        <member name="M:Rage.HandlingData.op_Inequality(Rage.HandlingData,Rage.HandlingData)">
            <summary>
Determines whether the the first <see cref="T:Rage.HandlingData" /> instance represents a different handling data than the second <see cref="T:Rage.HandlingData" /> instance.
</summary>
            <param name="left">The first <see cref="T:Rage.HandlingData" /> instance.</param>
            <param name="right">The first <see cref="T:Rage.HandlingData" /> instance.</param>
            <returns>
                <c>true</c> if the first instance does not represent the same handling data as the second instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.HandlingData.op_Equality(Rage.HandlingData,Rage.HandlingData)">
            <summary>
Determines whether the the first <see cref="T:Rage.HandlingData" /> instance represents the same handling data as the second <see cref="T:Rage.HandlingData" /> instance.
</summary>
            <param name="left">The first <see cref="T:Rage.HandlingData" /> instance.</param>
            <param name="right">The first <see cref="T:Rage.HandlingData" /> instance.</param>
            <returns>
                <c>true</c> if the first instance represents the same handling data as the second instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.HandlingData.Equals(Rage.IHandleable)">
            <summary>
Indicates whether this instance equals the specified <see cref="T:Rage.IHandleable" /> instance.
</summary>
            <param name="obj">The <see cref="T:Rage.IHandleable" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if this instance is equal to the specified <see cref="T:Rage.IHandleable" /> instance.</returns>
        </member>
        <member name="M:Rage.HandlingData.Equals(Rage.HandlingData)">
            <summary>
Indicates whether this instance equals the specified <see cref="T:Rage.HandlingData" /> instance.
</summary>
            <param name="obj">The <see cref="T:Rage.HandlingData" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if this instance is equal to the specified <see cref="T:Rage.HandlingData" /> instance.</returns>
        </member>
        <member name="P:Rage.HandlingData.AntiRollBarBiasFront">
            <summary>
Gets or sets the bias between front and rear for the anti-roll bar.
</summary>
            <value>The anti roll bar bias front. 0.0f is fully front, 1.0f is fully rear.</value>
        </member>
        <member name="P:Rage.HandlingData.AntiRollBarForce">
            <summary>
Gets or sets the spring constant that is transmitted to the opposite wheel when under compression. Larger numbers result in a larger force being applied.
</summary>
            <value>The anti roll bar force.</value>
        </member>
        <member name="P:Rage.HandlingData.SuspensionBiasFront">
            <summary>
Gets or sets damping scale bias between front and rear wheels. if more wheels at back (e.g. trucks) front suspension should be stronger.
</summary>
            <value>The suspension bias front.</value>
        </member>
        <member name="P:Rage.HandlingData.SuspensionRaise">
            <summary>
Gets or sets the adjustment from artist positioning.
</summary>
            <value>The suspension raise.</value>
        </member>
        <member name="P:Rage.HandlingData.SuspensionLowerLimit">
            <summary>
Gets or sets how far the wheels can move down from their original position.
</summary>
            <value>The suspension lower limit.</value>
        </member>
        <member name="P:Rage.HandlingData.SuspensionUpperLimit">
            <summary>
Gets or sets how far the wheels can move up from their original position.
</summary>
            <value>The suspension upper limit.</value>
        </member>
        <member name="P:Rage.HandlingData.SuspensionForce">
            <summary>
Gets or sets the suspension force. Lower limit for zero force at full extension is calculated using (1.0f / (force * number of wheels)).
</summary>
            <value>The suspension force.</value>
        </member>
        <member name="P:Rage.HandlingData.TractionLossMultiplier">
            <summary>
Gets or sets how much traction is affected by material grip differences from 1.0f.
</summary>
            <value>The traction loss multiplier.</value>
        </member>
        <member name="P:Rage.HandlingData.TractionSpringDeltaMaximum">
            <summary>
Gets or sets the maximum distance for traction spring.
</summary>
            <value>The maximum distance for traction spring.</value>
        </member>
        <member name="P:Rage.HandlingData.PercentSubmerged">
            <summary>
Gets or sets the drag coefficient on the RAGE physics archetype of the vehicle (proportional to velocity squared). Increase to simulate aerodynamic drag.
</summary>
            <value>The percent submerged, in range 10 to 120.</value>
        </member>
        <member name="P:Rage.HandlingData.ClutchChangeRateScaleDownShift">
            <summary>
Gets or sets the clutch speed multiplier on down shifts.
</summary>
            <value>The clutch speed multiplier on down shifts.</value>
        </member>
        <member name="P:Rage.HandlingData.ClutchChangeRateScaleUpShift">
            <summary>
Gets or sets the clutch speed multiplier on up shifts.
</summary>
            <value>The clutch speed multiplier on up shifts.</value>
        </member>
        <member name="P:Rage.HandlingData.TopSpeed">
            <summary>
                <para>Gets or sets the max speed in top gear (used when configuring gears).</para>
                <para>This value is initialized using InitialDriveMaxFlatVel in handlingdata.meta multiplied by 1.2f.</para>
            </summary>
            <value>The max speed in top gear.</value>
        </member>
        <member name="P:Rage.HandlingData.InitialDriveForce">
            <summary>
Gets or sets the power engine produces in top gear.
</summary>
            <value>The power engine produces in top gear.</value>
        </member>
        <member name="P:Rage.HandlingData.DriveInertia">
            <summary>
Gets or sets the drive inertia. A lower drive inertia slows engine acceleration. If you want a vehicle with high torque but slow acceleration (e.g. a truck) lower the driver inertia but specify a high drive force.
</summary>
            <value>The drive inertia.</value>
        </member>
        <member name="P:Rage.HandlingData.InitialDriveGears">
            <summary>
Gets or sets the number of gears (excluding reverse).
</summary>
            <value>The number of gears (excluding reverse).</value>
        </member>
        <member name="P:Rage.HandlingData.MemoryAddress">
            <inheritdocs />
        </member>
        <member name="P:Rage.HandlingData.Handle">
            <inheritdocs />
        </member>
        <member name="M:Rage.CryptographyHelper.GenerateSHA512Hash(System.String,System.Text.Encoding)">
            <summary>
Generates a SHA-512 (Secure Hash Algorithm) checksum from the specified text.
</summary>
            <param name="text">The text to generate the checksum from.</param>
            <param name="encoding">The encoding of the text.</param>
            <returns>Returns the 128 byte checksum of the specified text.</returns>
        </member>
        <member name="M:Rage.CryptographyHelper.GenerateSHA512Hash(System.String)">
            <summary>
Generates a SHA-512 (Secure Hash Algorithm) checksum from the specified text.
</summary>
            <param name="text">The text to generate the checksum from. Assumes UTF8 encoding.</param>
            <returns>Returns the 128 byte checksum of the specified text.</returns>
        </member>
        <member name="M:Rage.CryptographyHelper.GenerateSHA512Hash(System.IO.Stream)">
            <summary>
Generates a SHA-512 (Secure Hash Algorithm) checksum from the specified stream.
</summary>
            <param name="stream">The stream to generate the checksum from. Reading starts from the current position.</param>
            <returns>Returns the 128 byte checksum of the data in the specified stream.</returns>
        </member>
        <member name="M:Rage.CryptographyHelper.GenerateSHA384Hash(System.String,System.Text.Encoding)">
            <summary>
Generates a SHA-384 (Secure Hash Algorithm) checksum from the specified text.
</summary>
            <param name="text">The text to generate the checksum from.</param>
            <param name="encoding">The encoding of the text.</param>
            <returns>Returns the 96 byte checksum of the specified text.</returns>
        </member>
        <member name="M:Rage.CryptographyHelper.GenerateSHA384Hash(System.String)">
            <summary>
Generates a SHA-384 (Secure Hash Algorithm) checksum from the specified text.
</summary>
            <param name="text">The text to generate the checksum from. Assumes UTF8 encoding.</param>
            <returns>Returns the 96 byte checksum of the specified text.</returns>
        </member>
        <member name="M:Rage.CryptographyHelper.GenerateSHA384Hash(System.IO.Stream)">
            <summary>
Generates a SHA-384 (Secure Hash Algorithm) checksum from the specified stream.
</summary>
            <param name="stream">The stream to generate the checksum from. Reading starts from the current position.</param>
            <returns>Returns the 96 byte checksum of the data in the specified stream.</returns>
        </member>
        <member name="M:Rage.CryptographyHelper.GenerateSHA256Hash(System.String,System.Text.Encoding)">
            <summary>
Generates a SHA-256 (Secure Hash Algorithm) checksum from the specified text.
</summary>
            <param name="text">The text to generate the checksum from.</param>
            <param name="encoding">The encoding of the text.</param>
            <returns>Returns the 64 byte checksum of the specified text.</returns>
        </member>
        <member name="M:Rage.CryptographyHelper.GenerateSHA256Hash(System.String)">
            <summary>
Generates a SHA-256 (Secure Hash Algorithm) checksum from the specified text.
</summary>
            <param name="text">The text to generate the checksum from. Assumes UTF8 encoding.</param>
            <returns>Returns the 64 byte checksum of the specified text.</returns>
        </member>
        <member name="M:Rage.CryptographyHelper.GenerateSHA256Hash(System.IO.Stream)">
            <summary>
Generates a SHA-256 (Secure Hash Algorithm) checksum from the specified stream.
</summary>
            <param name="stream">The stream to generate the checksum from. Reading starts from the current position.</param>
            <returns>Returns the 64 byte checksum of the data in the specified stream.</returns>
        </member>
        <member name="M:Rage.CryptographyHelper.GenerateSHA1Hash(System.String,System.Text.Encoding)">
            <summary>
Generates a SHA-1 (Secure Hash Algorithm) checksum from the specified text.
</summary>
            <param name="text">The text to generate the checksum from.</param>
            <param name="encoding">The encoding of the text.</param>
            <returns>Returns the 40 byte checksum of the specified text.</returns>
        </member>
        <member name="M:Rage.CryptographyHelper.GenerateSHA1Hash(System.String)">
            <summary>
Generates a SHA-1 (Secure Hash Algorithm) checksum from the specified text.
</summary>
            <param name="text">The text to generate the checksum from. Assumes UTF8 encoding.</param>
            <returns>Returns the 40 byte checksum of the specified text.</returns>
        </member>
        <member name="M:Rage.CryptographyHelper.GenerateSHA1Hash(System.IO.Stream)">
            <summary>
Generates a SHA-1 (Secure Hash Algorithm) checksum from the specified stream.
</summary>
            <param name="stream">The stream to generate the checksum from. Reading starts from the current position.</param>
            <returns>Returns the 40 byte checksum of the data in the specified stream.</returns>
        </member>
        <member name="M:Rage.CryptographyHelper.GenerateMD5Hash(System.String,System.Text.Encoding)">
            <summary>
Generates an MD5 (Message Digest 5) checksum from the specified text.
</summary>
            <param name="text">The text to generate the checksum from.</param>
            <param name="encoding">The encoding of the text.</param>
            <returns>Returns the 32 byte checksum of the specified text.</returns>
        </member>
        <member name="M:Rage.CryptographyHelper.GenerateMD5Hash(System.String)">
            <summary>
Generates an MD5 (Message Digest 5) checksum from the specified text.
</summary>
            <param name="text">The text to generate the checksum from. Assumes UTF8 encoding.</param>
            <returns>Returns the 32 byte checksum of the specified text.</returns>
        </member>
        <member name="M:Rage.CryptographyHelper.GenerateMD5Hash(System.IO.Stream)">
            <summary>
Generates an MD5 (Message Digest 5) checksum from the specified stream.
</summary>
            <param name="stream">The stream to generate the checksum from. Reading starts from the current position.</param>
            <returns>Returns the 32 byte checksum of the data in the specified stream.</returns>
        </member>
        <member name="T:Rage.CryptographyHelper">
            <summary>
A helper class for cryptography.
</summary>
        </member>
        <member name="M:Rage.TaskSequence.Execute(System.Boolean)">
            <summary>
Executes this <see cref="T:Rage.TaskSequence" />.
</summary>
            <param name="repeat">Whether to repeat the tasks.</param>
        </member>
        <member name="M:Rage.TaskSequence.Execute">
            <summary>
Executes this <see cref="T:Rage.TaskSequence" />.
</summary>
        </member>
        <member name="P:Rage.TaskSequence.Tasks">
            <summary>
Gets an instance of <see cref="T:Rage.TaskInvoker" /> for the owning <see cref="P:Rage.TaskSequence.Ped" /> of this <see cref="T:Rage.TaskSequence" /> that can be used to invoke tasks on this <see cref="P:Rage.TaskSequence.Ped" />.
</summary>
            <value>An instance of <see cref="T:Rage.TaskInvoker" /> for the owning <see cref="P:Rage.TaskSequence.Ped" /> of this <see cref="T:Rage.TaskSequence" /> that can be used to invoke tasks on this <see cref="P:Rage.TaskSequence.Ped" />.</value>
        </member>
        <member name="P:Rage.TaskSequence.Ped">
            <summary>
Gets the <see cref="P:Rage.TaskSequence.Ped" /> that owns this <see cref="T:Rage.TaskSequence" />.
</summary>
            <value>The <see cref="P:Rage.TaskSequence.Ped" /> that owns this <see cref="T:Rage.TaskSequence" />.</value>
        </member>
        <member name="M:Rage.TaskSequence.#ctor(Rage.Ped)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.TaskSequence" /> class.
</summary>
            <param name="ped">The <see cref="P:Rage.TaskSequence.Ped" /> to execute the tasks on.</param>
        </member>
        <member name="T:Rage.TaskSequence">
 TODO: EXCEPTION IF PLUGIN HAS YIELDED FROM CREATION TILL EXECUTION!
 TaskSequence works by calling task natives after opening a sequence task,
 meaning any task executed after opening the sequence task will be part of the sequence.
 So, if one plugin opens a sequence, and then sleeps before executing, any task executed by other plugins
 will become part of the first plugin's sequence.

 Atm, it only checks if time has passed from creation to execution.

<summary>
This class allows executing multiple tasks on a <see cref="T:Rage.Ped" /> in sequence.
</summary></member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.DeathTime">
            <summary>
Time to death (HACK for underwater). If -ve don't ever die.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.CStrLowerMax">
            <summary>
Behaviour unknown.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.CStrLowerMin">
            <summary>
Behaviour unknown.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.CStrUpperMax">
            <summary>
Behaviour unknown.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.CStrUpperMin">
            <summary>
Proportions to what the strength would be normally.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.UseCStrModulation">
            <summary>
If enabled upper and lower body strength scales with character strength, using the range given by parameters below.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.InitialNeckRampDuration">
            <summary>
Duration of the ramp to bring the neck stiffness/damping back to normal levels.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.InitialNeckDuration">
            <summary>
Duration for which the neck stays at intial stiffness/damping.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.InitialWeaknessRampDuration">
            <summary>
Duration of the ramp to bring the character's upper body stiffness back to normal levels.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.InitialWeaknessZeroDuration">
            <summary>
Duration for which the character's upper body stays at minimum stiffness (not quite zero).
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.UseExtendedCatchFall">
            <summary>
Keep the character active instead of relaxing at the end of the catch fall.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.FallingReaction">
            <summary>
0=Rollup, 1=Catchfall, 2=rollDownStairs, 3=smartFall.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.Melee">
            <summary>
Behaviour unknown.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.StableHandsAndNeck">
            <summary>
Additional stability for hands and neck (less loose).
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.AllowInjuredThighReach">
            <summary>
When false don't try to reach for injured Thighs.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.AllowInjuredLowerLegReach">
            <summary>
When false don't try to reach for injured Lower Legs (shins/feet).
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.AllowInjuredLeg">
            <summary>
When false injured leg is not bent and character does not bend to reach it.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.AllowInjuredArm">
            <summary>
Injured arm code runs if arm hit (turns and steps and bends injured arm).
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.Fling">
            <summary>
Type of reaction.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.ReachForWound">
            <summary>
Type of reaction.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.ChickenArms">
            <summary>
Type of reaction.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.Crouching">
            <summary>
Is the guy crouching or not.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.CpainSmooth2Zero">
            <summary>
Conscious pain ramping to zero after cpainSmooth2Time + cpainDuration (Replaces spinePainTime).
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.CpainTwistMag">
            <summary>
Conscious pain spine Twist/Lean2Side magnitude Replaces spinePainTwistMultiplier).
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.CpainMag">
            <summary>
Conscious pain spine Lean(back/Forward) magnitude (Replaces spinePainMultiplier).
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.CpainDuration">
            <summary>
Conscious pain duration at cpainMag/cpainTwistMag after cpainSmooth2Time.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.CpainSmooth2Time">
            <summary>
Conscious pain duration ramping from zero to cpainMag/cpainTwistMag.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.ExagZeroTime">
            <summary>
Exaggerate bullet time spent at 0 spine lean/twist after exagDuration + exagSmooth2Zero.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.ExagSmooth2Zero">
            <summary>
Exaggerate bullet duration ramping to zero after exagDuration.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.ExagTwistMag">
            <summary>
Exaggerate bullet spine Twist magnitude.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.ExagMag">
            <summary>
Exaggerate bullet spine Lean magnitude.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.ExagDuration">
            <summary>
Exaggerate bullet duration (at exagMag/exagTwistMag).
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.TimeBeforeReachForWound">
            <summary>
Time, in seconds, before the character begins to grab for the wound on the first hit.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.FlingTime">
            <summary>
Duration of the fling behaviour.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.FlingWidth">
            <summary>
Width of the fling behaviour.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.AngVelScaleMask">
            <summary>
Parts to scale the initial angular velocity by angVelScale (otherwize scale by 1.0).
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.AngVelScale">
            <summary>
How much to scale the angular velocity coming in from animation of a part if it is in angVelScaleMask (otherwise scale by 1.0).
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.AlwaysResetNeckLooseness">
            <summary>
Neck looseness always reset on shotNewBullet even if previous looseness ramp still running.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.AlwaysResetLooseness">
            <summary>
Looseness always reset on shotNewBullet even if previous looseness ramp still running.  Except for the neck which has it's own ramp.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.BulletProofVest">
            <summary>
Looseness applied to spine is different if bulletProofVest is true.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.SpineBlendZero">
            <summary>
Spine is always blended with zero pose this much and up to 1 as the character become stationary.  If negative no blend is ever applied.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.SpineBlendExagCPain">
            <summary>
True: spine is blended with zero pose, false: spine is blended with zero pose if not setting exag or cpain.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.GrabHoldTime">
            <summary>
How long to hold for before returning to relaxed arm position.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.MinLegsLooseness">
            <summary>
Minimum looseness to apply to the Legs.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.MinArmsLooseness">
            <summary>
Minimum looseness to apply to the arms.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.Looseness4Stagger">
            <summary>
How loose the upperBody of the character is made by a newBullet if staggerFall is running (and not falling).  Note atm the neck ramp values are ignored in staggerFall.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.Looseness4Fall">
            <summary>
How loose the character is made by a newBullet if falling.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.LoosenessAmount">
            <summary>
How loose the character is made by a newBullet. between 0 and 1.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.KMult4Legs">
            <summary>
How much to add to leg stiffnesses dependent on looseness.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.KMultOnLoose">
            <summary>
How much to add to upperbody stiffness dependent on looseness.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.NeckDamping">
            <summary>
Damping of neck.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.NeckStiffness">
            <summary>
Stiffness of neck.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.InitialNeckDamping">
            <summary>
Intial damping of neck after being shot.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.InitialNeckStiffness">
            <summary>
Initial stiffness of neck after being shot.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.ArmStiffness">
            <summary>
Arm stiffness.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.SpineDamping">
            <summary>
Stiffness of body. Feeds through to roll_up.
</summary>
        </member>
        <member name="P:Rage.Euphoria.EuphoriaMessageShot.BodyStiffness">
            <summary>
Stiffness of body. Feeds through to roll_up.
</summary>
        </member>
        <member name="M:Rage.ConsoleCommands.ArgumentParsers.ConsoleCommandArgumentParserVehicle.Parse(System.String)">
            <summary>
Parses the specified argument as a <see cref="T:Rage.Vehicle" />.
</summary>
            <param name="argument">The argument to parse.</param>
            <returns>If successful, returns the resulting <see cref="T:Rage.Vehicle" />; otherwise, returns <c>null</c>.</returns>
        </member>
        <member name="M:Rage.GameConsole.get_Variable_TimeScale">
*bool GameConsole::Variable_WarnOnPluginLoad::get()
</member>
        <member name="M:Rage.Building.#ctor(Rage.PoolHandle)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Building" /> class.
</summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="T:Rage.Building">
            <summary>
Represents a building in the game world.
</summary>
        </member>
        <member name="M:Rage.Attributes.ExcludeFromSDKAttribute.#ctor">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Attributes.ExcludeFromSDKAttribute" /> class.
</summary>
        </member>
        <member name="M:Rage.CleanupManager.Remove(Rage.IDeletable)">
            <summary>
Removes the specified <see cref="T:Rage.IDeletable" /> from this CleanupManager.
</summary>
            <param name="deletable">The deletable to remove.</param>
        </member>
        <member name="M:Rage.CleanupManager.Add(Rage.IDeletable)">
            <summary>
Adds the specified <see cref="T:Rage.IDeletable" /> to this CleanupManager.
</summary>
            <param name="deletable">The deletable to add.</param>
        </member>
        <member name="M:Rage.CleanupManager.Dispose">
            <summary>
Finalizes an instance of the <see cref="T:Rage.CleanupManager" /> class.
</summary>
        </member>
        <member name="M:Rage.CleanupManager.#ctor">
            <summary>
Initializes a new instance of the <see cref="T:Rage.CleanupManager" /> class.
</summary>
        </member>
        <member name="T:Rage.CleanupManager">
            <summary>
                <para>Class for cleaning up <see cref="T:Rage.IDeletable" />s.</para>
                <example>
The following example spawns a car, and deletes it 3 seconds after it's been destroyed.
The CleanupManager removes the <see cref="T:Rage.IDeletable" />s that's been added to it, when it gets disposed.
<code lang="C#">
using(CleanupManager cleanupManager = new CleanupManager())
{
    Vector3 spawnPosition = playerVehicle.GetOffsetPosition(new Vector3(-3f, 7f, 0f));
    Vehicle car = new Vehicle("POLICE2", spawnPosition, playerVehicle.Heading);
    cleanupManager.Add(car);
    while (!car.IsDead)
    {
        GameFiber.Yield();
    }

    GameFiber.Sleep(3000);
}
</code></example>
            </summary>
        </member>
        <member name="M:Rage.PedInventory.AddComponentToWeapon(Rage.WeaponAsset,System.String)">
            <summary>
                <para>Gives the specified weapon component to the specified weapon belonging to this <see cref="P:Rage.PedInventory.Ped" />.</para>
                <para>The <see cref="P:Rage.PedInventory.Ped" /> must own the specified weapon to receive the component.</para>
                <para>The weapon asset can be one of the following:</para>
                <list type="table">
                    <listheader>
                        <term>Name</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>WEAPON_UNARMED</term>
                        <description>WEAPON_UNARMED</description>
                    </item>
                    <item>
                        <term>WEAPON_ANIMAL</term>
                        <description>WEAPON_ANIMAL</description>
                    </item>
                    <item>
                        <term>WEAPON_COUGAR</term>
                        <description>WEAPON_COUGAR</description>
                    </item>
                    <item>
                        <term>WEAPON_KNIFE</term>
                        <description>WEAPON_KNIFE</description>
                    </item>
                    <item>
                        <term>WEAPON_NIGHTSTICK</term>
                        <description>WEAPON_NIGHTSTICK</description>
                    </item>
                    <item>
                        <term>WEAPON_HAMMER</term>
                        <description>WEAPON_HAMMER</description>
                    </item>
                    <item>
                        <term>WEAPON_BAT</term>
                        <description>WEAPON_BAT</description>
                    </item>
                    <item>
                        <term>WEAPON_GOLFCLUB</term>
                        <description>WEAPON_GOLFCLUB</description>
                    </item>
                    <item>
                        <term>WEAPON_CROWBAR</term>
                        <description>WEAPON_CROWBAR</description>
                    </item>
                    <item>
                        <term>WEAPON_PISTOL</term>
                        <description>WEAPON_PISTOL</description>
                    </item>
                    <item>
                        <term>WEAPON_COMBATPISTOL</term>
                        <description>WEAPON_COMBATPISTOL</description>
                    </item>
                    <item>
                        <term>WEAPON_APPISTOL</term>
                        <description>WEAPON_APPISTOL</description>
                    </item>
                    <item>
                        <term>WEAPON_PISTOL50</term>
                        <description>WEAPON_PISTOL50</description>
                    </item>
                    <item>
                        <term>WEAPON_MICROSMG</term>
                        <description>WEAPON_MICROSMG</description>
                    </item>
                    <item>
                        <term>WEAPON_SMG</term>
                        <description>WEAPON_SMG</description>
                    </item>
                    <item>
                        <term>WEAPON_ASSAULTSMG</term>
                        <description>WEAPON_ASSAULTSMG</description>
                    </item>
                    <item>
                        <term>WEAPON_ASSAULTRIFLE</term>
                        <description>WEAPON_ASSAULTRIFLE</description>
                    </item>
                    <item>
                        <term>WEAPON_CARBINERIFLE</term>
                        <description>WEAPON_CARBINERIFLE</description>
                    </item>
                    <item>
                        <term>WEAPON_ADVANCEDRIFLE</term>
                        <description>WEAPON_ADVANCEDRIFLE</description>
                    </item>
                    <item>
                        <term>WEAPON_MG</term>
                        <description>WEAPON_MG</description>
                    </item>
                    <item>
                        <term>WEAPON_COMBATMG</term>
                        <description>WEAPON_COMBATMG</description>
                    </item>
                    <item>
                        <term>WEAPON_PUMPSHOTGUN</term>
                        <description>WEAPON_PUMPSHOTGUN</description>
                    </item>
                    <item>
                        <term>WEAPON_SAWNOFFSHOTGUN</term>
                        <description>WEAPON_SAWNOFFSHOTGUN</description>
                    </item>
                    <item>
                        <term>WEAPON_ASSAULTSHOTGUN</term>
                        <description>WEAPON_ASSAULTSHOTGUN</description>
                    </item>
                    <item>
                        <term>WEAPON_BULLPUPSHOTGUN</term>
                        <description>WEAPON_BULLPUPSHOTGUN</description>
                    </item>
                    <item>
                        <term>WEAPON_STUNGUN</term>
                        <description>WEAPON_STUNGUN</description>
                    </item>
                    <item>
                        <term>WEAPON_SNIPERRIFLE</term>
                        <description>WEAPON_SNIPERRIFLE</description>
                    </item>
                    <item>
                        <term>WEAPON_HEAVYSNIPER</term>
                        <description>WEAPON_HEAVYSNIPER</description>
                    </item>
                    <item>
                        <term>WEAPON_REMOTESNIPER</term>
                        <description>WEAPON_REMOTESNIPER</description>
                    </item>
                    <item>
                        <term>WEAPON_GRENADELAUNCHER</term>
                        <description>WEAPON_GRENADELAUNCHER</description>
                    </item>
                    <item>
                        <term>WEAPON_GRENADELAUNCHER_SMOKE</term>
                        <description>WEAPON_GRENADELAUNCHER_SMOKE</description>
                    </item>
                    <item>
                        <term>WEAPON_RPG</term>
                        <description>WEAPON_RPG</description>
                    </item>
                    <item>
                        <term>WEAPON_PASSENGER_ROCKET</term>
                        <description>WEAPON_PASSENGER_ROCKET</description>
                    </item>
                    <item>
                        <term>WEAPON_AIRSTRIKE_ROCKET</term>
                        <description>WEAPON_AIRSTRIKE_ROCKET</description>
                    </item>
                    <item>
                        <term>WEAPON_STINGER</term>
                        <description>WEAPON_STINGER</description>
                    </item>
                    <item>
                        <term>WEAPON_MINIGUN</term>
                        <description>WEAPON_MINIGUN</description>
                    </item>
                    <item>
                        <term>WEAPON_GRENADE</term>
                        <description>WEAPON_GRENADE</description>
                    </item>
                    <item>
                        <term>WEAPON_STICKYBOMB</term>
                        <description>WEAPON_STICKYBOMB</description>
                    </item>
                    <item>
                        <term>WEAPON_SMOKEGRENADE</term>
                        <description>WEAPON_SMOKEGRENADE</description>
                    </item>
                    <item>
                        <term>WEAPON_BZGAS</term>
                        <description>WEAPON_BZGAS</description>
                    </item>
                    <item>
                        <term>WEAPON_MOLOTOV</term>
                        <description>WEAPON_MOLOTOV</description>
                    </item>
                    <item>
                        <term>WEAPON_FIREEXTINGUISHER</term>
                        <description>WEAPON_FIREEXTINGUISHER</description>
                    </item>
                    <item>
                        <term>WEAPON_PETROLCAN</term>
                        <description>WEAPON_PETROLCAN</description>
                    </item>
                    <item>
                        <term>WEAPON_DIGISCANNER</term>
                        <description>WEAPON_DIGISCANNER</description>
                    </item>
                    <item>
                        <term>WEAPON_BRIEFCASE</term>
                        <description>WEAPON_BRIEFCASE</description>
                    </item>
                    <item>
                        <term>WEAPON_BRIEFCASE_02</term>
                        <description>WEAPON_BRIEFCASE_02</description>
                    </item>
                    <item>
                        <term>WEAPON_BALL</term>
                        <description>WEAPON_BALL</description>
                    </item>
                    <item>
                        <term>WEAPON_FLARE</term>
                        <description>WEAPON_FLARE</description>
                    </item>
                    <item>
                        <term>WEAPON_VEHICLE_ROCKET</term>
                        <description>WEAPON_VEHICLE_ROCKET</description>
                    </item>
                    <item>
                        <term>WEAPON_BARBED_WIRE</term>
                        <description>WEAPON_BARBED_WIRE</description>
                    </item>
                    <item>
                        <term>WEAPON_DROWNING</term>
                        <description>WEAPON_DROWNING</description>
                    </item>
                    <item>
                        <term>WEAPON_DROWNING_IN_VEHICLE</term>
                        <description>WEAPON_DROWNING_IN_VEHICLE</description>
                    </item>
                    <item>
                        <term>WEAPON_BLEEDING</term>
                        <description>WEAPON_BLEEDING</description>
                    </item>
                    <item>
                        <term>WEAPON_ELECTRIC_FENCE</term>
                        <description>WEAPON_ELECTRIC_FENCE</description>
                    </item>
                    <item>
                        <term>WEAPON_EXPLOSION</term>
                        <description>WEAPON_EXPLOSION</description>
                    </item>
                    <item>
                        <term>WEAPON_FALL</term>
                        <description>WEAPON_FALL</description>
                    </item>
                    <item>
                        <term>WEAPON_EXHAUSTION</term>
                        <description>WEAPON_EXHAUSTION</description>
                    </item>
                    <item>
                        <term>WEAPON_HIT_BY_WATER_CANNON</term>
                        <description>WEAPON_HIT_BY_WATER_CANNON</description>
                    </item>
                    <item>
                        <term>WEAPON_RAMMED_BY_CAR</term>
                        <description>WEAPON_RAMMED_BY_CAR</description>
                    </item>
                    <item>
                        <term>WEAPON_RUN_OVER_BY_CAR</term>
                        <description>WEAPON_RUN_OVER_BY_CAR</description>
                    </item>
                    <item>
                        <term>WEAPON_HELI_CRASH</term>
                        <description>WEAPON_HELI_CRASH</description>
                    </item>
                    <item>
                        <term>WEAPON_FIRE</term>
                        <description>WEAPON_FIRE</description>
                    </item>
                    <item>
                        <term>WEAPON_ANIMAL_RETRIEVER</term>
                        <description>WEAPON_ANIMAL_RETRIEVER</description>
                    </item>
                    <item>
                        <term>WEAPON_SMALL_DOG</term>
                        <description>WEAPON_SMALL_DOG</description>
                    </item>
                    <item>
                        <term>WEAPON_TIGER_SHARK</term>
                        <description>WEAPON_TIGER_SHARK</description>
                    </item>
                    <item>
                        <term>WEAPON_HAMMERHEAD_SHARK</term>
                        <description>WEAPON_HAMMERHEAD_SHARK</description>
                    </item>
                    <item>
                        <term>WEAPON_KILLER_WHALE</term>
                        <description>WEAPON_KILLER_WHALE</description>
                    </item>
                    <item>
                        <term>WEAPON_BOAR</term>
                        <description>WEAPON_BOAR</description>
                    </item>
                    <item>
                        <term>WEAPON_PIG</term>
                        <description>WEAPON_PIG</description>
                    </item>
                    <item>
                        <term>WEAPON_COYOTE</term>
                        <description>WEAPON_COYOTE</description>
                    </item>
                    <item>
                        <term>WEAPON_DEER</term>
                        <description>WEAPON_DEER</description>
                    </item>
                    <item>
                        <term>WEAPON_HEN</term>
                        <description>WEAPON_HEN</description>
                    </item>
                    <item>
                        <term>WEAPON_RABBIT</term>
                        <description>WEAPON_RABBIT</description>
                    </item>
                    <item>
                        <term>WEAPON_CAT</term>
                        <description>WEAPON_CAT</description>
                    </item>
                    <item>
                        <term>WEAPON_COW</term>
                        <description>WEAPON_COW</description>
                    </item>
                    <item>
                        <term>WEAPON_BIRD_CRAP</term>
                        <description>WEAPON_BIRD_CRAP</description>
                    </item>
                </list>
                <para />
                <para>The component name can be one of the following:</para>
                <list type="table">
                    <listheader>
                        <term>Name</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>COMPONENT_AT_RAILCOVER_01</term>
                        <description>COMPONENT_AT_RAILCOVER_01</description>
                    </item>
                    <item>
                        <term>COMPONENT_AT_AR_AFGRIP</term>
                        <description>COMPONENT_AT_AR_AFGRIP</description>
                    </item>
                    <item>
                        <term>COMPONENT_AT_PI_FLSH</term>
                        <description>COMPONENT_AT_PI_FLSH</description>
                    </item>
                    <item>
                        <term>COMPONENT_AT_AR_FLSH</term>
                        <description>COMPONENT_AT_AR_FLSH</description>
                    </item>
                    <item>
                        <term>COMPONENT_AT_SCOPE_MACRO</term>
                        <description>COMPONENT_AT_SCOPE_MACRO</description>
                    </item>
                    <item>
                        <term>COMPONENT_AT_SCOPE_SMALL</term>
                        <description>COMPONENT_AT_SCOPE_SMALL</description>
                    </item>
                    <item>
                        <term>COMPONENT_AT_SCOPE_MEDIUM</term>
                        <description>COMPONENT_AT_SCOPE_MEDIUM</description>
                    </item>
                    <item>
                        <term>COMPONENT_AT_SCOPE_LARGE</term>
                        <description>COMPONENT_AT_SCOPE_LARGE</description>
                    </item>
                    <item>
                        <term>COMPONENT_AT_SCOPE_MAX</term>
                        <description>COMPONENT_AT_SCOPE_MAX</description>
                    </item>
                    <item>
                        <term>COMPONENT_AT_PI_SUPP</term>
                        <description>COMPONENT_AT_PI_SUPP</description>
                    </item>
                    <item>
                        <term>COMPONENT_AT_AR_SUPP</term>
                        <description>COMPONENT_AT_AR_SUPP</description>
                    </item>
                    <item>
                        <term>COMPONENT_AT_AR_SUPP_02</term>
                        <description>COMPONENT_AT_AR_SUPP_02</description>
                    </item>
                    <item>
                        <term>COMPONENT_AT_SR_SUPP</term>
                        <description>COMPONENT_AT_SR_SUPP</description>
                    </item>
                    <item>
                        <term>COMPONENT_PISTOL_CLIP_01</term>
                        <description>COMPONENT_PISTOL_CLIP_01</description>
                    </item>
                    <item>
                        <term>COMPONENT_PISTOL_CLIP_02</term>
                        <description>COMPONENT_PISTOL_CLIP_02</description>
                    </item>
                    <item>
                        <term>COMPONENT_COMBATPISTOL_CLIP_01</term>
                        <description>COMPONENT_COMBATPISTOL_CLIP_01</description>
                    </item>
                    <item>
                        <term>COMPONENT_COMBATPISTOL_CLIP_02</term>
                        <description>COMPONENT_COMBATPISTOL_CLIP_02</description>
                    </item>
                    <item>
                        <term>COMPONENT_APPISTOL_CLIP_01</term>
                        <description>COMPONENT_APPISTOL_CLIP_01</description>
                    </item>
                    <item>
                        <term>COMPONENT_APPISTOL_CLIP_02</term>
                        <description>COMPONENT_APPISTOL_CLIP_02</description>
                    </item>
                    <item>
                        <term>COMPONENT_MICROSMG_CLIP_01</term>
                        <description>COMPONENT_MICROSMG_CLIP_01</description>
                    </item>
                    <item>
                        <term>COMPONENT_MICROSMG_CLIP_02</term>
                        <description>COMPONENT_MICROSMG_CLIP_02</description>
                    </item>
                    <item>
                        <term>COMPONENT_SMG_CLIP_01</term>
                        <description>COMPONENT_SMG_CLIP_01</description>
                    </item>
                    <item>
                        <term>COMPONENT_SMG_CLIP_02</term>
                        <description>COMPONENT_SMG_CLIP_02</description>
                    </item>
                    <item>
                        <term>COMPONENT_ASSAULTRIFLE_CLIP_01</term>
                        <description>COMPONENT_ASSAULTRIFLE_CLIP_01</description>
                    </item>
                    <item>
                        <term>COMPONENT_ASSAULTRIFLE_CLIP_02</term>
                        <description>COMPONENT_ASSAULTRIFLE_CLIP_02</description>
                    </item>
                    <item>
                        <term>COMPONENT_CARBINERIFLE_CLIP_01</term>
                        <description>COMPONENT_CARBINERIFLE_CLIP_01</description>
                    </item>
                    <item>
                        <term>COMPONENT_CARBINERIFLE_CLIP_02</term>
                        <description>COMPONENT_CARBINERIFLE_CLIP_02</description>
                    </item>
                    <item>
                        <term>COMPONENT_ADVANCEDRIFLE_CLIP_01</term>
                        <description>COMPONENT_ADVANCEDRIFLE_CLIP_01</description>
                    </item>
                    <item>
                        <term>COMPONENT_ADVANCEDRIFLE_CLIP_02</term>
                        <description>COMPONENT_ADVANCEDRIFLE_CLIP_02</description>
                    </item>
                    <item>
                        <term>COMPONENT_MG_CLIP_01</term>
                        <description>COMPONENT_MG_CLIP_01</description>
                    </item>
                    <item>
                        <term>COMPONENT_MG_CLIP_02</term>
                        <description>COMPONENT_MG_CLIP_02</description>
                    </item>
                    <item>
                        <term>COMPONENT_COMBATMG_CLIP_01</term>
                        <description>COMPONENT_COMBATMG_CLIP_01</description>
                    </item>
                    <item>
                        <term>COMPONENT_COMBATMG_CLIP_02</term>
                        <description>COMPONENT_COMBATMG_CLIP_02</description>
                    </item>
                    <item>
                        <term>COMPONENT_PUMPSHOTGUN_CLIP_01</term>
                        <description>COMPONENT_PUMPSHOTGUN_CLIP_01</description>
                    </item>
                    <item>
                        <term>COMPONENT_SAWNOFFSHOTGUN_CLIP_01</term>
                        <description>COMPONENT_SAWNOFFSHOTGUN_CLIP_01</description>
                    </item>
                    <item>
                        <term>COMPONENT_ASSAULTSHOTGUN_CLIP_01</term>
                        <description>COMPONENT_ASSAULTSHOTGUN_CLIP_01</description>
                    </item>
                    <item>
                        <term>COMPONENT_ASSAULTSHOTGUN_CLIP_02</term>
                        <description>COMPONENT_ASSAULTSHOTGUN_CLIP_02</description>
                    </item>
                    <item>
                        <term>COMPONENT_SNIPERRIFLE_CLIP_01</term>
                        <description>COMPONENT_SNIPERRIFLE_CLIP_01</description>
                    </item>
                    <item>
                        <term>COMPONENT_HEAVYSNIPER_CLIP_01</term>
                        <description>COMPONENT_HEAVYSNIPER_CLIP_01</description>
                    </item>
                    <item>
                        <term>COMPONENT_MINIGUN_CLIP_01</term>
                        <description>COMPONENT_MINIGUN_CLIP_01</description>
                    </item>
                    <item>
                        <term>COMPONENT_RPG_CLIP_01</term>
                        <description>COMPONENT_RPG_CLIP_01</description>
                    </item>
                    <item>
                        <term>COMPONENT_GRENADELAUNCHER_CLIP_01</term>
                        <description>COMPONENT_GRENADELAUNCHER_CLIP_01</description>
                    </item>
                    <item>
                        <term>COMPONENT_PISTOL50_CLIP_01</term>
                        <description>COMPONENT_PISTOL50_CLIP_01</description>
                    </item>
                    <item>
                        <term>COMPONENT_PISTOL50_CLIP_02</term>
                        <description>COMPONENT_PISTOL50_CLIP_02</description>
                    </item>
                    <item>
                        <term>COMPONENT_ASSAULTSMG_CLIP_01</term>
                        <description>COMPONENT_ASSAULTSMG_CLIP_01</description>
                    </item>
                    <item>
                        <term>COMPONENT_ASSAULTSMG_CLIP_02</term>
                        <description>COMPONENT_ASSAULTSMG_CLIP_02</description>
                    </item>
                    <item>
                        <term>COMPONENT_BULLPUPSHOTGUN_CLIP_01</term>
                        <description>COMPONENT_BULLPUPSHOTGUN_CLIP_01</description>
                    </item>
                </list>
            </summary>
            <param name="weaponAsset">The weapon to add the component to.</param>
            <param name="componentName">The name of the component.</param>
        </member>
        <member name="M:Rage.PedInventory.GiveFlashlight">
            <summary>
Ensures the owning <see cref="P:Rage.PedInventory.Ped" /> has a flashlight.
</summary>
        </member>
        <member name="M:Rage.PedInventory.GiveParachute">
            <summary>
Ensures the owning <see cref="P:Rage.PedInventory.Ped" /> has a parachute.
</summary>
        </member>
        <member name="P:Rage.PedInventory.HasLoadedWeapon">
            <summary>
Gets a value indicating whether this inventory contains a loaded weapon.
</summary>
            <value>
                <c>true</c> if this inventory contains a loaded weapon; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.PedInventory.HasFlashlight">
            <summary>
Gets a value indicating whether this inventory has a flashlight.
</summary>
            <value>
                <c>true</c> if this inventory contains a flashlight.</value>
        </member>
        <member name="P:Rage.PedInventory.HasParachute">
            <summary>
Gets a value indicating whether this inventory has a parachute.
</summary>
            <value>
                <c>true</c> if this inventory contains a parachute.</value>
        </member>
        <member name="P:Rage.PedInventory.EquippedWeaponObject">
            <summary>
                <para>Gets the object representing this weapon in the world.</para>
                <para>Only weapons in the game world, and equipped by <see cref="P:Rage.PedInventory.Ped" />s have an object. Holstered weapons do not.</para>
            </summary>
            <value>An instance of <see cref="T:Rage.Weapon" /> representing this weapon in the world.</value>
        </member>
        <member name="P:Rage.PedInventory.EquippedWeapon">
            <summary>
                <para>Gets the weapon currently equipped by the owning <see cref="P:Rage.PedInventory.Ped" />.</para>
            </summary>
            <value>An instance of <see cref="T:Rage.WeaponDescriptor" /> representing the weapon currently equipped by the owning <see cref="P:Rage.PedInventory.Ped" />.</value>
        </member>
        <member name="P:Rage.PedInventory.Weapons">
            <summary>
                <para>Gets a collection of all the weapons currently in this inventory.</para>
            </summary>
            <value>An instance of <see cref="T:Rage.WeaponDescriptorCollection" /> representing the weapons currently in this inventory.</value>
        </member>
        <member name="P:Rage.PedInventory.Ped">
            <summary>
Gets the owning <see cref="P:Rage.PedInventory.Ped" /> of this inventory.
</summary>
            <value>The owning <see cref="P:Rage.PedInventory.Ped" /> of this inventory.</value>
        </member>
        <member name="M:Rage.Group.IsValid">
            <inheritdoc />
        </member>
        <member name="M:Rage.Group.op_Inequality(Rage.Group,Rage.Group)">
            <summary>
Determines whether the the first <see cref="T:Rage.Group" /> instance represents a different Group than the second <see cref="T:Rage.Group" /> instance.
</summary>
            <param name="left">The first <see cref="T:Rage.Group" /> instance.</param>
            <param name="right">The first <see cref="T:Rage.Group" /> instance.</param>
            <returns>
                <c>true</c> if the first instance does not represent the same Group as the second instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Group.op_Equality(Rage.Group,Rage.Group)">
            <summary>
Determines whether the the first <see cref="T:Rage.Group" /> instance represents the same Group as the second <see cref="T:Rage.Group" /> instance.
</summary>
            <param name="left">The first <see cref="T:Rage.Group" /> instance.</param>
            <param name="right">The first <see cref="T:Rage.Group" /> instance.</param>
            <returns>
                <c>true</c> if the first instance represents the same Group as the second instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Group.Equals(Rage.IHandleable)">
            <summary>
Indicates whether this instance equals the specified <see cref="T:Rage.IHandleable" /> instance.
</summary>
            <param name="obj">The <see cref="T:Rage.IHandleable" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if this instance is equal to the specified <see cref="T:Rage.IHandleable" /> instance.</returns>
        </member>
        <member name="M:Rage.Group.Equals(Rage.Group)">
            <summary>
Indicates whether this instance equals the specified <see cref="T:Rage.Group" /> instance.
</summary>
            <param name="obj">The <see cref="T:Rage.Group" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if this instance is equal to the specified <see cref="T:Rage.Group" /> instance.</returns>
        </member>
        <member name="M:Rage.Group.Delete">
            <summary>
Deletes this group.
</summary>
        </member>
        <member name="M:Rage.Group.SetPedMemberVehicleSeatIndex(Rage.Ped,System.Int32)">
            <summary>
Sets the index of the vehicle seat the specified member will use when the group enters a vehicle.
</summary>
            <param name="member">The member.</param>
            <param name="index">The seat index.</param>
        </member>
        <member name="M:Rage.Group.RemoveMember(Rage.Ped)">
            <summary>
Removes the specified <see cref="T:Rage.Ped" /> from this group. The <see cref="T:Rage.Ped" /> must be a member of this group.
</summary>
            <param name="ped">The <see cref="T:Rage.Ped" /> to remove from this group.</param>
        </member>
        <member name="M:Rage.Group.AddMember(Rage.Ped)">
            <summary>
                <para>Adds the specified <see cref="T:Rage.Ped" /> to this group.</para>
                <para>If this is the group's first member, it will become the leader. A group cannot be leaderless.</para>
            </summary>
            <param name="ped">The <see cref="T:Rage.Ped" />.</param>
        </member>
        <member name="M:Rage.Group.IsMember(Rage.Ped)">
            <summary>
Determines whether the specified <see cref="T:Rage.Ped" /> is a member of this group.
</summary>
            <param name="ped">The <see cref="T:Rage.Ped" /> to check whether is a member of this group.</param>
            <returns>Returns <c>true</c> if the specified <see cref="T:Rage.Ped" /> is a member of this group; otherwise, returns <c>false</c>.</returns>
        </member>
        <member name="P:Rage.Group.DissolveDistance">
            <summary>
Sets the distance at which members will automatically be removed from the group.
</summary>
            <value>The distance at which members will automatically be removed from the group.</value>
        </member>
        <member name="P:Rage.Group.Count">
            <summary>
Gets the number of members in this group.
</summary>
            <value>The number of members in this group.</value>
        </member>
        <member name="P:Rage.Group.Members">
            <summary>
Gets the members of this group.
</summary>
            <value>The members of this group.</value>
        </member>
        <member name="P:Rage.Group.Leader">
            <summary>
Gets or sets the leader of this group. When setting, if the specified <see cref="T:Rage.Ped" /> is not a member of this group, it will become a member.
</summary>
            <value>The leader of this group.</value>
        </member>
        <member name="M:Rage.Group.#ctor(Rage.Ped)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Group" /> class.
</summary>
            <param name="leader">The leader of the group.</param>
        </member>
        <member name="T:Rage.Group">
            <summary>
                <para>Represents a group of <see cref="T:Rage.Ped" />.</para>
                <para />
                <para>There can be up to 16 groups at any given time.</para>
                <para>Empty groups are automatically deleted.</para>
            </summary>
        </member>
        <member name="M:Rage.Blip.IsValid">
            <inheritdoc />
        </member>
        <member name="M:Rage.Blip.op_Inequality(Rage.Blip,Rage.Blip)">
            <summary>
Determines whether the the first <see cref="T:Rage.Blip" /> instance represents a different blip than the second <see cref="T:Rage.Blip" /> instance.
</summary>
            <param name="left">The first <see cref="T:Rage.Blip" /> instance.</param>
            <param name="right">The first <see cref="T:Rage.Blip" /> instance.</param>
            <returns>
                <c>true</c> if the first instance does not represent the same blip as the second instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Blip.op_Equality(Rage.Blip,Rage.Blip)">
            <summary>
Determines whether the the first <see cref="T:Rage.Blip" /> instance represents the same blip as the second <see cref="T:Rage.Blip" /> instance.
</summary>
            <param name="left">The first <see cref="T:Rage.Blip" /> instance.</param>
            <param name="right">The first <see cref="T:Rage.Blip" /> instance.</param>
            <returns>
                <c>true</c> if the first instance represents the same blip as the second instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Blip.Equals(Rage.IHandleable)">
            <summary>
Indicates whether this instance equals the specified <see cref="T:Rage.IHandleable" /> instance.
</summary>
            <param name="obj">The <see cref="T:Rage.IHandleable" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if this instance is equal to the specified <see cref="T:Rage.IHandleable" /> instance.</returns>
        </member>
        <member name="M:Rage.Blip.Equals(Rage.Blip)">
            <summary>
Indicates whether this instance equals the specified <see cref="T:Rage.Blip" /> instance.
</summary>
            <param name="obj">The <see cref="T:Rage.Blip" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if this instance is equal to the specified <see cref="T:Rage.Blip" /> instance.</returns>
        </member>
        <member name="M:Rage.Blip.Delete">
            <summary>
Deletes this blip.
</summary>
        </member>
        <member name="M:Rage.Blip.RemoveNumberLabel">
            <summary>
Removes the number label from this blip.
</summary>
        </member>
        <member name="M:Rage.Blip.DisableRoute">
            <summary>
Disables the current route to this <see cref="T:Rage.Blip" />.
</summary>
        </member>
        <member name="M:Rage.Blip.EnableRoute(System.Drawing.Color)">
            <summary>
Enables a route to this <see cref="T:Rage.Blip" /> with the specified color.
</summary>
            <param name="color">The color of the route.</param>
        </member>
        <member name="M:Rage.Blip.StopFlashing">
            <summary>
Stops the flashing of this <see cref="T:Rage.Blip" />.
</summary>
        </member>
        <member name="M:Rage.Blip.Flash(System.Int32,System.Int32)">
            <summary>
Makes <see cref="T:Rage.Blip" /> blip flash at the specified interval for the specified duration.
</summary>
            <param name="interval">The interval to flash at. Must be greater than zero.</param>
            <param name="duration">The duration to flash for. If zero or less, the <see cref="T:Rage.Blip" /> will flash forever.</param>
        </member>
        <member name="P:Rage.Blip.NumberLabel">
            <summary>
Sets the number to be shown on this blip.
</summary>
            <value>The number to be shown on this blip.</value>
        </member>
        <member name="P:Rage.Blip.Alpha">
            <summary>
Gets or sets the alpha of this <see cref="T:Rage.Blip" />.
</summary>
            <value>The alpha of this <see cref="T:Rage.Blip" />. 1f is no transparency, 0f is full transparency.</value>
        </member>
        <member name="P:Rage.Blip.Scale">
            <summary>
Sets the scale of this <see cref="T:Rage.Blip" />.
</summary>
            <value>The scale of this <see cref="T:Rage.Blip" />.</value>
        </member>
        <member name="P:Rage.Blip.Order">
            <summary>
Sets the order of this <see cref="T:Rage.Blip" />. <see cref="T:Rage.Blip" /> with a higher order will be drawn on top of <see cref="T:Rage.Blip" />s with a lower order.
</summary>
            <value>The order of this <see cref="T:Rage.Blip" />.</value>
        </member>
        <member name="P:Rage.Blip.Angle">
            <summary>
Sets the angle of this <see cref="T:Rage.Blip" />, in degrees.
</summary>
            <value>The angle of this <see cref="T:Rage.Blip" />, in degrees.</value>
        </member>
        <member name="P:Rage.Blip.Position">
            <inheritdoc />
        </member>
        <member name="P:Rage.Blip.IsRouteEnabled">
            <summary>
Sets a value indicating whether a route to this <see cref="T:Rage.Blip" /> is currently active.
</summary>
            <value>
                <c>true</c> if a route is currently active to this <see cref="T:Rage.Blip" />; otherwise; <c>false</c>.</value>
        </member>
        <member name="P:Rage.Blip.RouteColor">
            <summary>
Gets or sets the color of the route to this <see cref="T:Rage.Blip" />.
</summary>
            <value>The color of the route to this <see cref="T:Rage.Blip" />.</value>
        </member>
        <member name="P:Rage.Blip.Color">
            <summary>
Gets or sets the color of this <see cref="T:Rage.Blip" />.
</summary>
            <value>The color of this <see cref="T:Rage.Blip" />.</value>
        </member>
        <member name="P:Rage.Blip.Sprite">
            <summary>
Gets or sets the sprite of this <see cref="T:Rage.Blip" />.
</summary>
            <value>The sprite.</value>
        </member>
        <member name="P:Rage.Blip.Name">
            <summary>
Gets the name of this <see cref="T:Rage.Blip" />. The name is what appears in the legends list on the map.
</summary>
            <value>The name of this <see cref="T:Rage.Blip" />.</value>
        </member>
        <member name="P:Rage.Blip.MemoryAddress">
            <inheritdoc />
        </member>
        <member name="P:Rage.Blip.Handle">
            <inheritdoc />
        </member>
        <member name="M:Rage.Blip.#ctor(Rage.PoolHandle)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Blip" /> class.
</summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:Rage.Blip.#ctor(Rage.Vector3,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Blip" /> class.
</summary>
            <param name="position">The position to create this <see cref="T:Rage.Blip" /> at.</param>
            <param name="radius">The radius the <see cref="T:Rage.Blip" /> covers.</param>
        </member>
        <member name="M:Rage.Blip.#ctor(Rage.Vector3)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Blip" /> class.
</summary>
            <param name="position">The position to create this <see cref="T:Rage.Blip" /> at.</param>
        </member>
        <member name="M:Rage.Blip.#ctor(Rage.Entity)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Blip" /> class.
</summary>
            <param name="entity">The <see cref="T:Rage.Entity" /> to attach the <see cref="T:Rage.Blip" /> to.</param>
        </member>
        <member name="T:Rage.Blip">
            <summary>
                <para>Represents a <see cref="T:Rage.Blip" /> in the game world.</para>
                <para>Blips are used to mark entities of interest in either the game world, on the radar or both.</para>
            </summary>
        </member>
        <member name="M:Rage.RelationshipGroup.op_Inequality(Rage.RelationshipGroup,Rage.RelationshipGroup)">
            <summary>
Determines whether the the first <see cref="T:Rage.RelationshipGroup" /> instance represents a different blip than the second <see cref="T:Rage.RelationshipGroup" /> instance.
</summary>
            <param name="left">The first <see cref="T:Rage.RelationshipGroup" /> instance.</param>
            <param name="right">The first <see cref="T:Rage.RelationshipGroup" /> instance.</param>
            <returns>
                <c>true</c> if the first instance does not represent the same blip as the second instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.RelationshipGroup.op_Equality(Rage.RelationshipGroup,Rage.RelationshipGroup)">
            <summary>
Determines whether the the first <see cref="T:Rage.RelationshipGroup" /> instance represents the same blip as the second <see cref="T:Rage.RelationshipGroup" /> instance.
</summary>
            <param name="left">The first <see cref="T:Rage.RelationshipGroup" /> instance.</param>
            <param name="right">The first <see cref="T:Rage.RelationshipGroup" /> instance.</param>
            <returns>
                <c>true</c> if the first instance represents the same blip as the second instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.RelationshipGroup.Equals(Rage.RelationshipGroup)">
            <summary>
Indicates whether this instance equals the specified <see cref="T:Rage.RelationshipGroup" /> instance.
</summary>
            <param name="obj">The <see cref="T:Rage.RelationshipGroup" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if this instance is equal to the specified <see cref="T:Rage.RelationshipGroup" /> instance.</returns>
        </member>
        <member name="P:Rage.Attributes.ConsoleCommandArgumentParserAttribute.SupportedTypes">
            <summary>
Gets or sets the supported types of this parser.
</summary>
        </member>
        <member name="M:Rage.Attributes.ConsoleCommandArgumentParserAttribute.#ctor(System.Type[])">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Attributes.ConsoleCommandArgumentParserAttribute" /> class.
</summary>
            <param name="supportedTypes">The supported types.</param>
        </member>
        <member name="T:Rage.Attributes.ConsoleCommandArgumentParserAttribute">
            <summary>
Attribute to let argument parsers specify which types they support.
</summary>
        </member>
        <member name="T:Lock">
 The following macros are to allow a C# style lock block.

 LOCK_START(objectToLock)
 {
     // Code goes here.
 } LOCK_END;

<summary><para>Helper class for entering/leaving critical sections.</para><para>Don't make it a reference (Lock^) as that'll make the finalization non-deterministic.</para></summary></member>
        <member name="M:Rage.Camera.Shake(System.String,System.Single)">
            <summary>
Shakes this instance with the specified shake type, for the specified duration.
</summary>
            <param name="shakeType">
The type of shake to use.
LIST TYPES FOR GTA V!
</param>
            <param name="duration">The duration to shake this camera, in seconds.</param>
        </member>
        <member name="M:Rage.Camera.Shake(System.Single)">
            <summary>
Shakes this instance for the specified duration.
</summary>
            <param name="duration">The duration to shake this camera, in seconds.</param>
        </member>
        <member name="M:Rage.Camera.PointAtEntity(Rage.Entity,Rage.Vector3,System.Boolean)">
            <summary>
Points this instance at the specified <see cref="T:Rage.Entity" /> at the specified offset.
</summary>
            <param name="entity">The <see cref="T:Rage.Entity" /> to point to.</param>
            <param name="offset">The offset at which to point.</param>
            <param name="relativeOffset">A value indicating whether the offset is relative to the <see cref="T:Rage.Entity" />.</param>
        </member>
        <member name="M:Rage.Camera.AttachToEntity(Rage.Entity,Rage.Vector3,System.Boolean)">
            <summary>
Gets or sets the state of this instance.
</summary>
            <summary>
Attaches this instance to the specified <see cref="T:Rage.Entity" /> at the specified offset.
</summary>
            <param name="entity">The <see cref="T:Rage.Entity" /> to attach to.</param>
            <param name="offset">The offset at which to attach.</param>
            <param name="relativeOffset">A value indicating whether the offset is relative to the <see cref="T:Rage.Entity" />.</param>
        </member>
        <member name="P:Rage.Camera.IsRendering">
            <summary>
Gets a value indicating whether this instance is the gameplay camera.
</summary>
            <summary>
Gets or sets a value indicating whether this instance is currently being rendered.
</summary>
        </member>
        <member name="P:Rage.Camera.Active">
            <summary>
Gets or sets a value indicating whether this instance is currently active.
</summary>
        </member>
        <member name="M:Rage.Camera.Delete">
            <inheritdoc />
        </member>
        <member name="M:Rage.Camera.IsValid">
            <inheritdoc />
        </member>
        <member name="M:Rage.Camera.Dismiss">
            <inheritdoc />
        </member>
        <member name="P:Rage.Camera.IsPersistent">
            <inheritdoc />
        </member>
        <member name="P:Rage.Camera.Rotation">
            <inheritdoc />
        </member>
        <member name="P:Rage.Camera.Quaternion">
            <inheritdoc />
        </member>
        <member name="P:Rage.Camera.Position">
            <inheritdoc />
        </member>
        <member name="P:Rage.Camera.MemoryAddress">
            <inheritdoc />
        </member>
        <member name="P:Rage.Camera.RenderingCamera">
            <summary>
Gets the camera currently being rendered.
</summary>
        </member>
        <member name="M:RageGameGTAV.OnWindowProc(HWND__*,System.UInt32,System.UInt64,System.Int64)">
 If HookWindowProc() succeeds, this function is called every time the game
 receives window messages.

</member>
        <member name="M:RageGameGTAV.OnDeleteVehicle(System.UInt32)">
 If HookDeleteVehicleAndClearPedTasksImmediately() succeeds, this function is called every time DELETE_VEHICLE is called.
 Return true to permit the deletion; false to block the call.

</member>
        <member name="M:RageGameGTAV.OnClearPedTasksImmediately(System.UInt32)">
 If HookDeleteVehicleAndClearPedTasksImmediately() succeeds, this function is called every time CLEAR_PED_TASKS_IMMEDIATELY is called.
 Return true to permit the deletion; false to block the call.

</member>
        <member name="M:RageGameGTAV.OnGetLocalizedString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
	 * If HookGetLocalizedString() succeeds, this function is called every time the game
	 * requests a localized string. If this function returns NULL, the original function is executed.
	*
</member>
        <member name="P:Rage.AnimationTask.PlayRate">
            <summary>
Sets the speed multiplier of the animation being played by this task.
</summary>
            <value>The speed multiplier of the animation being played by this task.</value>
        </member>
        <member name="P:Rage.AnimationTask.RemainingTimeRatio">
            <summary>
Gets or sets the remaining time ratio of the animation being played by this task.
</summary>
            <value>A <see cref="T:System.Single" /> representing the remaining time ratio between 1.0f and 0.0f.</value>
        </member>
        <member name="P:Rage.AnimationTask.CurrentTimeRatio">
            <summary>
Gets or sets the current time ratio of the animation being played by this task.
</summary>
            <value>A <see cref="T:System.Single" /> representing the current time ratio between 0.0f and 1.0f.</value>
        </member>
        <member name="P:Rage.AnimationTask.CurrentTime">
            <summary>
Gets or sets the current time of the animation being played by this task, in seconds.
</summary>
            <value>The current time of the animation being played by this task, in seconds.</value>
        </member>
        <member name="P:Rage.AnimationTask.IsPlaying">
            <summary>
                <para>Gets a value indicating whether the animation represented by this task is currently playing.</para>
            </summary>
            <remarks>Animations do not play on the tick they were started, so if calling this to check whether an animation has ended, make sure to yield for one tick after calling <see cref="T:Rage.TaskInvoker" />.PlayAnimation().</remarks>
            <value>
                <c>true</c> if the animation is currently playing; otherwise <c>false</c>.</value>
        </member>
        <member name="P:Rage.AnimationTask.Length">
            <summary>
Gets the length of the animation represented by this task, in seconds.
</summary>
            <value>The length of the animation represented by this task, in seconds.</value>
        </member>
        <member name="T:Rage.AnimationTask">
            <summary>
Represents an animation task. This class cannot be inherited.
</summary>
        </member>
        <member name="M:Rage.AnimationDictionary.Dismiss">
            <inheritdoc />
        </member>
        <member name="M:Rage.AnimationDictionary.LoadAndWait">
            <inheritdoc />
        </member>
        <member name="M:Rage.AnimationDictionary.Load">
            <inheritdoc />
        </member>
        <member name="P:Rage.AnimationDictionary.IsLoaded">
            <inheritdoc />
        </member>
        <member name="P:Rage.AnimationDictionary.Name">
            <inheritdoc />
        </member>
        <member name="M:Rage.Task.WaitForStatus(Rage.TaskStatus,System.Int32)">
            <summary>
Sleeps the active GameFiber until the task reaches the specified status.
</summary>
            <param name="status">The status to wait for.</param>
            <param name="timeout">The time, in milliseconds, to allow the task to reach the specified status. If -1, the method will never time out.</param>
            <returns>If the task reached the status before timing out, returns <c>true</c>; otherwise, returns <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Task.WaitForStatus(Rage.TaskStatus)">
            <summary>
Sleeps the active GameFiber until the task reaches the specified status.
</summary>
            <param name="status">The status to wait for.</param>
        </member>
        <member name="M:Rage.Task.WaitForCompletion(System.Int32)">
            <summary>
Sleeps the active GameFiber until the task completes.
</summary>
            <param name="timeout">The time, in milliseconds, to allow the task to complete. If -1, the method will never time out.</param>
        </member>
        <member name="M:Rage.Task.WaitForCompletion">
            <summary>
Sleeps the active GameFiber until the task completes.
</summary>
        </member>
        <member name="M:Rage.Task.GetTask(Rage.Ped,System.String)">
            <summary>
Gets an instance of <see cref="T:Rage.Task" /> to check the status of a task invoked by the specified native.
</summary>
            <paramref cref="F:Rage.Task.ped">The <see cref="P:Rage.Task.Ped" /> the task has been invoked on.</paramref>
            <paramref cref="!:nativeName">The name of the native that invoked the task, eg. "TASK_JUMP".</paramref>
        </member>
        <member name="P:Rage.Task.Status">
            <summary>
Gets the current status of this task.
</summary>
            <value>The current status of this task.</value>
        </member>
        <member name="P:Rage.Task.IsActive">
            <summary>
                <para>Gets a value indicating whether this task is active.</para>
                <para>A task is considered active if its status is not <see cref="F:Rage.TaskStatus.None" />.</para>
            </summary>
            <value>Whether this task is active.</value>
        </member>
        <member name="P:Rage.Task.Name">
            <summary>
Gets the name of the method that was used to invoke this task. Eg. "RappelFromHelicopter".
</summary>
            <value>The name of the method that was used to invoke this task..</value>
        </member>
        <member name="P:Rage.Task.Ped">
            <summary>
Gets the <see cref="P:Rage.Task.Ped" /> this task is assigned to.
</summary>
            <value>The <see cref="P:Rage.Task.Ped" /> this task is assigned to.</value>
        </member>
        <member name="T:Rage.Task">
            <summary>
Represents a task. This class cannot be inherited.
</summary>
        </member>
        <member name="F:WindowsEdition.WebServerCore">
            <summary>
Web Server (core installation)
</summary>
        </member>
        <member name="F:WindowsEdition.WebServer">
            <summary>
Web Server (full installation)
</summary>
        </member>
        <member name="F:WindowsEdition.UltimateN">
            <summary>
Ultimate N
</summary>
        </member>
        <member name="F:WindowsEdition.UltimateE">
            <summary>
Not supported
</summary>
        </member>
        <member name="F:WindowsEdition.Ultimate">
            <summary>
Ultimate
</summary>
        </member>
        <member name="F:WindowsEdition.Undefined">
            <summary>
An unknown 
</summary>
        </member>
        <member name="F:WindowsEdition.StorageWorkgroupServerCore">
            <summary>
Storage Server Workgroup (core installation)
</summary>
        </member>
        <member name="F:WindowsEdition.StorageWorkgroupServer">
            <summary>
Storage Server Workgroup
</summary>
        </member>
        <member name="F:WindowsEdition.StorageWorkgroupEvaluationServer">
            <summary>
Storage Server Workgroup (evaluation installation)
</summary>
        </member>
        <member name="F:WindowsEdition.StorageStandardServerCore">
            <summary>
Storage Server Standard (core installation)
</summary>
        </member>
        <member name="F:WindowsEdition.StorageStandardServer">
            <summary>
Storage Server Standard
</summary>
        </member>
        <member name="F:WindowsEdition.StorageStandardEvaluationServer">
            <summary>
Storage Server Standard (evaluation installation)
</summary>
        </member>
        <member name="F:WindowsEdition.StorageExpressServerCore">
            <summary>
Storage Server Express (core installation)
</summary>
        </member>
        <member name="F:WindowsEdition.StorageExpressServer">
            <summary>
Storage Server Express
</summary>
        </member>
        <member name="F:WindowsEdition.StorageEnterpriseServerCore">
            <summary>
Storage Server Enterprise (core installation)
</summary>
        </member>
        <member name="F:WindowsEdition.StorageEnterpriseServer">
            <summary>
Storage Server Enterprise
</summary>
        </member>
        <member name="F:WindowsEdition.StarterN">
            <summary>
Starter N
</summary>
        </member>
        <member name="F:WindowsEdition.StarterE">
            <summary>
Not supported
</summary>
        </member>
        <member name="F:WindowsEdition.Starter">
            <summary>
Starter
</summary>
        </member>
        <member name="F:WindowsEdition.StandardServerSolutionsCore">
            <summary>
Server Solutions Premium (core installation)
</summary>
        </member>
        <member name="F:WindowsEdition.StandardServerSolutions">
            <summary>
Server Solutions Premium
</summary>
        </member>
        <member name="F:WindowsEdition.StandardServerCoreV">
            <summary>
Server Standard without Hyper-V (core installation)
</summary>
        </member>
        <member name="F:WindowsEdition.StandardServerV">
            <summary>
Server Standard without Hyper-V
</summary>
        </member>
        <member name="F:WindowsEdition.StandardServerCore">
            <summary>
Server Standard (core installation)
</summary>
        </member>
        <member name="F:WindowsEdition.StandardServer">
            <summary>
Server Standard
</summary>
        </member>
        <member name="F:WindowsEdition.StandardEvaluationServer">
            <summary>
Server Standard (evaluation installation)
</summary>
        </member>
        <member name="F:WindowsEdition.SolutionEmbeddedserver">
            <summary>
Windows MultiPoint Server
</summary>
        </member>
        <member name="F:WindowsEdition.SmallbusinessServerPremiumCore">
            <summary>
Small Business Server Premium (core installation)
</summary>
        </member>
        <member name="F:WindowsEdition.SmallbusinessServerPremium">
            <summary>
Small Business Server Premium
</summary>
        </member>
        <member name="F:WindowsEdition.SmallbusinessServer">
            <summary>
Windows Small Business Server
</summary>
        </member>
        <member name="F:WindowsEdition.SbSolutionServer">
            <summary>
Windows Small Business Server 2011 Essentials
</summary>
        </member>
        <member name="F:WindowsEdition.ServerFoundation">
            <summary>
Server Foundation
</summary>
        </member>
        <member name="F:WindowsEdition.ServerForSmallbusinessV">
            <summary>
Windows Server 2008 without Hyper-V for Windows Essential Server Solutions
</summary>
        </member>
        <member name="F:WindowsEdition.ServerForSmallbusiness">
            <summary>
Windows Server 2008 for Windows Essential Server Solutions
</summary>
        </member>
        <member name="F:WindowsEdition.ServerForSbSolutionsEm">
            <summary>
Server For SB Solutions EM
</summary>
        </member>
        <member name="F:WindowsEdition.ServerForSbSolutions">
            <summary>
Server For SB Solutions
</summary>
        </member>
        <member name="F:WindowsEdition.SbSolutionServerEm">
            <summary>
Server For SB Solutions EM
</summary>
        </member>
        <member name="F:WindowsEdition.ProfessionalWmc">
            <summary>
Professional with Media Center
</summary>
        </member>
        <member name="F:WindowsEdition.ProfessionalN">
            <summary>
Professional N
</summary>
        </member>
        <member name="F:WindowsEdition.ProfessionalE">
            <summary>
Not supported
</summary>
        </member>
        <member name="F:WindowsEdition.Professional">
            <summary>
Professional
</summary>
        </member>
        <member name="F:WindowsEdition.MultipointPremiumServer">
            <summary>
Windows MultiPoint Server Premium (full installation)
</summary>
        </member>
        <member name="F:WindowsEdition.MultipointStandardServer">
            <summary>
Windows MultiPoint Server Standard (full installation)
</summary>
        </member>
        <member name="F:WindowsEdition.MediumbusinessServerSecurity">
            <summary>
Windows Essential Business Server Security Server
</summary>
        </member>
        <member name="F:WindowsEdition.MediumbusinessServerMessaging">
            <summary>
Windows Essential Business Server Messaging Server
</summary>
        </member>
        <member name="F:WindowsEdition.MediumbusinessServerManagement">
            <summary>
Windows Essential Business Server Management Server
</summary>
        </member>
        <member name="F:WindowsEdition.Hyperv">
            <summary>
Microsoft Hyper-V Server
</summary>
        </member>
        <member name="F:WindowsEdition.HomeServer">
            <summary>
Windows Storage Server 2008 R2 Essentials
</summary>
        </member>
        <member name="F:WindowsEdition.HomePremiumServer">
            <summary>
Windows Home Server 2011
</summary>
        </member>
        <member name="F:WindowsEdition.HomePremiumN">
            <summary>
Home Premium N
</summary>
        </member>
        <member name="F:WindowsEdition.HomePremiumE">
            <summary>
Not supported
</summary>
        </member>
        <member name="F:WindowsEdition.HomePremium">
            <summary>
Home Premium
</summary>
        </member>
        <member name="F:WindowsEdition.HomeBasicN">
            <summary>
Home Basic N
</summary>
        </member>
        <member name="F:WindowsEdition.HomeBasicE">
            <summary>
Not supported
</summary>
        </member>
        <member name="F:WindowsEdition.HomeBasic">
            <summary>
Home Basic
</summary>
        </member>
        <member name="F:WindowsEdition.EssentialbusinessServerAddlsvc">
            <summary>
Windows Essential Server Solution Additional SVC
</summary>
        </member>
        <member name="F:WindowsEdition.EssentialbusinessServerMgmtsvc">
            <summary>
Windows Essential Server Solution Management SVC
</summary>
        </member>
        <member name="F:WindowsEdition.EssentialbusinessServerAddl">
            <summary>
Windows Essential Server Solution Additional
</summary>
        </member>
        <member name="F:WindowsEdition.EssentialbusinessServerMgmt">
            <summary>
Windows Essential Server Solution Management
</summary>
        </member>
        <member name="F:WindowsEdition.EnterpriseServerV">
            <summary>
Server Enterprise without Hyper-V (full installation)
</summary>
        </member>
        <member name="F:WindowsEdition.EnterpriseServerIa64">
            <summary>
Server Enterprise for Itanium-based Systems
</summary>
        </member>
        <member name="F:WindowsEdition.EnterpriseServerCoreV">
            <summary>
Server Enterprise without Hyper-V (core installation)
</summary>
        </member>
        <member name="F:WindowsEdition.EnterpriseServerCore">
            <summary>
Server Enterprise (core installation)
</summary>
        </member>
        <member name="F:WindowsEdition.EnterpriseServer">
            <summary>
Server Enterprise (full installation)
</summary>
        </member>
        <member name="F:WindowsEdition.EnterpriseEvaluation">
            <summary>
Server Enterprise (evaluation installation)
</summary>
        </member>
        <member name="F:WindowsEdition.EnterpriseN">
            <summary>
Enterprise N
</summary>
        </member>
        <member name="F:WindowsEdition.EnterpriseNEvaluation">
            <summary>
Enterprise N (evaluation installation)
</summary>
        </member>
        <member name="F:WindowsEdition.EnterpriseE">
            <summary>
Not supported
</summary>
        </member>
        <member name="F:WindowsEdition.Enterprise">
            <summary>
Enterprise
</summary>
        </member>
        <member name="F:WindowsEdition.DatacenterServerV">
            <summary>
Server Datacenter without Hyper-V (full installation)
</summary>
        </member>
        <member name="F:WindowsEdition.DatacenterServerCoreV">
            <summary>
Server Datacenter without Hyper-V (core installation)
</summary>
        </member>
        <member name="F:WindowsEdition.DatacenterServerCore">
            <summary>
Server Datacenter (core installation)
</summary>
        </member>
        <member name="F:WindowsEdition.DatacenterServer">
            <summary>
Server Datacenter (full installation)
</summary>
        </member>
        <member name="F:WindowsEdition.DatacenterEvaluationServer">
            <summary>
Server Datacenter (evaluation installation)
</summary>
        </member>
        <member name="F:WindowsEdition.CoreSinglelanguage">
            <summary>
Windows 8 Single Language
</summary>
        </member>
        <member name="F:WindowsEdition.CoreCountryspecific">
            <summary>
Windows 8 China
</summary>
        </member>
        <member name="F:WindowsEdition.CoreN">
            <summary>
Windows 8 N
</summary>
        </member>
        <member name="F:WindowsEdition.Core">
            <summary>
Windows 8
</summary>
        </member>
        <member name="F:WindowsEdition.ClusterServerV">
            <summary>
Server Hyper Core V
</summary>
        </member>
        <member name="F:WindowsEdition.ClusterServer">
            <summary>
HPC Edition
</summary>
        </member>
        <member name="F:WindowsEdition.BusinessN">
            <summary>
Business N
</summary>
        </member>
        <member name="F:WindowsEdition.Business">
            <summary>
Business
</summary>
        </member>
        <member name="P:OperatingSystemInfo.VersionNumber">
            <summary>
Gets the operating system version number.
</summary>
            <value>The operating system version number.</value>
            <remarks>If the application is launched from Visual Studio, this will return 6.2 for Windows 8.1 and Windows 10.</remarks>
        </member>
        <member name="M:Rage.ConsoleCommands.ArgumentParsers.ConsoleCommandArgumentParserInteger.Parse(System.String)">
            <summary>
Parses the specified argument as an integer.
</summary>
            <param name="argument">The argument to parse.</param>
            <returns>If successful, returns the resulting <see cref="T:System.Int32" />; otherwise, returns <c>null</c>.</returns>
        </member>
        <member name="M:Rage.ConsoleCommands.ArgumentParsers.ConsoleCommandArgumentParser.Parse(System.String)">
            <summary>
When overriden in a derived class, parses the specified argument.
</summary>
            <param name="argument">The argument to parse.</param>
            <returns>If successful, returns the resulting <see cref="T:System.Object" />; otherwise, returns <c>null</c>.</returns>
        </member>
        <member name="T:Rage.ConsoleCommands.ArgumentParsers.ConsoleCommandArgumentParser">
            <summary>
Handles parsing the arguments for console commands.
</summary>
        </member>
        <member name="P:Rage.Attributes.EuphoriaParameterAttribute.Name">
            <summary>
Gets or sets the name of this parameter.
</summary>
        </member>
        <member name="M:Rage.Attributes.EuphoriaParameterAttribute.#ctor">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Attributes.ConsoleVariableAttribute" /> class.
</summary>
        </member>
        <member name="M:Rage.Attributes.EuphoriaParameterAttribute.#ctor(System.String)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Attributes.ConsoleVariableAttribute" /> class.
</summary>
            <param name="name">The name of the parameter, used in the message.</param>
        </member>
        <member name="M:Rage.GameFiber.WaitThis(System.Int32)">
            <summary>
                <para>Waits this instance the specified duration. Note that only the active <see cref="T:Rage.GameFiber" /> can be set to wait.</para>
                <para>Unlike sleep, wait is scaled based on game time dilation.</para>
            </summary>
        </member>
        <member name="M:Rage.GameFiber.SleepThis(System.Int32)">
            <summary>
Sleeps this instance the specified duration. Note that only the active <see cref="T:Rage.GameFiber" /> can be set to sleep.
</summary>
        </member>
        <member name="M:Rage.GameFiber.HibernateThis">
            <summary>
Hibernates this instance. Note that only the active <see cref="T:Rage.GameFiber" /> can be set to hibernate.
</summary>
        </member>
        <member name="M:Rage.GameFiber.Wake">
            <summary>
Awakens this instance from hibernation.
</summary>
        </member>
        <member name="M:Rage.GameFiber.Wait(System.Int32)">
            <summary>
                <para>Waits the active instance the specified duration.</para>
                <para>Unlike sleep, wait is scaled based on game time dilation.</para>
            </summary>
        </member>
        <member name="M:Rage.GameFiber.Sleep(System.Int32)">
            <summary>
Sleeps the active instance the specified duration.
</summary>
        </member>
        <member name="M:Rage.GameFiber.Hibernate">
            <summary>
                <para>Makes the active <see cref="T:Rage.GameFiber" /> sleep indefinitely.</para>
                <para>Other <see cref="T:Rage.GameFiber" />s can awaken this instance by calling Wake() on the instance.</para>
            </summary>
        </member>
        <member name="M:Rage.GameFiber.StartNew(System.Threading.ThreadStart,System.String)">
            <summary>
Starts a new <see cref="T:Rage.GameFiber" /> instance.
</summary>
            <param name="start">The method to execute on the <see cref="T:Rage.GameFiber" />.</param>
            <param name="name">The name of the <see cref="T:Rage.GameFiber" />.</param>
            <returns>An instance of <see cref="!:Rage.GameFiber" />.</returns>
        </member>
        <member name="M:Rage.GameFiber.StartNew(System.Threading.ThreadStart)">
            <summary>
Starts a new <see cref="T:Rage.GameFiber" /> instance.
</summary>
            <param name="start">The method to execute on the <see cref="T:Rage.GameFiber" />.</param>
            <returns>An instance of <see cref="!:Rage.GameFiber" />.</returns>
        </member>
        <member name="M:Rage.GameFiber.Yield">
            <summary>
Yields this instance allowing other instances to be processed. Equivalent to Sleep(0);
</summary>
        </member>
        <member name="M:Rage.GameFiber.Abort">
            <summary>
Aborts this instance.
</summary>
        </member>
        <member name="M:Rage.GameFiber.Start">
            <summary>
Starts this instance.
</summary>
        </member>
        <member name="P:Rage.GameFiber.Thread">
            <summary>
Gets the thread associated with this <see cref="T:Rage.GameFiber" />.
</summary>
            <value>The thread associated with this <see cref="T:Rage.GameFiber" />.</value>
        </member>
        <member name="P:Rage.GameFiber.IsAlive">
            <summary>
Gets a value indicating whether this instance is still running.
</summary>
            <value>
                <c>true</c> if this instance is still running; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.GameFiber.IsHibernating">
            <summary>
Gets a value indicating whether this instance is hibernating.
</summary>
            <value>
                <c>true</c> if this instance is hibernating; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.GameFiber.IsSleeping">
            <summary>
Gets a value indicating whether this instance is sleeping.
</summary>
            <value>
                <c>true</c> if this instance is sleeping; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.GameFiber.Name">
            <summary>
Gets the name of this instance.
</summary>
        </member>
        <member name="P:Rage.GameFiber.CanSleepNow">
            <summary>
Gets a value indicating whether the calling code is executing in the active <see cref="T:Rage.GameFiber" /> instance.
</summary>
            <value>
                <c>true</c> if the calling code is executing in the active <see cref="T:Rage.GameFiber" /> instance; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Rage.GameFiber.#ctor(System.Threading.ThreadStart,System.String)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.GameFiber" /> class.
</summary>
            <param name="start">The method to execute on the <see cref="T:Rage.GameFiber" />.</param>
            <param name="name">The name of the <see cref="T:Rage.GameFiber" />.</param>
        </member>
        <member name="M:Rage.GameFiber.#ctor(System.Threading.ThreadStart)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.GameFiber" /> class.
</summary>
            <param name="start">The method to execute on the <see cref="T:Rage.GameFiber" />.</param>
        </member>
        <member name="T:Rage.GameFiber">
            <summary>
Represents a multi-tasking fiber. Natives can only be invoked from a fiber. Not meant to be inherited.
</summary>
        </member>
        <member name="M:Rage.Euphoria.EuphoriaMessage.PushArgument(System.String,System.Object)">
            <summary>
                <para>Adds the specified argument to this <see cref="T:Rage.Euphoria.EuphoriaMessage" />.</para>
                <para>Note that this does not override existing arguments with the same name. If this is desired, use the <see cref="!:Rage::EuphoriaMessage::SetArgument" /> overload.</para>
            </summary>
            <param name="name">The name of the argument.</param>
            <param name="value">
The value of the argument.
The following types are supported:
<see cref="T:System.Int32" /><see cref="T:System.Single" /><see cref="T:System.Boolean" /><see cref="T:System.String" /><see cref="!:Rage::Vector3" /><see cref="!:Rage::IHandleable" /> (Rage.Vehicle, Rage.Ped, Rage.Object, etc.)
<see cref="T:Rage.PoolHandle" /></param>
            <exception cref="T:System.ArgumentException">Thrown if the specified value is of an unsupported type.</exception>
        </member>
        <member name="M:Rage.Euphoria.EuphoriaMessage.SetArgument(System.String,System.Object)">
            <summary>
                <para>Sets the specified argument to this <see cref="T:Rage.Euphoria.EuphoriaMessage" />.</para>
                <para>Note that this overrides existing arguments with the same name. If this is not desired, use the <see cref="!:Rage::EuphoriaMessage::PushArgument" /> overload.</para>
            </summary>
            <param name="name">The name of the argument.</param>
            <param name="value">
The value of the argument.
The following types are supported:
<see cref="T:System.Int32" /><see cref="T:System.Single" /><see cref="T:System.Boolean" /><see cref="T:System.String" /><see cref="!:Rage::Vector3" /><see cref="!:Rage::IHandleable" /> (Rage.Vehicle, Rage.Ped, Rage.Object, etc.)
<see cref="T:Rage.PoolHandle" /></param>
            <exception cref="T:System.ArgumentException">Thrown if the specified value is of an unsupported type.</exception>
        </member>
        <member name="M:Rage.Utilities.CheckArrayBounds(System.Array,System.Int32,System.Int32@)">
            <summary>
Checks that a range to be read is within the boundaries of a source array, and fills in the number of elements to read if necessary.
</summary>
            <param name="data">The source array to be read from.</param>
            <param name="offset">The index at which the caller intends to begin reading from the source.</param>
            <param name="count">The number of elements intended to be read from the source. If 0 is passed, count will be adjusted to be size - offset.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="data" /> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset" /> or <paramref name="count" /> is negative.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length.</exception>
        </member>
        <member name="M:Rage.Utilities.CheckBounds(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
Checks that a range to be read are within the boundaries of a source.
</summary>
            <param name="lowerBound">The minimum bound that can be read from the source, and fills in the number of elements to read if necessary.</param>
            <param name="size">The total size of the source.</param>
            <param name="offset">The index at which the caller intends to begin reading from the source.</param>
            <param name="count">The number of elements intended to be read from the source. If 0 is passed, count will be adjusted to be size - offset.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset" /> is less than <paramref name="lowerBound" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="count" /> is negative.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length.</exception>
        </member>
        <member name="M:FW1CreateFactory(System.UInt32,IFW1Factory**)">
            <summary>The FW1CreateFactory method creates an IFWFactory object, that can subsequently be used to create any and all FW1 objects.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="Version">Set to FW1_VERSION. Is used to make sure the header matches the library version.</param>
            <param name="ppFactory">Address of a pointer to an IFW1Factory.</param>
        </member>
        <member name="M:IFW1Factory.CreateColor(System.UInt32,IFW1ColorRGBA**)">
            <summary>Create an IFW1ColorRGBA object.</summary>
            <remarks>An IFW1ColorRGBA can be set as the drawing effect for a range in a DirectWrite text layout to override the default color.</remarks>
            <returns>Standard HRESULT error code.</returns>
            <param name="Color">The initial color, as 0xAaBbGgRr.</param>
            <param name="ppColor">Address of a pointer to an IFW1ColorRGBA.</param>
        </member>
        <member name="M:IFW1Factory.CreateGlyphSheet(ID3D11Device*,System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.UInt32,IFW1GlyphSheet**)">
            <summary>Create an IFW1GlyphSheet object.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="pDevice">A D3D11 device used to create device resources.</param>
            <param name="GlyphSheetWidth">Width of the sheet texture.</param>
            <param name="GlyphSheetHeight">Height of the sheet texture.</param>
            <param name="HardwareCoordBuffer">If TRUE, create a D3D11 buffer with glyph coordinates, for use with the geometry shader.</param>
            <param name="AllowOversizedGlyph">If FALSE, glyphs that are larger than the sheet texture will be rejected instead of partially inserted.</param>
            <param name="MaxGlyphCount">The maximum number of glyphs in the sheet.</param>
            <param name="MipLevels">The number of mip levels for the texture.</param>
            <param name="ppGlyphSheet">Address of a pointer to an IFW1GlyphSheet.</param>
        </member>
        <member name="M:IFW1Factory.CreateGlyphAtlas(ID3D11Device*,System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32,IFW1GlyphAtlas**)">
            <summary>Create an IFW1GlyphAtlas object.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="pDevice">A D3D11 device used to create device resources.</param>
            <param name="GlyphSheetWidth">Width of the atlas textures.</param>
            <param name="GlyphSheetHeight">Height of the atlas textures.</param>
            <param name="HardwareCoordBuffer">If TRUE, create a D3D11 buffer with glyph coordinates for each sheet, for use with the geometry shader.</param>
            <param name="AllowOversizedGlyph">If FALSE, glyphs that are larger than the atlas textures will be rejected instead of partially inserted.</param>
            <param name="MaxGlyphCountPerSheet">The maximum number of glyphs in a single sheet texture.</param>
            <param name="MipLevels">The number of mip levels for the textures.</param>
            <param name="MaxGlyphSheetCount">The maximum number of sheet textures.</param>
            <param name="ppGlyphAtlas">Address of a pointer to an IFW1GlyphAtlas.</param>
        </member>
        <member name="M:IFW1Factory.CreateDWriteRenderTarget(IDWriteFactory*,System.UInt32,System.UInt32,IFW1DWriteRenderTarget**)">
            <summary>Create an IFW1DWriteRenderTarget object.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="pDWriteFactory">A DirectWrite factory used to create the internal render target.</param>
            <param name="RenderTargetWidth">The width of the render target.</param>
            <param name="RenderTargetHeight">The height of the render target.</param>
            <param name="ppRenderTarget">Address of a pointer to an IFW1DWriteRenderTarget.</param>
        </member>
        <member name="M:IFW1Factory.CreateGlyphProvider(IFW1GlyphAtlas*,IDWriteFactory*,IDWriteFontCollection*,System.UInt32,System.UInt32,IFW1GlyphProvider**)">
            <summary>Create an IFW1GlyphProvider object.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="pGlyphAtlas">A glyph atlas to store glyph images in.</param>
            <param name="pDWriteFactory">A DirectWrite factory, used to create glyph render targets.</param>
            <param name="pFontCollection">A font collection used to identify fonts from DirectWrite font-face objects.</param>
            <param name="MaxGlyphWidth">The maximum width of a single glyph.</param>
            <param name="MaxGlyphHeight">The maximum height of a single glyph.</param>
            <param name="ppGlyphProvider">Address of a pointer to an IFW1GlyphProvider.</param>
        </member>
        <member name="M:IFW1Factory.CreateTextGeometry(IFW1TextGeometry**)">
            <summary>Create an IFW1TextGeometry object.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="ppTextGeometry">Address of a pointer to an IFW1TextGeometry.</param>
        </member>
        <member name="M:IFW1Factory.CreateTextRenderer(IFW1GlyphProvider*,IFW1TextRenderer**)">
            <summary>Create an IFW1TextRenderer object.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="pGlyphProvider">The IFW1GlyphProvider that provides glyph-information for the text-renderer.</param>
            <param name="ppTextRenderer">Address of a pointer to a IFW1TextRenderer.</param>
        </member>
        <member name="M:IFW1Factory.CreateGlyphRenderStates(ID3D11Device*,System.Int32,System.Int32,IFW1GlyphRenderStates**)">
            <summary>Create an IFW1GlyphRenderStates object.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="pDevice">The ID3D11Device that the render-states will be used with.</param>
            <param name="DisableGeometryShader">If TRUE, no geometry shader will be created.</param>
            <param name="AnisotropicFiltering">If TRUE, a sampler state enabling anisotropic filtering will be created.</param>
            <param name="ppGlyphRenderStates">Address of a pointer to a glyph render-states object (See IFW1GlyphRenderStates).</param>
        </member>
        <member name="M:IFW1Factory.CreateGlyphVertexDrawer(ID3D11Device*,System.UInt32,IFW1GlyphVertexDrawer**)">
            <summary>Create an IFW1GlyphVertexDrawer object.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="pDevice">The ID3D11Device that the vertex drawer will be used with.</param>
            <param name="VertexBufferSize">The size in bytes of the dynamic vertex buffer. An index buffer will be created with a matching size.</param>
            <param name="ppGlyphVertexDrawer">Address of a pointer to a glyph-vertex drawer (See IFW1GlyphVertexDrawer).</param>
        </member>
        <member name="M:IFW1Factory.CreateFontWrapper(ID3D11Device*,IFW1GlyphAtlas*,IFW1GlyphProvider*,IFW1GlyphVertexDrawer*,IFW1GlyphRenderStates*,IDWriteFactory*,FW1_DWRITEFONTPARAMS!System.Runtime.CompilerServices.IsConst*,IFW1FontWrapper**)">
            <summary>Create an IFW1FontWrapper object.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="pDevice">The ID3D11Device that the font-wrapper will be used with.</param>
            <param name="pGlyphAtlas">An IFW1GlyphAtlas that glyph-images will be stored in.</param>
            <param name="pGlyphProvider">An IFW1GlyphProvider that handles fonts and glyphmaps.</param>
            <param name="pGlyphVertexDrawer">An IFW1GlyphVertexDrawer that handles drawing glyph-vertices.</param>
            <param name="pGlyphRenderStates">An IFW1GlyphRenderStates that handles all needed context states when drawing glyphs.</param>
            <param name="pDWriteFactory">An IDWriteFactory that is used to create render-targets to draw glyphs with.</param>
            <param name="pDefaultFontParams">Pointer to an FW1_DWRITEFONTPARAMS that describes the default font.
Can be NULL if only drawing preconstructed DirectWrite text layouts.</param>
            <param name="ppFontWrapper">Address of a pointer to a font-wrapper (See IFW1FontWrapper).</param>
        </member>
        <member name="M:IFW1Factory.CreateFontWrapper(ID3D11Device*,IDWriteFactory*,FW1_FONTWRAPPERCREATEPARAMS!System.Runtime.CompilerServices.IsConst*,IFW1FontWrapper**)">
            <summary>Create an IFW1FontWrapper object.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="pDevice">The ID3D11Device that the font-wrapper will be used with.</param>
            <param name="pCreateParams">Pointer to an FW1_FONTWRAPPERCREATEPARAMS structure that describes the settings for the new font-wrapper.</param>
            <param name="ppFontWrapper">Address of a pointer to a font-wrapper (See IFW1FontWrapper).</param>
        </member>
        <member name="M:IFW1Factory.CreateFontWrapper(ID3D11Device*,System.Char!System.Runtime.CompilerServices.IsConst*,IFW1FontWrapper**)">
            <summary>Create an IFW1FontWrapper object with default settings.</summary>
            <returns>Standard HRESULT error code.</returns>
            <remarks />
            <param name="pDevice">The ID3D11Device the font-wrapper will be used with.</param>
            <param name="pszFontFamily">The default font-family to use when drawing strings.
Valid values include for example L"Arial" and L"Courier New", provided that the fonts are installed on the system.
Font-fallback will automatically choose a different font if the specified one is not available.</param>
            <param name="ppFontWrapper">Address of a pointer to a font-wrapper (See IFW1FontWrapper).</param>
        </member>
        <member name="T:IFW1Factory">
            <summary>
Used to create all subsequent FW1 objects.
An IFW1Factory can be created using FW1CreateFactory.
</summary>
            <remarks>
Any and all FW1 objects are always created through a factory. All FW1 objects inherit from IFW1Object, and holds a reference to the factory that created them.
If an object in turn creates new objects, it uses the same factory that created the object itself.
For example, a glyph-atlas will ask the factory that created it to create new glyph-sheets as glyphs are added to the atlas.
</remarks>
        </member>
        <member name="M:IFW1FontWrapper.Flush(ID3D11DeviceContext*)">
            <summary>Flush any new glyphs to GPU resources.</summary>
            <remarks>This method calls IFW1GlyphAtlas::Flush to flush any newly cached glyphs.
This method is only needed if drawing text using the FW1_NOFLUSH flag and delaying flushing data to the device, as otherwise it is implicitly called whenever a string is drawn. See IFW1GlyphAtlas::Flush.</remarks>
            <returns>No return value.</returns>
            <param name="pContext">The device context to use to update device resources.</param>
        </member>
        <member name="M:IFW1FontWrapper.DrawGeometry(ID3D11DeviceContext*,IFW1TextGeometry*,FW1_RECTF!System.Runtime.CompilerServices.IsConst*,System.Single!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
            <summary>Draw geometry.</summary>
            <remarks />
            <returns>No return value.</returns>
            <param name="pContext">The device context to draw on.</param>
            <param name="pGeometry">The geometry to draw.</param>
            <param name="pClipRect">A pointer to a rectangle to clip the text to if also using the FW1_CLIPRECT flag, or NULL to not clip. This rect is in text-space, and clipping is performed prior to any transformation.</param>
            <param name="pTransformMatrix">An array of 16 floats, representing a matrix which the text will be transformed by, or NULL to draw in screen-space.</param>
            <param name="Flags">See the FW1_TEXT_FLAG enumeration.</param>
        </member>
        <member name="M:IFW1FontWrapper.AnalyzeTextLayout(ID3D11DeviceContext*,IDWriteTextLayout*,System.Single,System.Single,System.UInt32,System.UInt32,IFW1TextGeometry*)">
            <summary>Analyze a text layout and generate geometry to draw it.</summary>
            <remarks>Consult the DirectWrite documentation for details on how to construct a text-layout.
pTextGeometry can be NULL if the FW1_ANALYZEONLY or FW1_CACHEONLY flags are specified, as no actual geometry will be generated.
pContext can be NULL if the FW1_NOFLUSH flag is used, as any new glyphs will not be flushed to the device buffers.</remarks>
            <returns>No return value.</returns>
            <param name="pContext">A device context to use to update device buffers when new glyphs are added to the glyph-atlas.</param>
            <param name="pTextLayout">The DirectWrite text layout to create geometry from.</param>
            <param name="OriginX">The X origin of the text in the layout.</param>
            <param name="OriginY">The Y origin of the text in the layout.</param>
            <param name="Color">The default color of the text, as 0xAaBbGgRr.</param>
            <param name="Flags">See FW1_TEXT_FLAG. The alignment and word-wrapping flags have no meaning when using a preconstructed text layout.</param>
            <param name="pTextGeometry">An IFW1TextGeometry object that the output vertices will be appended to.</param>
        </member>
        <member name="M:IFW1FontWrapper.AnalyzeString(ID3D11DeviceContext*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Single,FW1_RECTF!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32,IFW1TextGeometry*)">
            <summary>Analyze a string and generate geometry to draw it.</summary>
            <remarks>pTextGeometry can be NULL if the FW1_ANALYZEONLY or FW1_CACHEONLY flags are specified, as no actual geometry will be generated.
pContext can be NULL if the FW1_NOFLUSH flag is used, as any new glyphs will not be flushed to the device buffers.</remarks>
            <returns>No return value.</returns>
            <param name="pContext">A device context to use to update device buffers when new glyphs are added to the glyph-atlas.</param>
            <param name="pszString">The NULL-terminated string to create geometry from.</param>
            <param name="pszFontFamily">The font family to use, such as Arial or Courier New.</param>
            <param name="FontSize">The size of the font.</param>
            <param name="pLayoutRect">A pointer to a rectangle to format the text in.</param>
            <param name="Color">The color of the text, as 0xAaBbGgRr.</param>
            <param name="Flags">See the FW1_TEXT_FLAG enumeration.</param>
            <param name="pTextGeometry">An IFW1TextGeometry object that the output vertices will be appended to.</param>
        </member>
        <member name="M:IFW1FontWrapper.MeasureString(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Single,FW1_RECTF!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
            <summary>Measure a string.</summary>
            <remarks>This function uses the IDWriteTextLayout::GetOverhangMetrics to obtain the size of the string.</remarks>
            <returns>The smallest rectangle that completely contains the string if drawn with DrawString and the same parameters as used with MeasureString.</returns>
            <param name="pszString">The NULL-terminated string to measure.</param>
            <param name="pszFontFamily">The font family to use, such as Arial or Courier New.</param>
            <param name="FontSize">The size of the font.</param>
            <param name="pLayoutRect">A pointer to a rectangle to format the text in.</param>
            <param name="Flags">See the FW1_TEXT_FLAG enumeration.</param>
        </member>
        <member name="M:IFW1FontWrapper.DrawString(ID3D11DeviceContext*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Single,FW1_RECTF!System.Runtime.CompilerServices.IsConst*,System.UInt32,FW1_RECTF!System.Runtime.CompilerServices.IsConst*,System.Single!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
            <summary>Draw a string.</summary>
            <remarks>The pContext parameter can be NULL only if the FW1_NOFLUSH and either the FW1_ANALYZEONLY or the FW1_CACHEONLY flags are specified.</remarks>
            <returns>No return value.</returns>
            <param name="pContext">The device context to draw on.</param>
            <param name="pszString">The NULL-terminated string to draw.</param>
            <param name="pszFontFamily">The font family to use, such as Arial or Courier New.</param>
            <param name="FontSize">The size of the font.</param>
            <param name="pLayoutRect">A pointer to a rectangle to format the text in.</param>
            <param name="Color">The color of the text, as 0xAaBbGgRr.</param>
            <param name="pClipRect">A pointer to a rectangle to clip the text to if also using the FW1_CLIPRECT flag, or NULL to not clip.</param>
            <param name="pTransformMatrix">An array of 16 floats, representing a matrix which the text will be transformed by, or NULL to draw in screen-space.</param>
            <param name="Flags">See the FW1_TEXT_FLAG enumeration.</param>
        </member>
        <member name="M:IFW1FontWrapper.DrawString(ID3D11DeviceContext*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Single,System.Single,System.Single,System.UInt32,System.UInt32)">
            <summary>Draw a string.</summary>
            <remarks>The pContext parameter can be NULL only if the FW1_NOFLUSH and either the FW1_ANALYZEONLY or the FW1_CACHEONLY flags are specified.</remarks>
            <returns>No return value.</returns>
            <param name="pContext">The device context to draw on.</param>
            <param name="pszString">The NULL-terminated string to draw.</param>
            <param name="pszFontFamily">The font family to use, such as Arial or Courier New.</param>
            <param name="FontSize">The size of the font.</param>
            <param name="X">The X origin of the text.</param>
            <param name="Y">The Y origin of the text .</param>
            <param name="Color">The color of the text, as 0xAaBbGgRr.</param>
            <param name="Flags">See the FW1_TEXT_FLAG enumeration.</param>
        </member>
        <member name="M:IFW1FontWrapper.DrawString(ID3D11DeviceContext*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Single,System.Single,System.Single,System.UInt32,System.UInt32)">
            <summary>Draw a string.</summary>
            <remarks>The pContext parameter can be NULL only if the FW1_NOFLUSH and either the FW1_ANALYZEONLY or the FW1_CACHEONLY flags are specified.</remarks>
            <returns>No return value.</returns>
            <param name="pContext">The device context to draw on.</param>
            <param name="pszString">The NULL-terminated string to draw.</param>
            <param name="FontSize">The size of the font.</param>
            <param name="X">The X origin of the text.</param>
            <param name="Y">The Y origin of the text .</param>
            <param name="Color">The color of the text, as 0xAaBbGgRr.</param>
            <param name="Flags">See the FW1_TEXT_FLAG enumeration.</param>
        </member>
        <member name="M:IFW1FontWrapper.DrawTextLayout(ID3D11DeviceContext*,IDWriteTextLayout*,System.Single,System.Single,System.UInt32,FW1_RECTF!System.Runtime.CompilerServices.IsConst*,System.Single!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
            <summary>Draw a DirectWrite text layout.</summary>
            <remarks>Consult the DirectWrite documentation for details on how to construct a text-layout.<br />
The pContext parameter can be NULL only if the FW1_NOFLUSH and either the FW1_ANALYZEONLY or the FW1_CACHEONLY flags are specified.</remarks>
            <returns>No return value.</returns>
            <param name="pContext">The device context to draw on.</param>
            <param name="pTextLayout">The text layout to draw.</param>
            <param name="OriginX">The X origin of the text in the layout.</param>
            <param name="OriginY">The Y origin of the text in the layout.</param>
            <param name="Color">The default color of the text, as 0xAaBbGgRr.</param>
            <param name="pClipRect">A pointer to a rectangle to clip the text to if also using the FW1_CLIPRECT flag, or NULL to not clip.</param>
            <param name="pTransformMatrix">An array of 16 floats, representing a matrix which the text will be transformed by.</param>
            <param name="Flags">See FW1_TEXT_FLAG. The alignment and word-wrapping flags have no meaning when drawing a preconstructed text layout.</param>
        </member>
        <member name="M:IFW1FontWrapper.DrawTextLayout(ID3D11DeviceContext*,IDWriteTextLayout*,System.Single,System.Single,System.UInt32,System.UInt32)">
            <summary>Draw a DirectWrite text layout.</summary>
            <remarks>Consult the DirectWrite documentation for details on how to construct a text-layout.<br />
The pContext parameter can be NULL only if the FW1_NOFLUSH and either the FW1_ANALYZEONLY or the FW1_CACHEONLY flags are specified.</remarks>
            <returns>No return value.</returns>
            <param name="pContext">The device context to draw on.</param>
            <param name="pTextLayout">The text layout to draw.</param>
            <param name="OriginX">The X origin of the text in the layout.</param>
            <param name="OriginY">The Y origin of the text in the layout.</param>
            <param name="Color">The default color of the text, as 0xAaBbGgRr.</param>
            <param name="Flags">See FW1_TEXT_FLAG. The alignment and word-wrapping flags have no meaning when drawing a preconstructed text layout.</param>
        </member>
        <member name="M:IFW1FontWrapper.GetVertexDrawer(IFW1GlyphVertexDrawer**)">
            <summary>Get the IFW1GlyphVertexDrawer used to draw glyph vertices.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="ppVertexDrawer">Address of a pointer to an IFW1GlyphVertexDrawer.</param>
        </member>
        <member name="M:IFW1FontWrapper.GetRenderStates(IFW1GlyphRenderStates**)">
            <summary>Get the IFW1GlyphRenderStates containing the render states needed to draw glyphs.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="ppRenderStates">Address of a pointer to an IFW1GlyphRenderStates.</param>
        </member>
        <member name="M:IFW1FontWrapper.GetGlyphProvider(IFW1GlyphProvider**)">
            <summary>Get the IFW1GlyphProvider used to map glyphs to atlas IDs.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="ppGlyphProvider">Address of a pointer to an IFW1GlyphProvider.</param>
        </member>
        <member name="M:IFW1FontWrapper.GetGlyphAtlas(IFW1GlyphAtlas**)">
            <summary>Get the IFW1GlyphAtlas used to cache glyphs.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="ppGlyphAtlas">Address of a pointer to an IFW1GlyphAtlas.</param>
        </member>
        <member name="M:IFW1FontWrapper.GetDWriteFactory(IDWriteFactory**)">
            <summary>Get the DirectWrite factory used by the font-wrapper.</summary>
            <remarks>The DirectWrite factory is used internally to create text-layouts when drawing strings using any of the DrawString methods.</remarks>
            <returns>Standard HRESULT error code.</returns>
            <param name="ppDWriteFactory">Address of a pointer to an IDWriteFactory.</param>
        </member>
        <member name="M:IFW1FontWrapper.GetDevice(ID3D11Device**)">
            <summary>Get the ID3D11Device that is used by the font-wrapper.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="ppDevice">Address of a pointer to an ID3D11Device.</param>
        </member>
        <member name="T:IFW1FontWrapper">
            <summary>The IFW1FontWrapper interface is the main interface used to draw text.
It holds references to all objects needed to format and convert text to vertices, as well as the D3D11 states and buffers needed to draw them.</summary>
            <remarks>Create a font-wrapper using IFW1Factory::CreateFontWrapper</remarks>
        </member>
        <member name="M:IFW1GlyphVertexDrawer.DrawVertices(ID3D11DeviceContext*,IFW1GlyphAtlas*,FW1_VERTEXDATA!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32)">
            <summary>Upload the specified vertices to the device buffers and draw them.</summary>
            <remarks />
            <returns>Returns the index of the sheet in the atlas that was last bound to the device context during the operation.</returns>
            <param name="pContext">The context to use to draw.</param>
            <param name="pGlyphAtlas">The glyph atlas containg the glyphs referenced by the vertices.</param>
            <param name="pVertexData">Pointer to an FW1_VERTEXDATA structure, containing vertices to be drawn, sorted by glyph sheet.
These are easiest obtained from an IFW1TextGeometry object.</param>
            <param name="Flags">Can include zero or more of the following values, ORd together. Any additional values are ignored.<br />
FW1_NOGEOMETRYSHADER - Vertices are converted to quads on the fly on the CPU, instead of being sent directly to the device for the geometry shader.<br />
FW1_BUFFERSPREPARED - The internal buffers are assumed to already be set on the device context from a previous call. (Avoids redundant state changes when drawing multiple times).
</param>
            <param name="PreboundSheet">If a sheet in the atlas is known to already be correctly set on the device context, specify its index in the atlas with this parameter, to avoid redundant state changes.
If no sheet is known to already be set, specify 0xFFFFFFFF, or another value greater than the number of sheets in the atlas.
</param>
        </member>
        <member name="M:IFW1GlyphVertexDrawer.GetDevice(ID3D11Device**)">
            <summary>Get the ID3D11Device that the buffers are created on.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="ppDevice">Address of a pointer to an ID3D11Device.</param>
        </member>
        <member name="T:IFW1GlyphVertexDrawer">
            <summary>A container for a dynamic vertex and index buffer, used to draw glyph vertices.</summary>
            <remarks />
        </member>
        <member name="M:IFW1GlyphRenderStates.HasGeometryShader">
            <summary>Returns whether a geometry shader is available.</summary>
            <remarks>When an IFW1GlyphRenderStates object is created, it may attempt to create a geometry shader, depending on the parameters passed to IFW1Factory::CreateRenderStates.
If a geometry shader is not created, either because of the specified parameters or because the device feature level does not support geometry shaders, this method will return FALSE.</remarks>
            <returns>Returns TRUE if a geometry shader is available, and otherwise returns FALSE.</returns>
        </member>
        <member name="M:IFW1GlyphRenderStates.UpdateShaderConstants(ID3D11DeviceContext*,FW1_RECTF!System.Runtime.CompilerServices.IsConst*,System.Single!System.Runtime.CompilerServices.IsConst*)">
            <summary>Update the internal constant buffer.</summary>
            <remarks />
            <returns>No return value.</returns>
            <param name="pContext">The context to use to update the constant buffer.</param>
            <param name="pClipRect">A pointer to a rectangle to clip drawn glyphs to.</param>
            <param name="pTransformMatrix">An array of 16 floats, representing a matrix which all glyph vertices will be multiplied with, in the geometry or vertex shader.</param>
        </member>
        <member name="M:IFW1GlyphRenderStates.SetStates(ID3D11DeviceContext*,System.UInt32)">
            <summary>Set the internal states on a context.</summary>
            <remarks />
            <returns>No return value.</returns>
            <param name="pContext">The context to set the states on.</param>
            <param name="Flags">Can include zero or more of the following values, ORd together. Any additional values are ignored.<br />
FW1_NOGEOMETRYSHADER - States are set up to draw indexed quads instead of constructing quads in the geometry shader.<br />
FW1_CLIPRECT - Shaders will be set up to clip any drawn glyphs to the clip-rect set in IFW1GlyphRenderStates::UpdateShaderConstants.
</param>
        </member>
        <member name="M:IFW1GlyphRenderStates.GetDevice(ID3D11Device**)">
            <summary>Get the ID3D11Device that all render states are created on.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="ppDevice">Address of a pointer to an ID3D11Device.</param>
        </member>
        <member name="T:IFW1GlyphRenderStates">
            <summary>This interface contains all render states and shaders needed to draw glyphs.</summary>
            <remarks />
        </member>
        <member name="M:IFW1TextRenderer.DrawTextLayout(IDWriteTextLayout*,System.Single,System.Single,System.UInt32,System.UInt32,IFW1TextGeometry*)">
            <summary>Convert a text layout to vertices.</summary>
            <remarks>This method internally calls the IDWriteTextLayout::Draw method, and handles callbacks to convert the formatted text into vertices, which will be stored in the passed IFW1TextGeometry object.
This method is not thread-safe.</remarks>
            <returns>Standard HRESULT error code.</returns>
            <param name="pTextLayout">A DirectWrite text layout. See the DirectWrite documentation.</param>
            <param name="OriginX">The X origin of the text.</param>
            <param name="OriginY">The Y origin of the text.</param>
            <param name="Color">The default text color, as 0xAaGgBbRr.</param>
            <param name="Flags">Can include zero or more of the following values, ORd together. Any additional values are ignored.<br />
FW1_ALIASED - No anti-aliasing is used when drawing the glyphs.<br />
FW1_NONEWGLYPHS - No new glyphs are inserted into the atlas. Not previously cached glyphs are replaced with a fallback glyph (usually an empty box).<br />
FW1_CACHEONLY - All glyphs are queried from the glyph-provider and cached in the glyph-atlas, but no geometry is produced.<br />
FW1_ANALYZEONLY - The text-layout is analyzed and glyph-maps are prepared, but the glyphs in the string are not cached and no geometry is produced.<br /></param>
            <param name="pTextGeometry">An IFW1TextGeometry object that the output vertices will be appended to.</param>
        </member>
        <member name="M:IFW1TextRenderer.GetGlyphProvider(IFW1GlyphProvider**)">
            <summary>Get the IFW1GlyphProvider used by a text-renderer.</summary>
            <remarks>The glyph provider is used internally to get the atlas IDs for any glyphs needed when drawing a text layout.</remarks>
            <returns>Standard HRESULT error code.</returns>
            <param name="ppGlyphProvider">Address of a pointer to an IFW1GlyphProvider.</param>
        </member>
        <member name="T:IFW1TextRenderer">
            <summary>A text-renderer converts DirectWrite text layouts into glyph-vertices.</summary>
            <remarks />
        </member>
        <member name="M:IFW1TextGeometry.GetGlyphVerticesTemp">
            <summary>Get the vertices in the geometry, sorted by glyph sheet.</summary>
            <remarks>When glyphs are inserted into the geometry they contain their glyph atlas ID.
The glyphs are internally sorted by glyph sheet, and glyphs returned by GetGlyphVerticesTemp contain the index of the glyph in its containing sheet, and not the atlas ID.<br />
This method is not thread-safe.</remarks>
            <returns>An FW1_VERTEXDATA structure containing the glyph vertices.
The pointers in this structure are owned by the geometry object and should not be modified.
They are valid until the next call to a method in the IFW1TextGeometry.</returns>
        </member>
        <member name="M:IFW1TextGeometry.AddGlyphVertex(FW1_GLYPHVERTEX!System.Runtime.CompilerServices.IsConst*)">
            <summary>Adds a vertex to the geometry.</summary>
            <remarks>The GlyphIndex member of the FW1_GLYPHVERTEX specified when inserting a vertex should be the atlas ID of the desired glyph, as <tt>((SheetIndex &lt;&lt; 16) | GlyphIndex)</tt>.
See IFW1GlyphAtlas::InsertGlyph.<br />
This method is not thread-safe.</remarks>
            <returns>No return value.</returns>
            <param name="pVertex">Pointer to an FW1_GLYPHVERTEX structure describing the vertex.</param>
        </member>
        <member name="M:IFW1TextGeometry.Clear">
            <summary>Clear any vertices currently contained in the geometry object.</summary>
            <remarks>This method is not thread-safe.</remarks>
            <returns>No return value.</returns>
        </member>
        <member name="T:IFW1TextGeometry">
            <summary>A dynamic list of vertices. Note that this object is a simple array without synchronization and not safe to use simultaneously on more than one thread.</summary>
            <remarks>When rendering a string, a vertex is inserted into an IFW1TextGeometry object for each glyph.
The vertices in an IFW1TextGeometry can be drawn by the IFW1FontWrapper::DrawGeometry method.<br />
A pointer to the actual vertices can be obtained with the IFW1TextGeometry::GetGlyphVerticesTemp method.</remarks>
        </member>
        <member name="M:IFW1ColorRGBA.GetColor32">
            <summary>Get the color.</summary>
            <remarks />
            <returns>Returns the color, as 0xAaBbGgRr.</returns>
        </member>
        <member name="M:IFW1ColorRGBA.SetColor(System.Byte!System.Runtime.CompilerServices.IsConst*)">
            <summary>Set the color.</summary>
            <remarks />
            <returns>No return value.</returns>
            <param name="pColor">Pointer to an array of four bytes in [0, 255], specifying the red, green, blue and alpha components at indices 0 to 3.</param>
        </member>
        <member name="M:IFW1ColorRGBA.SetColor(System.Single!System.Runtime.CompilerServices.IsConst*)">
            <summary>Set the color.</summary>
            <remarks />
            <returns>No return value.</returns>
            <param name="pColor">Pointer to an array of four floats in [0, 1], specifying the red, green, blue and alpha components at indices 0 to 3.</param>
        </member>
        <member name="M:IFW1ColorRGBA.SetColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>Set the color.</summary>
            <remarks />
            <returns>No return value.</returns>
            <param name="Red">The red component, in [0, 1].</param>
            <param name="Green">The green component, in [0, 1].</param>
            <param name="Blue">The blue component, in [0, 1].</param>
            <param name="Alpha">The alpha component, in [0, 1].</param>
        </member>
        <member name="M:IFW1ColorRGBA.SetColor(System.UInt32)">
            <summary>Set the color.</summary>
            <remarks />
            <returns>No return value.</returns>
            <param name="Color">The color to set, as 0xAaBbGgRr.</param>
        </member>
        <member name="T:IFW1ColorRGBA">
            <summary>An RGBA color.</summary>
            <remarks>An IFW1ColorRGBA object can be set as the drawing effect for a range in an IDWriteTextLayout, to override the default color of the text.</remarks>
        </member>
        <member name="M:IFW1DWriteRenderTarget.DrawGlyphTemp(IDWriteFontFace*,System.UInt16,System.Single,DWRITE_RENDERING_MODE,DWRITE_MEASURING_MODE,FW1_GLYPHIMAGEDATA*)">
            <summary>Draw a glyph-image.</summary>
            <remarks>The data returned in the FW1_GLYPHIMAGEDATA should only be read, and is valid until the next call to a method in the IFW1DWriteRenderTarget.<br />
This method is not thread-safe.</remarks>
            <returns>Standard HRESULT error code.</returns>
            <param name="pFontFace">The DirectWrite font face containing the glyph.</param>
            <param name="GlyphIndex">The index of the glyph in the font face.</param>
            <param name="FontSize">The size of the font.</param>
            <param name="RenderingMode">The DirectWrite rendering mode. See DirectWrite documentation.</param>
            <param name="MeasuringMode">The DirectWrite measuring mode. See DirectWrite documentation..</param>
            <param name="pOutData">A pointer to an FW1_GLYPHIMAGEDATA structure that will be filled in with the glyph image data on success.</param>
        </member>
        <member name="T:IFW1DWriteRenderTarget">
            <summary>Container for a DirectWrite render-target, used to draw glyph images that are to be inserted in a glyph atlas.</summary>
            <remarks />
        </member>
        <member name="M:IFW1GlyphProvider.GetAtlasIdFromGlyphIndex(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt16,IDWriteFontFace*,System.UInt32)">
            <summary>Get the ID of the specified glyph in the glyph-atlas.</summary>
            <remarks>If FW1_NONEWGLYPHS is not specified, any glyph not currently in the atlas will be inserted before the method returns.</remarks>
            <returns>The ID of the specified glyph in the glyph-atlas.
The ID is always <tt>((SheetIndex &lt;&lt; 16) | GlyphIndex)</tt>, where <i>SheetIndex</i> is the index of the sheet texture the glyph is placed in, and <i>GlyphIndex</i> is the index of the glyph in that sheet.<br />
If the specified glyph does not exist and can not be inserted on demand, the ID of a fallback glyph is returned.</returns>
            <param name="pGlyphMap">A pointer identifying a glyph-map, previously obtained using IFW1GlyphProvider::GetGlyphMapFromFont.
If this parameter is NULL, the ID of the last-resort fallback glyph is returned, which will be zero.</param>
            <param name="GlyphIndex">The index of the glyph in the DirectWrite font face.
Glyph indices can be obtained from DirectWrite using IDWriteFontFace::GetGlyphIndices.</param>
            <param name="pFontFace">The DirectWrite font face that contains the glyph referenced by GlyphIndex.</param>
            <param name="FontFlags">Can include zero or more of the following values, ORd together. Any additional values are ignored.<br />
FW1_NONEWGLYPHS - No new glyphs are inserted.</param>
        </member>
        <member name="M:IFW1GlyphProvider.GetGlyphMapFromFont(IDWriteFontFace*,System.Single,System.UInt32)">
            <summary>Get a pointer identifying a glyph-map matching the specified font.</summary>
            <remarks>If the FW1_NONEWGLYPHS flag is not specified, new glyph-maps are created on demand.
The glyph-map returned from this method is not meaningful outside of the glyph provider internals, but is needed for subsequent calls to IFW1GlyphProvider::GetAtlasIdFromGlyphIndex.</remarks>
            <returns>A constant pointer identifying a glyph-map.
This pointer should only be used in subsequent calls to IFW1GlyphProvider::GetAtlasIdFromGlyphIndex, and remains valid for the lifetime of the IFW1GlyphProvider.<br />
A NULL pointer may be returned, if using the FW1_NONEWGLYPHS flag and a matching glyph-map does not exist.</returns>
            <param name="pFontFace">A DirectWrite font face.</param>
            <param name="FontSize">The size of the font.</param>
            <param name="FontFlags">Can include zero or more of the following values, ORd together. Any additional values are ignored.<br />
FW1_ALIASED - No anti-aliasing is used when drawing the glyphs.<br />
FW1_NONEWGLYPHS - No new glyph-maps are created.</param>
        </member>
        <member name="M:IFW1GlyphProvider.GetDWriteFontCollection(IDWriteFontCollection**)">
            <summary>Get the DirectWrite font-collection referenced by a glyph-provider.</summary>
            <remarks>The DirectWrite font collection is used internally only to match font-faces to unique names.
Since different IDWriteFontFace objects can reference the same font, a reliable method of identifying a font is required.
This is the only function of the font-collection in the scope of the glyph-provider.
A font-face not from the same collection can still be used when requesting glyphs, in which case it will only be identified by its pointer value.</remarks>
            <returns>Standard HRESULT error code.</returns>
            <param name="ppFontCollection">Address of a pointer to an IDWriteFontCollection.</param>
        </member>
        <member name="M:IFW1GlyphProvider.GetDWriteFactory(IDWriteFactory**)">
            <summary>Get the DirectWrite factory a glyph-provider references.</summary>
            <remarks>The DirectWrite factory is used internally to create render-targets needed to draw glyph-images that are put in the glyph-atlas.</remarks>
            <returns>Standard HRESULT error code.</returns>
            <param name="ppDWriteFactory">Address of a pointer to an IDWriteFactory.</param>
        </member>
        <member name="M:IFW1GlyphProvider.GetGlyphAtlas(IFW1GlyphAtlas**)">
            <summary>Get the IFW1GlyphAtlas this glyph-provider references.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="ppGlyphAtlas">Address of a pointer to an IFW1GlyphAtlas.</param>
        </member>
        <member name="T:IFW1GlyphProvider">
            <summary>Collection of glyph-maps, mapping font/size/glyph information to an ID in a glyph atlas.</summary>
            <remarks>Whenever a glyph or glyphmap is queried from the glyph-provider, it will be dynamically inserted if it does not already exist.</remarks>
        </member>
        <member name="M:IFW1GlyphAtlas.Flush(ID3D11DeviceContext*)">
            <summary>Flush all new or internally updated sheets.</summary>
            <remarks>See IFW1GlyphSheet::Flush.</remarks>
            <returns>No return value.</returns>
            <param name="pContext">The context to use when updating device resources.</param>
        </member>
        <member name="M:IFW1GlyphAtlas.InsertSheet(IFW1GlyphSheet*)">
            <summary>Insert a sheet into the atlas.</summary>
            <remarks>This method is used internally whenever new glyphs no longer fits in existing sheets. The atlas will hold a reference to the sheet for the remainder of its lifetime.</remarks>
            <returns>On success, eturns the index of the sheet in the atlas after insertion.<br />If the method fails, 0xFFFFFFFF is returned.</returns>
            <param name="pGlyphSheet">A pointer ot the glyph sheet to insert.</param>
        </member>
        <member name="M:IFW1GlyphAtlas.InsertGlyph(FW1_GLYPHMETRICS!System.Runtime.CompilerServices.IsConst*,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32)">
            <summary>Insert a glyph into the atlas.</summary>
            <remarks>The parameters for this method can be obtained as part of the FW1_GLYPHIMAGEDATA structure filled in by the IFW1DWriteRenderTarget::DrawGlyphTemp method.</remarks>
            <returns>If the glyph is inserted, the ID of the new glyph in the atlas is returned.
The ID is always <tt>((SheetIndex &lt;&lt; 16) | GlyphIndex)</tt>, where <i>SheetIndex</i> is the index of the sheet texture the glyph is place in, and <i>GlyphIndex</i> is the index of the glyph in that sheet.<br />
If the method fails to insert the glyph, the returned value is 0xFFFFFFFF.</returns>
            <param name="pGlyphMetrics">A pointer to an FW1_GLYPHMETRICS structure, specifying the metrics of the glyph to be inserted.</param>
            <param name="pGlyphData">A pointer to image data.</param>
            <param name="RowPitch">The number of bytes in a row of image data.</param>
            <param name="PixelStride">The number of bytes between successive pixels.</param>
        </member>
        <member name="M:IFW1GlyphAtlas.BindSheet(ID3D11DeviceContext*,System.UInt32,System.UInt32)">
            <summary>Bind a sheet's shader resources on a device context.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="pContext">The context to set the shader resources on.</param>
            <param name="SheetIndex">The index of the sheet to bind.</param>
            <param name="Flags">Flags that specify whether to set the geometry shader coord buffer. See IFW1GlyphSheet::BindSheet.</param>
        </member>
        <member name="M:IFW1GlyphAtlas.GetGlyphCoords(System.UInt32)">
            <summary>Get a pointer to a sheet's glyph-coord buffer.</summary>
            <remarks />
            <returns>If <i>SheetIndex</i> is valid, returns a pointer to a coord buffer. See IFW1GlyphSheet::GetGlyphCoords.</returns>
            <param name="SheetIndex">The index of the sheet which coord buffer is to be obtained.</param>
        </member>
        <member name="M:IFW1GlyphAtlas.GetSheet(System.UInt32,IFW1GlyphSheet**)">
            <summary>Get a pointer to an IFW1GlyphSheet in the atlas.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="SheetIndex">The index of the sheet to be obtained.</param>
            <param name="ppGlyphSheet">Address of a pointer to an IFW1GlyphSheet.</param>
        </member>
        <member name="M:IFW1GlyphAtlas.GetSheetCount">
            <summary>Get the number of texture sheets in the atlas.</summary>
            <remarks />
            <returns>The number of sheets in the atlas.</returns>
        </member>
        <member name="M:IFW1GlyphAtlas.GetTotalGlyphCount">
            <summary>Get the total number of glyphs in all the atlas' sheets.</summary>
            <remarks />
            <returns>The total number of glyphs in the atlas.</returns>
        </member>
        <member name="M:IFW1GlyphAtlas.GetDevice(ID3D11Device**)">
            <summary>Get the ID3D11Device the atlas is created on.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="ppDevice">Address of a pointer to an ID3D11Device.</param>
        </member>
        <member name="T:IFW1GlyphAtlas">
            <summary>A glyph-atlas is a collection of glyph-sheets.</summary>
            <remarks />
        </member>
        <member name="M:IFW1GlyphSheet.Flush(ID3D11DeviceContext*)">
            <summary>Flush any new glyphs to the internal D3D11 buffers.</summary>
            <remarks>When glyphs are inserted into the sheet only the CPU-memory resources are updated.
In order for these to be available for use by the GPU, they must be flushed to the device using a device-context.</remarks>
            <returns>No return value.</returns>
            <param name="pContext">The context to use when updating device resources.</param>
        </member>
        <member name="M:IFW1GlyphSheet.CloseSheet">
            <summary>Close the sheet for additional glyphs.</summary>
            <remarks>After calling this method any subsequent attempts to insert new glyphs into the sheet will fail.
Calling this method can save some memory as the RAM copy of the texture can be released after the next call to IFW1GlyphSheet::Flush.</remarks>
            <returns>No return value.</returns>
        </member>
        <member name="M:IFW1GlyphSheet.InsertGlyph(FW1_GLYPHMETRICS!System.Runtime.CompilerServices.IsConst*,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32)">
            <summary>Insert a glyph into the sheet.</summary>
            <remarks>The parameters for this method can be obtained as part of the FW1_GLYPHIMAGEDATA structure filled in by the IFW1DWriteRenderTarget::DrawGlyphTemp method.</remarks>
            <returns>If the glyph is inserted, the index of the new glyph in the sheet is returned. This index can be used to get the glyph's coordinates from the sheet coord buffer. See IFW1GlyphSheet::GetCoordBuffer and IFW1GlyphSheet::GetGlyphCoords.<br />
If the method fails to insert the glyph, the returned value is 0xFFFFFFFF.</returns>
            <param name="pGlyphMetrics">A pointer to an FW1_GLYPHMETRICS structure, specifying the metrics of the glyph to be inserted.</param>
            <param name="pGlyphData">A pointer to image data.</param>
            <param name="RowPitch">The number of bytes in a row of image data.</param>
            <param name="PixelStride">The number of bytes between successive pixels.</param>
        </member>
        <member name="M:IFW1GlyphSheet.BindSheet(ID3D11DeviceContext*,System.UInt32)">
            <summary>Set the sheet shader resources on the provided context.</summary>
            <remarks>This method sets the sheet texture as a pixelshader resource for slot 0, and optionally the coord buffer as geometryshader resource for slot 0.</remarks>
            <returns>Standard HRESULT error code.</returns>
            <param name="pContext">The context to set the sheet shader resources on.</param>
            <param name="Flags">This parameter can include zero or more of the following values, ORd together. Any additional values are ignored.<br />
FW1_NOGEOMETRYSHADER: don't bind the coord buffer as a shader-resource for the geometry shader, even if it's available.
</param>
        </member>
        <member name="M:IFW1GlyphSheet.GetGlyphCoords">
            <summary>Get a sheet's coord-buffer, as an array of FW1_GLYPHCOORDS.</summary>
            <remarks>The returned buffer is valid for the lifetime of the sheet, and may only be read and never altered.
The maximum valid index at any given time is one less than the number of glyphs in the sheet, which can be queried using IFW1GlyphSheet::GetDesc.</remarks>
            <returns>Returns a constant pointer to the sheet's coord-buffer.</returns>
        </member>
        <member name="M:IFW1GlyphSheet.GetCoordBuffer(ID3D11ShaderResourceView**)">
            <summary>Get the ID3D11ShaderResourceView for the sheet's coord buffer.</summary>
            <remarks>The coord buffer contains 32 bytes per glyph, stored as two float4, representing the data in an FW1_GLYPHCOORDS structure.<br />
If the sheet is created without a hardware coord buffer, the method will return success and set the coord buffer to NULL.
See IFW1Factory::CreateGlyphSheet.</remarks>
            <returns>Standard HRESULT error code.</returns>
            <param name="ppCoordBufferSRV">Address of a pointer to an ID3D11ShaderResourceView.</param>
        </member>
        <member name="M:IFW1GlyphSheet.GetSheetTexture(ID3D11ShaderResourceView**)">
            <summary>Get the ID3D11ShaderResourceView for the sheet's texture.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="ppSheetTextureSRV">Address of a pointer to an ID3D11ShaderResourceView.</param>
        </member>
        <member name="M:IFW1GlyphSheet.GetDesc(FW1_GLYPHSHEETDESC*)">
            <summary>Get the properties of a glyph sheet.</summary>
            <remarks />
            <returns>Returns nothing.</returns>
            <param name="pDesc">Pointer to a sheet description.</param>
        </member>
        <member name="M:IFW1GlyphSheet.GetDevice(ID3D11Device**)">
            <summary>Get the ID3D11Device the sheet is created on.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="ppDevice">Address of a pointer to an ID3D11Device.</param>
        </member>
        <member name="T:IFW1GlyphSheet">
            <summary>A sheet contains a texture with glyph images, and a coord-buffer with an FW1_GLYPHCOORDS entry for each glyph.</summary>
        </member>
        <member name="M:IFW1Object.GetFactory(IFW1Factory**)">
            <summary>Get the factory that created an object.</summary>
            <remarks />
            <returns>Standard HRESULT error code.</returns>
            <param name="ppFactory">Address of a pointer to an IFW1Factory.</param>
        </member>
        <member name="T:IFW1Object">
            <summary>All FW1 interfaces (except for IFW1Factory) inherits from IFW1Object.</summary>
            <remarks>Since all interfaces inhert from IFW1Object, the factory which created an object can always be queried with its GetFactory method.</remarks>
        </member>
        <member name="F:FW1_FONTWRAPPERCREATEPARAMS.DefaultFontParams">
            <summary>Description of the default font. See FW1_DWRITEFONTPARAMS.</summary>
        </member>
        <member name="F:FW1_FONTWRAPPERCREATEPARAMS.VertexBufferSize">
            <summary>The size in bytes of the dynamic vertex buffer to upload glyph vertices to when drawing a string. 0 defaults to 4096 * 16.<br />
Each glyph vertex is either 16 or 20 bytes in size, and each glyph requires either 1 or 4 vertices depending on if the geometry shader is used.</summary>
        </member>
        <member name="F:FW1_FONTWRAPPERCREATEPARAMS.DisableGeometryShader">
            <summary>If set to TRUE, no geometry shader is used.</summary>
        </member>
        <member name="F:FW1_FONTWRAPPERCREATEPARAMS.MaxGlyphHeight">
            <summary>The maximum height of a single glyph.
This value is used to decide how large the DirectWrite render target needs to be, which is used when drawing glyph images to put in the atlas.
0 defaults to 384.</summary>
        </member>
        <member name="F:FW1_FONTWRAPPERCREATEPARAMS.MaxGlyphWidth">
            <summary>The maximum width of a single glyph.
This value is used to decide how large the DirectWrite render target needs to be, which is used when drawing glyph images to put in the atlas.
0 defaults to 384.</summary>
        </member>
        <member name="F:FW1_FONTWRAPPERCREATEPARAMS.AnisotropicFiltering">
            <summary>If set to TRUE, the sampler-state is created with anisotropic filtering.</summary>
        </member>
        <member name="F:FW1_FONTWRAPPERCREATEPARAMS.SheetMipLevels">
            <summary>The number of mip-levels for the glyph sheet textures. 0 defaults to 1.</summary>
        </member>
        <member name="F:FW1_FONTWRAPPERCREATEPARAMS.MaxGlyphCountPerSheet">
            <summary>The maximum number of glyphs per texture. A buffer of <i>MaxGlyphCountPerSheet * 32</i> bytes is preallocated for each sheet. 0 defaults to 2048.</summary>
        </member>
        <member name="F:FW1_FONTWRAPPERCREATEPARAMS.GlyphSheetHeight">
            <summary>The height of the glyph sheet textures to store glyph images in. 0 defaults to 512.</summary>
        </member>
        <member name="F:FW1_FONTWRAPPERCREATEPARAMS.GlyphSheetWidth">
            <summary>The width of the glyph sheet textures to store glyph images in. 0 defaults to 512.</summary>
        </member>
        <member name="T:FW1_FONTWRAPPERCREATEPARAMS">
            <summary>The FW1_FONTWRAPPERCREATEPARAMS is used with the IFW1Factory::CreateFontWrapper method, and describes settings for the created IFW1FontWrapper object.</summary>
            <remarks>If a member has the value zero, the default value will be chosen instead. See FW1_DWRITEFONTPARAMS for requirements for its members.</remarks>
        </member>
        <member name="F:FW1_DWRITEFONTPARAMS.pszLocale">
            <summary>The locale. NULL for default.</summary>
        </member>
        <member name="F:FW1_DWRITEFONTPARAMS.FontStretch">
            <summary>The font stretch. See DirectWrite documentation.</summary>
        </member>
        <member name="F:FW1_DWRITEFONTPARAMS.FontStyle">
            <summary>The font style. See DirectWrite documentation.</summary>
        </member>
        <member name="F:FW1_DWRITEFONTPARAMS.FontWeight">
            <summary>The font weight. See DirectWrite documentation.</summary>
        </member>
        <member name="F:FW1_DWRITEFONTPARAMS.pszFontFamily">
            <summary>The name of the font-family. Valid values include <i>Arial</i>, <i>Courier New</i>, etc. as long as the specified font is installed.
Unavailable fonts will automatically fall back to a different font.
This member can be set to NULL, if no default font is desired when using the structure to create a font-wrapper.</summary>
        </member>
        <member name="T:FW1_DWRITEFONTPARAMS">
            <summary>Describes a single font. This structure is used in the FW1_FONTWRAPPERCREATEPARAMS structure.</summary>
            <remarks>If pszFontFamily is NULL when creating an IFW1FontWrapper object, no default font will be set up.
This is perfectly valid when drawing text using one of the DrawTextLayout methods.
However, the DrawString methods will silently fail if no default font is set up.<br />
If pszFontFamily is not NULL, the FontWeight, FontStyle and FontStretch members must be set to valid values according to the DirectWrite documentation.
Zero is not a valid value for these.</remarks>
        </member>
        <member name="F:FW1_RECTF.Bottom">
            <summary>The Y coordinate of the bottom edge of the rectangle.</summary>
        </member>
        <member name="F:FW1_RECTF.Right">
            <summary>The X coordinate of the right edge of the rectangle.</summary>
        </member>
        <member name="F:FW1_RECTF.Top">
            <summary>The Y coordinate of the top edge of the rectangle.</summary>
        </member>
        <member name="F:FW1_RECTF.Left">
            <summary>The X coordinate of the left edge of the rectangle.</summary>
        </member>
        <member name="T:FW1_RECTF">
            <summary>A rectangle.</summary>
            <remarks />
        </member>
        <member name="F:FW1_VERTEXDATA.pVertices">
            <summary>An array of <i>TotalVertexCount</i> vertices, sorted by sheet.</summary>
        </member>
        <member name="F:FW1_VERTEXDATA.TotalVertexCount">
            <summary>The total number of vertices.</summary>
        </member>
        <member name="F:FW1_VERTEXDATA.pVertexCounts">
            <summary>An array of <i>SheetCount</i> unsigned integers, which specify the number of glyphs using each sheet.
The sum of all counts is <i>TotalVertexCount</i>. Some counts may be zero.</summary>
        </member>
        <member name="F:FW1_VERTEXDATA.SheetCount">
            <summary>The number of sheets in the glyph-atlas that are used, starting with the first sheet in the atlas.</summary>
        </member>
        <member name="T:FW1_VERTEXDATA">
            <summary>An array of vertices, sorted by glyph-sheet.</summary>
            <remarks>This structure is returned by the IFW1TextGeometry::GetGlyphVerticesTemp Method.</remarks>
        </member>
        <member name="F:FW1_GLYPHVERTEX.GlyphColor">
            <summary>The color of the glyph, as 0xAaBbGgRr.</summary>
        </member>
        <member name="F:FW1_GLYPHVERTEX.GlyphIndex">
            <summary>The index of the glyph.</summary>
        </member>
        <member name="F:FW1_GLYPHVERTEX.PositionY">
            <summary>The base Y position of the glyph.</summary>
        </member>
        <member name="F:FW1_GLYPHVERTEX.PositionX">
            <summary>The base X position of the glyph.</summary>
        </member>
        <member name="T:FW1_GLYPHVERTEX">
            <summary>A vertex corresponding to a single glyph.</summary>
            <remarks>When an IFW1TextRenderer draws a string, each output glyph is converted to an FW1_GLYPHVERTEX entry in an IFW1TextGeometry object.</remarks>
        </member>
        <member name="F:FW1_GLYPHIMAGEDATA.PixelStride">
            <summary>The number of bytes between the start of one pixel and the next.</summary>
        </member>
        <member name="F:FW1_GLYPHIMAGEDATA.RowPitch">
            <summary>The number of bytes in a row of the image data.</summary>
        </member>
        <member name="F:FW1_GLYPHIMAGEDATA.pGlyphPixels">
            <summary>Pointer to the pixels of the glyph-image.</summary>
        </member>
        <member name="F:FW1_GLYPHIMAGEDATA.Metrics">
            <summary>Metrics for the glyph.</summary>
        </member>
        <member name="T:FW1_GLYPHIMAGEDATA">
            <summary>Image data for a glyph.</summary>
            <remarks>This structure is filled by the IFW1DWriteRenderTarget::DrawGlyphTemp Method.</remarks>
        </member>
        <member name="F:FW1_GLYPHMETRICS.Height">
            <summary>The height of the glyph image, in pixels.</summary>
        </member>
        <member name="F:FW1_GLYPHMETRICS.Width">
            <summary>The width of the glyph image, in pixels.</summary>
        </member>
        <member name="F:FW1_GLYPHMETRICS.OffsetY">
            <summary>The vertical offset form a glyph's position in text to the top edge of its image.</summary>
        </member>
        <member name="F:FW1_GLYPHMETRICS.OffsetX">
            <summary>The horizontal offset from a glyph's position in text to the left edge of its image.</summary>
        </member>
        <member name="T:FW1_GLYPHMETRICS">
            <summary>Metrics for a glyph image.</summary>
            <remarks>This structure is filled in as part of the FW1_GLYPHIMAGEDATA structure when a glyph-image is rendered by IFW1DWriteRenderTarget::DrawGlyphTemp.</remarks>
        </member>
        <member name="F:FW1_GLYPHSHEETDESC.MipLevels">
            <summary>The number of mip-levels for this sheet's texture.</summary>
        </member>
        <member name="F:FW1_GLYPHSHEETDESC.Height">
            <summary>The height of this sheet's texture, in pixels.</summary>
        </member>
        <member name="F:FW1_GLYPHSHEETDESC.Width">
            <summary>The width of this sheet's texture, in pixels.</summary>
        </member>
        <member name="F:FW1_GLYPHSHEETDESC.GlyphCount">
            <summary>The number of glyphs currently stored in this sheet.</summary>
        </member>
        <member name="T:FW1_GLYPHSHEETDESC">
            <summary>Description of a glyph sheet.</summary>
            <remarks />
        </member>
        <member name="F:FW1_GLYPHCOORDS.PositionBottom">
            <summary>The offset of the bottom edge of the glyph image, relative its offset in the text.</summary>
        </member>
        <member name="F:FW1_GLYPHCOORDS.PositionRight">
            <summary>The offset of the right edge of the glyph image, relative its offset in the text.</summary>
        </member>
        <member name="F:FW1_GLYPHCOORDS.PositionTop">
            <summary>The offset of the top edge of the glyph image, relative its offset in the text.</summary>
        </member>
        <member name="F:FW1_GLYPHCOORDS.PositionLeft">
            <summary>The offset of the left edge of the glyph image, relative its offset in the text.</summary>
        </member>
        <member name="F:FW1_GLYPHCOORDS.TexCoordBottom">
            <summary>The bottom texture coordinate.</summary>
        </member>
        <member name="F:FW1_GLYPHCOORDS.TexCoordRight">
            <summary>The right texture coordinate.</summary>
        </member>
        <member name="F:FW1_GLYPHCOORDS.TexCoordTop">
            <summary>The top texture coordinate.</summary>
        </member>
        <member name="F:FW1_GLYPHCOORDS.TexCoordLeft">
            <summary>The left texture coordinate.</summary>
        </member>
        <member name="T:FW1_GLYPHCOORDS">
            <summary>Coordinates for a single glyph in the atlas.</summary>
            <remarks>Each glyph image inserted in a glyph sheet texture gets a unique index in that sheet, and a corresponding FW1_GLYPHCOORDS entry in the sheet's coord buffer, describing its location in the sheet as well as its dimensions.</remarks>
        </member>
        <member name="T:FW1_TEXT_FLAG">
            <summary>The current FW1 version.</summary>
            <remarks>This constant should be used when calling FW1CreateFactory to make sure the library version matches the headers.</remarks>
            <summary>Describes overrides for how an FW1 operation is performed.</summary>
            <remarks>These flags can be used for any FW1 methods that take a flags parameter. Not all flags have any meaning for all methods however.
Consult the documentation page for a particular method for information on what flags are valid.</remarks>
        </member>
        <member name="F:FW1_UNUSED">
            <summary>Don't use.</summary>
        </member>
        <member name="F:FW1_ANALYZEONLY">
            <summary>A text-layout will be run through DirectWrite and new fonts will be prepared, but no actual drawing will take place, and no additional glyphs will be cached.</summary>
        </member>
        <member name="F:FW1_NONEWGLYPHS">
            <summary>No new glyphs will be added to the atlas or glyph-maps. Any glyphs not already present in the atlas will be replaced with a default fall-back glyph (empty box).</summary>
        </member>
        <member name="F:FW1_CACHEONLY">
            <summary>Any new glyphs will be cached in the atlas and glyph-maps, but no geometry is drawn.</summary>
        </member>
        <member name="F:FW1_NOFLUSH">
            <summary>Any new glyphs added during a call are not flushed to the device-resources.
It is a good idea to use this flag for text-operations on deferred contexts, when drawing text on multiple threads simultaneously, in order to guarantee the proper order of operations.</summary>
        </member>
        <member name="F:FW1_RESTORESTATE">
            <summary>When a draw method returns, the device-context will have been restored to the same state as before the call.</summary>
        </member>
        <member name="F:FW1_IMMEDIATECALL">
            <summary>Can be used as an optimization on subsequent calls, when drawing several strings with the same settings.</summary>
        </member>
        <member name="F:FW1_STATEPREPARED">
            <summary>The correct shaders/constant-buffer etc. are assumed to already be bound. Can be used as an optimization when a previous call has already set the states, or to override the default states.</summary>
        </member>
        <member name="F:FW1_BUFFERSPREPARED">
            <summary>The internal vertex and index buffer (if used) are assumed to already be bound. Can be used as an optimization when a previous call has already set the buffers.</summary>
        </member>
        <member name="F:FW1_CONSTANTSPREPARED">
            <summary>The transform matrix and the clip-rect is not updated in the internal constant-buffer. Can be used as an optimization when a previous call has already set the correct data.</summary>
        </member>
        <member name="F:FW1_NOGEOMETRYSHADER">
            <summary>No geometry shader is used when drawing glyphs. Indexed quads are constructed on the CPU instead of in the geometry shader.</summary>
        </member>
        <member name="F:FW1_CLIPRECT">
            <summary>If a clip-rect is specified together with this flag, all text is clipped to inside the specified rectangle.</summary>
        </member>
        <member name="F:FW1_ALIASED">
            <summary>Text is drawn without anti-aliasing.</summary>
        </member>
        <member name="F:FW1_NOWORDWRAP">
            <summary>No automatic wrapping when the text overflows the layout-box.</summary>
        </member>
        <member name="F:FW1_BOTTOM">
            <summary>Text is aligned at the bottom of the layout-box.</summary>
        </member>
        <member name="F:FW1_VCENTER">
            <summary>Text is centered vertically.</summary>
        </member>
        <member name="F:FW1_TOP">
            <summary>Text is aligned at the top of the layout-box. This is the default.</summary>
        </member>
        <member name="F:FW1_RIGHT">
            <summary>Text is right-aligned.</summary>
        </member>
        <member name="F:FW1_CENTER">
            <summary>Text is centered horizontally.</summary>
        </member>
        <member name="F:FW1_LEFT">
            <summary>Text is left-aligned. This is the default.</summary>
        </member>
        <member name="P:Rage.Plugin.Name">
            <summary>
Gets the name of this plugin. This property is safe to call.
</summary>
        </member>
        <member name="M:RagePluginHook.ExecuteCodeForm.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="M:RagePluginHook.ExecuteCodeForm.Dispose">
            <summary>
Clean up any resources being used.
</summary>
        </member>
        <member name="F:RagePluginHook.ExecuteCodeForm.codeName">
            <summary>
Required designer variable.
</summary>
        </member>
        <member name="T:RagePluginHook.ExecuteCodeForm">
            <summary>
Summary for ExecuteCodeForm
</summary>
        </member>
        <member name="M:RagePluginHook.InputBoxForm.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="F:RagePluginHook.InputBoxForm.components">
            <summary>
Required designer variable.
</summary>
        </member>
        <member name="M:RagePluginHook.InputBoxForm.Dispose">
            <summary>
Clean up any resources being used.
</summary>
        </member>
        <member name="T:RagePluginHook.InputBoxForm">
            <summary>
Summary for InputBoxForm
</summary>
        </member>
        <member name="T:Using">
 The following macros are to allow a C# style using block.

 USING_START(objectToUse)
 {
     // Code goes here.
 } USING_END;

<summary><para>Helper class for disposing objects.</para><para>Don't make it a reference (Using^) as that'll make the finalization non-deterministic.</para></summary></member>
        <member name="M:Rage.Forms.GwenForm.Show">
            <summary>
Queues this form to be shown on the next tick.
</summary>
        </member>
        <member name="M:Rage.Forms.GwenForm.InitializeLayout">
            <summary>
When overriden in a derived class, initializes the layout of this form.
</summary>
        </member>
        <member name="M:Rage.GameConsole.AddConsoleVariables(Rage.Plugin,System.Object)">
            <summary>
Adds all methods with <see cref="T:Rage.Attributes.ConsoleVariableAttribute" />s specified from the specified source as console variables to this console.
</summary>
            <param name="plugin">The plugin this console variable belongs to; <c>null</c> if part of the hook.</param>
            <param name="source">The object to add console variables from. Cannot be <c>null</c>.</param>
        </member>
        <member name="M:Rage.GameConsole.AddConsoleVariable(Rage.Plugin,System.Object,System.Reflection.PropertyInfo)">
            <summary>
Adds a new console variable to this console.
</summary>
            <param name="plugin">The plugin this console variable belongs to; <c>null</c> if part of the hook.</param>
            <param name="source">The object the property belongs to; <c>null</c> if the property is static.</param>
            <param name="property">The property that represents the console variable. If no <see cref="T:Rage.Attributes.ConsoleVariableAttribute" /> is specified on the property, the name of the console variable will be derived from the property name. If the method name starts with "Variable_" this prefix will not be used in the console variable name.</param>
        </member>
        <member name="M:Rage.GameConsole.AddConsoleVariable(Rage.ConsoleCommands.ConsoleVariable)">
            <summary>
Adds a new console variable to this console.
</summary>
            <param name="consoleVariable">An instance of <see cref="T:Rage.ConsoleCommands.ConsoleVariable" /> to add.</param>
        </member>
        <member name="M:Rage.GameConsole.AddConsoleCommands(Rage.Plugin,System.Object)">
            <summary>
Adds all methods with <see cref="!:Rage::Attributes::ConsoleCommandAttriute" />s specified from the specified source as console commands to this console.
</summary>
            <param name="plugin">The plugin this console command belongs to; <c>null</c> if part of the hook.</param>
            <param name="source">The object to add console commands from. Cannot be <c>null</c>.</param>
        </member>
        <member name="M:Rage.GameConsole.AddConsoleCommand(Rage.Plugin,System.Object,System.Reflection.MethodInfo)">
            <summary>
Adds a new console command to this console.
</summary>
            <param name="plugin">The plugin this console command belongs to; <c>null</c> if part of the hook.</param>
            <param name="source">The object the method belongs to; <c>null</c> if the method is static.</param>
            <param name="method">The method that represents the console command. If no <see cref="T:Rage.Attributes.ConsoleCommandAttribute" /> is specified on the method, the name of the console command will be derived from the method name. If the method name starts with "Command_" this prefix will not be used in the console command name.</param>
        </member>
        <member name="M:Rage.GameConsole.AddConsoleCommand(Rage.ConsoleCommands.ConsoleCommand)">
            <summary>
Adds a new console command to this console.
</summary>
            <param name="consoleCommand">An instance of <see cref="T:Rage.ConsoleCommands.ConsoleCommand" /> to add.</param>
        </member>
        <member name="M:Rage.GameConsole.Command_Help">
 Note: Since GameConsole::Update() is called from HookManager::Tick(), and Update() in return eventually calls the console commands,
 calling natives is fine; however, keep in mind that we're not in a plugin, and thus content will be cached in an instance of ContentCache in the hook, not a plugin.

</member>
        <member name="M:Rage.GameConsole.Print(System.String)">
            <summary>
Adds an entry with the specified text to the console output.
</summary>
            <param name="text">The text to add to the output of the console.</param>
        </member>
        <member name="M:Rage.GameConsole.Print">
            <summary>
Adds an empty entry to the console output.
</summary>
        </member>
        <member name="P:Rage.GameConsole.IsOpen">
            <summary>
Gets a value indicating whether the console is open.
</summary>
            <value>
                <c>true</c> if the console is open; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Rage.GameConsole">
            <summary>
Provides access to the console of the hook.
</summary>
        </member>
        <member name="T:Rage.ConsoleCommandExecutedEventArgs">
            <summary>
Provides data for the <see cref="!:ConsoleCommand::Executed" /> event
</summary>
        </member>
        <member name="P:Rage.GraphicsEventArgs.Graphics">
            <summary>
Gets the <see cref="P:Rage.GraphicsEventArgs.Graphics" /> object used for drawing on the screen.
</summary>
        </member>
        <member name="M:Rage.GraphicsEventArgs.#ctor(Rage.Graphics)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.GraphicsEventArgs" /> class.
</summary>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="T:Rage.GraphicsEventArgs">
            <summary>
Provides data for the <see cref="!:Game::FrameRender" /> event
</summary>
        </member>
        <member name="P:Rage.Attributes.ConsoleCommandParameterAttribute.NoAutoCompletion">
            <summary>
Gets or sets whether this parameter should have no automatic completion.
</summary>
            <value>Whether this parameter should have no automatic completion.</value>
        </member>
        <member name="P:Rage.Attributes.ConsoleCommandParameterAttribute.AutoCompleterType">
            <summary>
Gets or sets the type of the automatic completer.
</summary>
            <value>The type of the automatic completer.</value>
        </member>
        <member name="P:Rage.Attributes.ConsoleCommandParameterAttribute.Description">
            <summary>
Gets or sets the description of this parameter.
</summary>
        </member>
        <member name="P:Rage.Attributes.ConsoleCommandParameterAttribute.Name">
            <summary>
Gets or sets the name of this parameter.
</summary>
        </member>
        <member name="M:Rage.Attributes.ConsoleCommandParameterAttribute.#ctor(System.String)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Attributes.ConsoleCommandAttribute" /> class.
</summary>
            <param name="description">The description of the console command.</param>
        </member>
        <member name="M:Rage.Attributes.ConsoleCommandParameterAttribute.#ctor">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Attributes.ConsoleCommandAttribute" /> class.
</summary>
        </member>
        <member name="T:Rage.Attributes.ConsoleCommandParameterAttribute">
            <summary>
Attribute to describe parameters of console commands.
</summary>
        </member>
        <member name="P:Rage.Attributes.ConsoleVariableAttribute.Transient">
            <summary>
Gets or sets whether this variable should be excluded from being saved to the .ini file.
</summary>
        </member>
        <member name="P:Rage.Attributes.ConsoleVariableAttribute.Hidden">
            <summary>
Gets or sets whether this variable should be excluded from auto-completion.
</summary>
        </member>
        <member name="P:Rage.Attributes.ConsoleVariableAttribute.InitializedDelayed">
            <summary>
Gets or sets a value indicating whether this variable should be initialized delayed (i.e. when the script thread first ticks) or not.
</summary>
        </member>
        <member name="P:Rage.Attributes.ConsoleVariableAttribute.Description">
            <summary>
Gets or sets the description of this console variable.
</summary>
        </member>
        <member name="P:Rage.Attributes.ConsoleVariableAttribute.Name">
            <summary>
Gets or sets the name of this console variable.
</summary>
        </member>
        <member name="M:Rage.Attributes.ConsoleVariableAttribute.#ctor(System.String)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Attributes.ConsoleVariableAttribute" /> class.
</summary>
            <param name="description">The description of the console variable.</param>
        </member>
        <member name="M:Rage.Attributes.ConsoleVariableAttribute.#ctor">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Attributes.ConsoleVariableAttribute" /> class.
</summary>
        </member>
        <member name="M:Rage.Attributes.ConsoleVariableAttribute.#ctor(System.Boolean)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Attributes.ConsoleVariableAttribute" /> class.
</summary>
            <param name="initializeDelayed">Whether or not the console variable should be initialized right when starting the hook.</param>
        </member>
        <member name="P:Rage.Attributes.ConsoleCommandAttribute.Description">
            <summary>
Gets or sets the description of this console command.
</summary>
        </member>
        <member name="P:Rage.Attributes.ConsoleCommandAttribute.Name">
            <summary>
Gets or sets the name of this console command.
</summary>
        </member>
        <member name="M:Rage.Attributes.ConsoleCommandAttribute.#ctor(System.String)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Attributes.ConsoleCommandAttribute" /> class.
</summary>
            <param name="description">The description of the console command.</param>
        </member>
        <member name="M:Rage.Attributes.ConsoleCommandAttribute.#ctor">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Attributes.ConsoleCommandAttribute" /> class.
</summary>
        </member>
        <member name="M:Rage.Native.NativeFunction.GetOriginalNativeName(System.String)">
            <summary>
Converts the specified name into its native naming style counter part.
</summary>
            <param name="niceName">The name of the native in pascal case. Eg. GetGroundZFor3dCoord.</param>
            <returns>A <see cref="T:System.String" /> representing the original name of the native.</returns>
            <example>
                <code>GetOriginalNativeName("GetGroundZFor3dCoord");</code>
Will return "GET_GROUND_Z_FOR_3D_COORD".
</example>
        </member>
        <member name="P:Rage.Attributes.PluginAttribute.PrefersSingleInstance">
            <summary>
                <para>Gets or sets a value indicating whether this plugin prefers to only have one instance of itself loaded at any given time.</para>
                <para>If <c>true</c> the plugin can still be loaded multiple times, but requires the force parameter of the LoadPlugin command to be set to true.</para>
            </summary>
            <value>The support URL.</value>
        </member>
        <member name="P:Rage.Attributes.PluginAttribute.SupportUrl">
            <summary>
Gets or sets the support URL for this plugin. If specified, this URL will be presented to the user if the plugin crashes (Or if the game crashes while the plugin was ticking).
</summary>
            <value>The support URL.</value>
        </member>
        <member name="P:Rage.Attributes.PluginAttribute.DefaultObjectType">
            <summary>
Gets or sets the full name of the default type that will be used to represent objects. The type must inherit from <see cref="!:Rage::Object" />. If <c>null</c>, <see cref="!:Rage::Object" /> will be used.
</summary>
            <value>The full name of the default type that will be used to represent vehicles. The type must inherit from <see cref="!:Rage::Object" />. If <c>null</c>, <see cref="!:Rage::Object" /> will be used..</value>
        </member>
        <member name="P:Rage.Attributes.PluginAttribute.DefaultVehicleType">
            <summary>
Gets or sets the full name of the default type that will be used to represent vehicles. The type must inherit from <see cref="T:Rage.Vehicle" />. If <c>null</c>, <see cref="T:Rage.Vehicle" /> will be used.
</summary>
            <value>The full name of the default type that will be used to represent vehicles. The type must inherit from <see cref="T:Rage.Vehicle" />. If <c>null</c>, <see cref="T:Rage.Vehicle" /> will be used..</value>
        </member>
        <member name="P:Rage.Attributes.PluginAttribute.DefaultPedType">
            <summary>
Gets or sets the full name of the default type that will be used to represent peds. The type must inherit from <see cref="T:Rage.Ped" />. If <c>null</c>, <see cref="T:Rage.Ped" /> will be used.
</summary>
            <value>The full name of the default type that will be used to represent peds. The type must inherit from <see cref="T:Rage.Ped" />. If <c>null</c>, <see cref="T:Rage.Ped" /> will be used..</value>
        </member>
        <member name="P:Rage.Attributes.PluginAttribute.EntryPoint">
            <summary>
Gets or sets the full name of the method to serve as entry point of the plugin (Eg. "EntryPoint.Main". If <c>null</c>, the first found method that's static, returns void and is named "Main" will be used.
</summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Rage.Attributes.PluginAttribute.Author">
            <summary>
Gets or sets the author of the plugin.
</summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Rage.Attributes.PluginAttribute.Description">
            <summary>
Gets or sets the description of the plugin.
</summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Rage.Attributes.PluginAttribute.Name">
            <summary>
Gets or sets the name of the plugin.
</summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Rage.Attributes.PluginAttribute.#ctor(System.String)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Attributes.PluginAttribute" /> class.
</summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="name" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="T:Rage.Attributes.PluginAttribute">
            <summary>
Provides details about a plugin to the RAGE Plugin Hook. This assembly attribute is required for all plugins.
</summary>
        </member>
        <member name="M:Rage.MathHelper.IsPowerOfTwo(System.UInt64)">
            <summary>
Determines whether the specified number is a power of two.
</summary>
            <param name="number">The number to check.</param>
            <returns>Returns <c>true</c> if the specified number is a power of two; otherwise, returns <c>false</c>.</returns>
        </member>
        <member name="M:Rage.MathHelper.IsZeroOrPowerOfTwo(System.UInt64)">
            <summary>
Determines whether the specified number is zero or a power of two.
</summary>
            <param name="number">The number to check.</param>
            <returns>Returns <c>true</c> if the specified number is zero or a power of two; otherwise, returns <c>false</c>.</returns>
        </member>
        <member name="M:Rage.MathHelper.ConvertDegreesToRadians(System.Single)">
            <summary>
Converts the specified angle in degrees to its equivalent in radians.
</summary>
            <param name="degrees">The angle in degrees to convert.</param>
            <returns>A <see cref="T:System.Single" /> representing the angle in radians.</returns>
        </member>
        <member name="M:Rage.MathHelper.ConvertRadiansToDegrees(System.Double)">
            <summary>
Converts the specified angle in radians to its equivalent in degrees.
</summary>
            <param name="radians">The angle in radians to convert.</param>
            <returns>A <see cref="T:System.Single" /> representing the angle in degrees.</returns>
        </member>
        <member name="M:Rage.MathHelper.ConvertRadiansToDegrees(System.Single)">
            <summary>
Converts the specified angle in radians to its equivalent in degrees.
</summary>
            <param name="radians">The angle in radians to convert.</param>
            <returns>A <see cref="T:System.Single" /> representing the angle in degrees.</returns>
        </member>
        <member name="M:Rage.MathHelper.ConvertDirectionToHeading(Rage.Vector3)">
            <summary>
Converts the specified direction to a heading.
</summary>
            <remarks>Note that since a heading is horizontal, the pitch is lost.</remarks>
            <param name="direction">The direction to convert.</param>
            <returns>A <see cref="T:System.Single" /> representing the heading of the direction.</returns>
        </member>
        <member name="M:Rage.MathHelper.ConvertHeadingToDirection(System.Single)">
            <summary>
Converts the specified heading to its equivalent direction.
</summary>
            <param name="heading">The heading to convert.</param>
            <returns>A <see cref="T:Rage.Vector3" /> representing the direction of the heading.</returns>
        </member>
        <member name="M:Rage.MathHelper.ConvertMetersPerSecondToKilometersPerHourRounded(System.Single)">
            <summary>
Converts the specified value from meters per second to kilometers per hour and rounds the result.
</summary>
            <param name="metersPerSecond">The value, in meters per second.</param>
            <example>
                <para>The following example converts 13.8889 m/s to km/h, rounded, and shows it in a notification.</para>
                <code>int kilometersPerHourRounded = MathHelper.ConvertMetersPerSecondToKilometersPerHourRounded(13.8889f);
Game.DisplayNotification("13.8889 m/s is ~" + kilometersPerHourRounded.ToString() + " km/h.");</code>
            </example>
            <returns>A <see cref="T:System.Single" /> representing the value in kilometers per hour.</returns>
        </member>
        <member name="M:Rage.MathHelper.ConvertMilesPerHourToKilometersPerHour(System.Single)">
            <summary>
Converts the specified value from miles per hour to kilometers per hour.
</summary>
            <param name="milesPerHour">The value, in miles per hour.</param>
            <example>
                <para>The following example converts 31.0686 mph to km/h, and shows it in a notification.</para>
                <code>float kilometersPerHour = MathHelper.ConvertMilesPerHourToKilometersPerHour(31.0686f);
Game.DisplayNotification("31.0686 mph is " + kilometersPerHour.ToString() + " km/h.");</code>
            </example>
            <returns>A <see cref="T:System.Single" /> representing the value in miles per hour.</returns>
        </member>
        <member name="M:Rage.MathHelper.ConvertKilometersPerHourToMilesPerHour(System.Single)">
            <summary>
Converts the specified value from kilometers per hour to miles per hour.
</summary>
            <param name="kilometersPerHour">The value, in kilometers per hour.</param>
            <example>
                <para>The following example converts 50 km/h to mph, and shows it in a notification.</para>
                <code>float milesPerHour = MathHelper.ConvertKilometersPerHourToMilesPerHour(50f);
Game.DisplayNotification("50 km/h is " + milesPerHour.ToString() + " mph.");</code>
            </example>
            <returns>A <see cref="T:System.Single" /> representing the value in miles per hour.</returns>
        </member>
        <member name="M:Rage.MathHelper.ConvertMilesPerHourToMetersPerSecond(System.Single)">
            <summary>
Converts the specified value from miles per hour to meters per second.
</summary>
            <param name="milesPerHour">The value, in miles per hour.</param>
            <returns>A <see cref="T:System.Single" /> representing the value in meters per second.</returns>
        </member>
        <member name="M:Rage.MathHelper.ConvertMetersPerSecondToMilesPerHour(System.Single)">
            <summary>
Converts the specified value from meters per second to miles per hour.
</summary>
            <param name="metersPerSecond">The value, in meters per second.</param>
            <returns>A <see cref="T:System.Single" /> representing the value in miles per hour.</returns>
        </member>
        <member name="M:Rage.MathHelper.ConvertMetersPerSecondToKilometersPerHour(System.Single)">
            <summary>
Converts the specified value from meters per second to kilometers per hour.
</summary>
            <param name="metersPerSecond">The value, in meters per second.</param>
            <example>
                <para>The following example converts 13.8889 m/s to km/h, and shows it in a notification.</para>
                <code>float kilometersPerHour = MathHelper.ConvertMetersPerSecondToKilometersPerHour(13.8889f);
Game.DisplayNotification("13.8889 m/s is " + kilometersPerHour.ToString() + " km/h.");</code>
            </example>
            <returns>A <see cref="T:System.Single" /> representing the value in kilometers per hour.</returns>
        </member>
        <member name="M:Rage.MathHelper.ConvertKilometersPerHourToMetersPerSecond(System.Single)">
            <summary>
Converts the specified value from kilometers per hour to meters per second.
</summary>
            <param name="kilometersPerHour">The value, in kilometers per hour.</param>
            <example>
                <para>The following example converts 50 km/h to m/s, and shows it in a notification.</para>
                <code>float metersPerSecond = MathHelper.KilometersPerHourToMetersPerSecond(50f);
Game.DisplayNotification("50 km/h is " + metersPerSecond.ToString() + " m/s.");</code>
            </example>
            <returns>A <see cref="T:System.Single" /> representing the value in meters per second.</returns>
        </member>
        <member name="M:Rage.MathHelper.GetChance(System.Int32,System.Int32)">
            <summary>
Gets a chance.
</summary>
            <param name="odds">The odds.</param>
            <param name="seed">The seed.</param>
            <returns>Returns true one out of <paramref name="odds" /> times.</returns>
        </member>
        <member name="M:Rage.MathHelper.GetChance(System.Int32)">
            <summary>
Gets a chance.
</summary>
            <param name="odds">The odds.</param>
            <returns>Returns true one out of <paramref name="odds" /> times.</returns>
        </member>
        <member name="M:Rage.MathHelper.GetRandomAlphaNumericCharacter">
            <summary>
Gets a random alpha numeric character.
</summary>
            <returns>A random character.</returns>
        </member>
        <member name="M:Rage.MathHelper.RoundToLowerTenth(System.Int32)">
            <summary>
Rounds the specified integer to the nearest lower tenth.
</summary>
            <param name="value">The value to round.</param>
            <returns>The rounded integer.</returns>
        </member>
        <member name="M:Rage.MathHelper.RoundToLowerTenth(System.Single)">
            <summary>
Rounds the specified float to the nearest lower tenth integer.
</summary>
            <param name="value">The value to round.</param>
            <returns>The rounded integer.</returns>
        </member>
        <member name="M:Rage.MathHelper.UnLerp(System.Double,System.Double,System.Double)">
            <summary>
Gets the original percentage provided to Lerp, given the start, end and lerped value.
</summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="lerpedValue">The lerped value.</param>
            <returns>The lerp percentage.</returns>
        </member>
        <member name="M:Rage.MathHelper.UnLerp(System.Single,System.Single,System.Single)">
            <summary>
Gets the original percentage provided to Lerp, given the start, end and lerped value.
</summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="lerpedValue">The lerped value.</param>
            <returns>The lerp percentage.</returns>
        </member>
        <member name="M:Rage.MathHelper.UnLerp(System.Int64,System.Int64,System.Int64)">
            <summary>
Gets the original percentage provided to Lerp, given the start, end and lerped value.
</summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="lerpedValue">The lerped value.</param>
            <returns>The lerp percentage.</returns>
        </member>
        <member name="M:Rage.MathHelper.UnLerp(System.Int32,System.Int32,System.Int32)">
            <summary>
Gets the original percentage provided to Lerp, given the start, end and lerped value.
</summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="lerpedValue">The lerped value.</param>
            <returns>The lerp percentage.</returns>
        </member>
        <member name="M:Rage.MathHelper.Lerp(System.Double,System.Double,System.Single)">
            <summary>
Gets a new value between the specified start and end values, designated by the percentage.
</summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="percent">The percent.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:Rage.MathHelper.Lerp(System.Single,System.Single,System.Single)">
            <summary>
Gets a new value between the specified start and end values, designated by the percentage.
</summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="percent">The percent.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:Rage.MathHelper.Lerp(System.Int64,System.Int64,System.Single)">
            <summary>
Gets a new value between the specified start and end values, designated by the percentage.
</summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="percent">The percent.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:Rage.MathHelper.Lerp(System.Int32,System.Int32,System.Single)">
            <summary>
Gets a new value between the specified start and end values, designated by the percentage.
</summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="percent">The percent.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:Rage.MathHelper.Normalize(System.Single,System.Single,System.Single)">
            <summary>   
Normalizes the specified value.
</summary>
            <param name="value">The value to normalize.</param>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
            <returns>The normalized value.</returns>
        </member>
        <member name="M:Rage.MathHelper.NormalizeHeading(System.Single)">
            <summary>
Normalizes the specified heading.
</summary>
            <param name="heading">The heading to normalize.</param>
            <returns>The normalized heading.</returns>
        </member>
        <member name="M:Rage.MathHelper.RotateHeading(System.Single,System.Single)">
            <summary>
Rotates the specified heading the specified number of degrees, and returns the normalized result.
</summary>
            <param name="heading">The heading to base the rotation on.</param>
            <param name="degrees">The degrees to rotate.</param>
            <returns>The rotated and normalized heading.</returns>
        </member>
        <member name="M:Rage.MathHelper.Median``1(``0[])">
            <summary>
Gets the median from the specified values.
</summary>
            <typeparam name="T">The type of the values specified.</typeparam>
            <param name="values">The values to get the median from.</param>
            <returns>If the specified array has at least 1 value, returns the median; otherwise, returns the default value of <see cref="!:T" />.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="values" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Rage.MathHelper.Clamp``1(``0,``0,``0)">
            <summary>
Gets the specified value between the specified minimum and maximum values.
</summary>
            <typeparam name="T">The type of the values specified.</typeparam>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
            <returns>The resulting clamped value.</returns>
            <exception cref="!:System.ArgumentException">Thrown if <paramref name="minimum" /> is greater than <paramref name="maximum" />.</exception>
        </member>
        <member name="M:Rage.MathHelper.Faculty(System.Int32)">
            <summary>
Gets the faculty of the specified number.
</summary>
            <param name="number">The number.</param>
            <returns>The faculty of the specified number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the specified number is negative.</exception>
        </member>
        <member name="M:Rage.MathHelper.GetNumberLength(System.Int64)">
            <summary>
Gets the length of the specified number.
</summary>
            <param name="number">The number to get the length of.</param>
            <returns>The number of digits in the specified number.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the specified value is too small.</exception>
        </member>
        <member name="M:Rage.MathHelper.AreDigitsIdentical(System.Int64)">
            <summary>
Gets whether all digits in the specified number are identical.
</summary>
            <param name="number">The number to check.</param>
            <returns>If all digits in the specified number are identical, returns true; otherwise, false.</returns>
        </member>
        <member name="M:Rage.MathHelper.Choose``1(System.Collections.Generic.ICollection`1{``0})">
            <summary>
Gets a random object from the specified collection.
</summary>
            <typeparam name="T">The type of object to choose from.</typeparam>
            <param name="objects">The objects to choose from. If <c>null</c>, the default value of <typeparamref name="T" /> will be used.</param>
            <returns>A random object from the specified collection.</returns>
        </member>
        <member name="M:Rage.MathHelper.Choose``1(``0[])">
            <summary>
Gets a random object from the specified array.
</summary>
            <typeparam name="T">The type of object to choose from.</typeparam>
            <param name="objects">The objects to choose from. If <c>null</c>, the default value of <typeparamref name="T" /> will be used.</param>
            <returns>A random object from the specified array.</returns>
        </member>
        <member name="M:Rage.MathHelper.GetRandomInteger(System.Int32,System.Int32)">
            <summary>
Gets a random integer between the specified minimum and maximum value, inclusive.
</summary>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
            <returns>A random integer between minimum and maximum, inclusive.</returns>
        </member>
        <member name="M:Rage.MathHelper.GetRandomInteger(System.Int32)">
            <summary>
Gets a random integer between 0, inclusive, and the specified maximum value, exclusive.
</summary>
            <param name="maximum">The maximum value, exclusive.</param>
            <returns>A random integer between 0, inclusive, and the specified maximum value, exclusive.</returns>
        </member>
        <member name="M:Rage.MathHelper.GetRandomDouble(System.Double,System.Double)">
            <summary>
Gets a random double precision floating point number between the specified minimum and maximum value, inclusive.
</summary>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
            <returns>A random double precision floating point number between minimum and maximum, inclusive.</returns>
        </member>
        <member name="M:Rage.MathHelper.GetRandomSingle(System.Single,System.Single)">
            <summary>
Gets a random single precision floating point number between the specified minimum and maximum value, inclusive.
</summary>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
            <returns>A random single precision floating point number between minimum and maximum, inclusive.</returns>
        </member>
        <member name="T:Rage.MathHelper">
            <summary>
Static class with various functions for common conversions.
</summary>
        </member>
        <member name="M:Rage.Vector2.Equals(Rage.Vector2@,Rage.Vector2@)">
            <summary>
Determines whether the specified object instances are considered equal. 
</summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Vector2.Equals(Rage.Vector2)">
            <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Rage.Vector2.Equals(System.Object)">
            <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Rage.Vector2.GetHashCode">
            <summary>
Returns the hash code for this instance.
</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Rage.Vector2.ToString">
            <summary>
Converts the value of the object to its equivalent string representation.
</summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Rage.Vector2.op_Inequality(Rage.Vector2,Rage.Vector2)">
            <summary>
Tests for inequality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Vector2.op_Equality(Rage.Vector2,Rage.Vector2)">
            <summary>
Tests for equality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Vector2.op_Division(Rage.Vector2,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Rage.Vector2.op_Multiply(System.Single,Rage.Vector2)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Rage.Vector2.op_Multiply(Rage.Vector2,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Rage.Vector2.op_UnaryNegation(Rage.Vector2)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:Rage.Vector2.op_Subtraction(Rage.Vector2,Rage.Vector2)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector2.op_Addition(Rage.Vector2,Rage.Vector2)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector2.Maximize(Rage.Vector2@,Rage.Vector2@,Rage.Vector2@)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:Rage.Vector2.Maximize(Rage.Vector2,Rage.Vector2)">
            <summary>
Returns a vector containing the largest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:Rage.Vector2.Minimize(Rage.Vector2@,Rage.Vector2@,Rage.Vector2@)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:Rage.Vector2.Minimize(Rage.Vector2,Rage.Vector2)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:Rage.Vector2.TransformNormal(Rage.Vector2[],Rage.Matrix@)">
            <summary>
Performs a normal transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="normals">The normal vectors to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed normals.</returns>
        </member>
        <member name="M:Rage.Vector2.TransformNormal(Rage.Vector2@,Rage.Matrix@,Rage.Vector2@)">
            <summary>
Performs a normal transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
        </member>
        <member name="M:Rage.Vector2.TransformNormal(Rage.Vector2,Rage.Matrix)">
            <summary>
Performs a normal transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed normal.</returns>
        </member>
        <member name="M:Rage.Vector2.TransformCoordinate(Rage.Vector2[],Rage.Matrix@)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="coordinates">The coordinate vectors to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed coordinates.</returns>
        </member>
        <member name="M:Rage.Vector2.TransformCoordinate(Rage.Vector2@,Rage.Matrix@,Rage.Vector2@)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
        </member>
        <member name="M:Rage.Vector2.TransformCoordinate(Rage.Vector2,Rage.Matrix)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed coordinates.</returns>
        </member>
        <member name="M:Rage.Vector2.Transform(Rage.Vector2[],Rage.Quaternion@)">
            <summary>
Transforms an array of 2D vectors by the given <see cref="T:SlimDX.Quaternion" /> rotation.
</summary>
            <param name="vectors">The vectors to rotate.</param>
            <param name="rotation">The <see cref="T:SlimDX.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:SlimDX.Vector4" />.</returns>
        </member>
        <member name="M:Rage.Vector2.Transform(Rage.Vector2@,Rage.Quaternion@,Rage.Vector4@)">
            <summary>
Transforms a 2D vector by the given <see cref="T:SlimDX.Quaternion" /> rotation.
</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SlimDX.Quaternion" /> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SlimDX.Vector4" />.</param>
        </member>
        <member name="M:Rage.Vector2.Transform(Rage.Vector2,Rage.Quaternion)">
            <summary>
Transforms a 2D vector by the given <see cref="T:SlimDX.Quaternion" /> rotation.
</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SlimDX.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:SlimDX.Vector4" />.</returns>
        </member>
        <member name="M:Rage.Vector2.Transform(Rage.Vector2[],Rage.Matrix@)">
            <summary>
Transforms an array of 2D vectors by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vectors">The source vectors.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed <see cref="T:SlimDX.Vector4" />s.</returns>
        </member>
        <member name="M:Rage.Vector2.Transform(Rage.Vector2@,Rage.Matrix@,Rage.Vector4@)">
            <summary>
Transforms a 2D vector by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vector">The source vector.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SlimDX.Vector4" />.</param>
        </member>
        <member name="M:Rage.Vector2.Transform(Rage.Vector2,Rage.Matrix)">
            <summary>
Transforms a 2D vector by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vector">The source vector.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed <see cref="T:SlimDX.Vector4" />.</returns>
        </member>
        <member name="M:Rage.Vector2.Normalize(Rage.Vector2@,Rage.Vector2@)">
            <summary>
Converts the vector into a unit vector.
</summary>
            <param name="vector">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:Rage.Vector2.Normalize(Rage.Vector2)">
            <summary>
Converts the vector into a unit vector.
</summary>
            <param name="vector">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:Rage.Vector2.Dot(Rage.Vector2,Rage.Vector2)">
            <summary>
Calculates the dot product of two vectors.
</summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector2.DistanceSquared(Rage.Vector2,Rage.Vector2)">
            <summary>
Calculates the squared distance between two vectors.
</summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
Distance squared can often be used in place of distance if relative comparisons are being made. 
For example, consider three points A, B, and C. To determine whether B or C is further from A, 
compare the distance between A and B to the distance between A and C. Calculating the two distances 
involves two square roots, which are computationally expensive. However, using distance squared 
provides the same information and avoids calculating two square roots.
</remarks>
        </member>
        <member name="M:Rage.Vector2.Distance(Rage.Vector2,Rage.Vector2)">
            <summary>
Calculates the distance between two vectors.
</summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector2.SmoothStep(Rage.Vector2@,Rage.Vector2@,System.Single,Rage.Vector2@)">
            <summary>
Performs a cubic interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:Rage.Vector2.SmoothStep(Rage.Vector2,Rage.Vector2,System.Single)">
            <summary>
Performs a cubic interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector2.Lerp(Rage.Vector2@,Rage.Vector2@,System.Single,Rage.Vector2@)">
            <summary>
Performs a linear interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:Rage.Vector2.Lerp(Rage.Vector2,Rage.Vector2,System.Single)">
            <summary>
Performs a linear interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:Rage.Vector2.Hermite(Rage.Vector2@,Rage.Vector2@,Rage.Vector2@,Rage.Vector2@,System.Single,Rage.Vector2@)">
            <summary>
Performs a Hermite spline interpolation.
</summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:Rage.Vector2.Hermite(Rage.Vector2,Rage.Vector2,Rage.Vector2,Rage.Vector2,System.Single)">
            <summary>
Performs a Hermite spline interpolation.
</summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:Rage.Vector2.Clamp(Rage.Vector2@,Rage.Vector2@,Rage.Vector2@,Rage.Vector2@)">
            <summary>
Restricts a value to be within a specified range.
</summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:Rage.Vector2.Clamp(Rage.Vector2,Rage.Vector2,Rage.Vector2)">
            <summary>
Restricts a value to be within a specified range.
</summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Rage.Vector2.CatmullRom(Rage.Vector2@,Rage.Vector2@,Rage.Vector2@,Rage.Vector2@,System.Single,Rage.Vector2@)">
            <summary>
Performs a Catmull-Rom interpolation using the specified positions.
</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:Rage.Vector2.CatmullRom(Rage.Vector2,Rage.Vector2,Rage.Vector2,Rage.Vector2,System.Single)">
            <summary>
Performs a Catmull-Rom interpolation using the specified positions.
</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:Rage.Vector2.Barycentric(Rage.Vector2@,Rage.Vector2@,Rage.Vector2@,System.Single,System.Single,Rage.Vector2@)">
            <summary>
Returns a <see cref="T:Rage.Vector2" /> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
</summary>
            <param name="value1">A <see cref="T:Rage.Vector2" /> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:Rage.Vector2" /> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:Rage.Vector2" /> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <param name="result">When the method completes, contains the 2D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:Rage.Vector2.Barycentric(Rage.Vector2,Rage.Vector2,Rage.Vector2,System.Single,System.Single)">
            <summary>
Returns a <see cref="T:Rage.Vector2" /> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
</summary>
            <param name="value1">A <see cref="T:Rage.Vector2" /> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:Rage.Vector2" /> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:Rage.Vector2" /> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <returns>A new <see cref="T:Rage.Vector2" /> containing the 2D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:Rage.Vector2.Negate(Rage.Vector2@,Rage.Vector2@)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:Rage.Vector2.Negate(Rage.Vector2)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:Rage.Vector2.Divide(Rage.Vector2@,System.Single,Rage.Vector2@)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:Rage.Vector2.Divide(Rage.Vector2,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Rage.Vector2.Modulate(Rage.Vector2@,Rage.Vector2@,Rage.Vector2@)">
            <summary>
Modulates a vector by another.
</summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the moethod completes, contains the modulated vector.</param>
        </member>
        <member name="M:Rage.Vector2.Modulate(Rage.Vector2,Rage.Vector2)">
            <summary>
Modulates a vector by another.
</summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:Rage.Vector2.Multiply(Rage.Vector2@,System.Single,Rage.Vector2@)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:Rage.Vector2.Multiply(Rage.Vector2,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Rage.Vector2.Subtract(Rage.Vector2@,Rage.Vector2@,Rage.Vector2@)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:Rage.Vector2.Subtract(Rage.Vector2,Rage.Vector2)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector2.Add(Rage.Vector2@,Rage.Vector2@,Rage.Vector2@)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:Rage.Vector2.Add(Rage.Vector2,Rage.Vector2)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector2.Normalize">
            <summary>
Converts the vector into a unit vector.
</summary>
        </member>
        <member name="M:Rage.Vector2.LengthSquared">
            <summary>
Calculates the squared length of the vector.
</summary>
            <returns>The squared length of the vector.</returns>
        </member>
        <member name="M:Rage.Vector2.Length">
            <summary>
Calculates the length of the vector.
</summary>
            <returns>The length of the vector.</returns>
        </member>
        <member name="M:Rage.Vector2.#ctor(System.Single,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Vector2" /> class.
</summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
        </member>
        <member name="M:Rage.Vector2.#ctor(System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Vector2" /> class.
</summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="P:Rage.Vector2.SizeInBytes">
            <summary>
Gets the size of the <see cref="T:Rage.Vector2" /> type, in bytes.
</summary>
        </member>
        <member name="P:Rage.Vector2.UnitY">
            <summary>
Gets the Y unit <see cref="T:Rage.Vector2" /> (0, 1).
</summary>
            <value>A <see cref="T:Rage.Vector2" /> that has a value of (0, 1).</value>
        </member>
        <member name="P:Rage.Vector2.UnitX">
            <summary>
Gets the X unit <see cref="T:Rage.Vector2" /> (1, 0).
</summary>
            <value>A <see cref="T:Rage.Vector2" /> that has a value of (1, 0).</value>
        </member>
        <member name="P:Rage.Vector2.Zero">
            <summary>
Gets a <see cref="T:Rage.Vector2" /> with all of its components set to zero.
</summary>
            <value>A <see cref="T:Rage.Vector2" /> that has all of its components set to zero.</value>
        </member>
        <member name="F:Rage.Vector2.Y">
            <summary>
Gets or sets the Y component of the vector.
</summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:Rage.Vector2.X">
            <summary>
Gets or sets the X component of the vector.
</summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="T:Rage.Vector2">
            <summary>
Defines a two component vector.
</summary>
            <unmanaged>D3DXVECTOR2</unmanaged>
        </member>
        <member name="P:Rage.ConsoleCommands.AutoCompleteOption.Description">
            <summary>
Gets or sets the description.
</summary>
        </member>
        <member name="P:Rage.ConsoleCommands.AutoCompleteOption.Text">
            <summary>
Gets or sets the text to display in the auto completion menu.
</summary>
        </member>
        <member name="P:Rage.ConsoleCommands.AutoCompleteOption.Value">
            <summary>
Gets or sets the value that will be inserted if this option is chosen.
</summary>
        </member>
        <member name="M:Rage.ConsoleCommands.AutoCompleteOption.#ctor(System.String,System.String,System.String)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.ConsoleCommands.AutoCompleteOption" /> class.
</summary>
            <param name="value">The value that will be inserted if this option is chosen.</param>
            <param name="text">The text to display in the auto completion menu.</param>
            <param name="description">The description of this option.</param>
        </member>
        <member name="T:Rage.ConsoleCommands.AutoCompleteOption">
            <summary>
Represents an option in the auto completion menu.
</summary>
        </member>
        <member name="M:Rage.Player.LimitPlayerToVehicle(Rage.Vehicle)">
            <summary>
                <para>Limits the player to the specified <see cref="T:Rage.Vehicle" />. The player will be unable to enter any other <see cref="T:Rage.Vehicle" />.</para>
            </summary>
            <param name="vehicle">The <see cref="T:Rage.Vehicle" /> to limit the player to. If <c>null</c>, the limit will be removed.</param>
        </member>
        <member name="P:Rage.Player.DispatchCops">
            <summary>
Sets a value indicating whether cops will be dispatched for this player.
</summary>
            <value>Whether cops will be dispatched for this player.</value>
        </member>
        <member name="P:Rage.Player.Group">
            <summary>
Gets this player's <see cref="P:Rage.Player.Group" />.
</summary>
            <value>The player's <see cref="P:Rage.Player.Group" />.</value>
        </member>
        <member name="P:Rage.Player.LastVehicle">
            <summary>
Gets this player's last vehicle.
</summary>
        </member>
        <member name="P:Rage.Player.IsInvincible">
            <summary>
Gets or sets a value indicating whether this player is invincible.
</summary>
            <value>Whether this player is invincible.</value>
        </member>
        <member name="P:Rage.Player.IsPressingHorn">
            <summary>
Gets a value indicating whether this player is currently pressing the horn.
</summary>
            <value>Whether this player is currently pressing the horn.</value>
        </member>
        <member name="P:Rage.Player.IsDead">
            <summary>
Gets a value indicating whether this player is dead.
</summary>
            <value>Whether this player is dead.</value>
        </member>
        <member name="P:Rage.Player.CanUseCover">
            <summary>
Sets a value indicating whether this player can use cover.
</summary>
            <value>Whether this player can use cover.</value>
        </member>
        <member name="P:Rage.Player.AreWantedLevelStarsFlashing">
            <summary>
Gets a value indicating whether the wanted level stars of this player are currently flashing.
</summary>
            <value>Whether the wanted level stars of this player are currently flashing.</value>
        </member>
        <member name="P:Rage.Player.WantedLevel">
            <summary>
Gets or sets the wanted level of this player.
</summary>
            <value>The wanted level.</value>
        </member>
        <member name="P:Rage.Player.HasControl">
            <summary>
Gets a value indicating whether the player this instance represents currently has control.
</summary>
        </member>
        <member name="P:Rage.Player.Model">
            <summary>
Gets or sets the model of this player.
</summary>
            <value>The model of this player.</value>
        </member>
        <member name="P:Rage.Player.Character">
            <summary>
Gets this player's character.
<seealso cref="T:Rage.Ped" /></summary>
        </member>
        <member name="P:Rage.Player.Index">
            <summary>
Gets the index of this instance.
</summary>
        </member>
        <member name="P:Rage.Player.Id">
            <summary>
Gets the identifier of this instance.
</summary>
        </member>
        <member name="M:Rage.Player.#ctor(System.Int32)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Player" /> class.
</summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="T:Rage.Player">
            <summary>
Represents a player.
</summary>
        </member>
        <member name="M:Rage.World.TeleportLocalPlayer(Rage.Vector3,System.Boolean)">
            <summary>
                <para>Teleports the local player to the specified position.</para>
            </summary>
            <param name="position">The position to teleport the local player to.</param>
            <param name="toGround">
                <para>If <c>true</c>, the Z component of the position will be ignored, and the player will be placed on the ground.</para>
                <para>Note, that this requires execution over multiple ticks! (That is, the plugin will yield during execution of this method, if this parameter is set to <c>true&gt;</c>)</para>
                <para>If the game is paused, it be unpaused.</para>
            </param>
        </member>
        <member name="T:Rage.HitResult">
            <summary>
Shoots a ray into the game world and returns information about what it hit.
</summary>
            <param name="start">The position to start the ray at.</param>
            <param name="end">The position to end the ray at.</param>
            <param name="flags">The flags that defines how the trace behaves.</param>
            <param name="entitiesToIgnore">An array of entities to ignore. If an empty array is passed, no entities will be ignored. Can also be <c>null</c> to not ignore any entities.</param>
            <returns>An instance <see cref="!:Rage.HitResult" /> containing information about what the ray hit.</returns>
            <summary>
Shoots a ray into the game world and returns information about what it hit.
</summary>
            <param name="start">The position to start the ray at.</param>
            <param name="end">The position to end the ray at.</param>
            <param name="flags">The flags that defines how the trace behaves.</param>
            <param name="entityPredicate">A method that determines if an entity should be included in the trace (not ignored).</param>
            <returns>An instance <see cref="!:Rage.HitResult" /> containing information about what the ray hit.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref cref="!:entityPredicate" /> is <c>null</c>.</exception>
            <summary>
Shoots a ray with an extent into the game world and returns information about what it hit.
</summary>
            <param name="start">The position to start the ray at.</param>
            <param name="end">The position to end the ray at.</param>
            <param name="radius">The radius of the ray in meters.</param>
            <param name="flags">The flags that defines how the trace behaves.</param>
            <param name="entitiesToIgnore">An array of entities to ignore. If an empty array is passed, no entities will be ignored. Can also be <c>null</c> to not ignore any entities.</param>
            <returns>An instance <see cref="!:Rage.HitResult" /> containing information about what the ray hit.</returns>
            <summary>
Shoots a ray with an extent into the game world and returns information about what it hit.
</summary>
            <param name="start">The position to start the ray at.</param>
            <param name="end">The position to end the ray at.</param>
            <param name="radius">The radius of the ray in meters.</param>
            <param name="flags">The flags that defines how the trace behaves.</param>
            <param name="entityPredicate">A method that determines if an entity should be included in the trace (not ignored).</param>
            <returns>An instance <see cref="!:Rage.HitResult" /> containing information about what the ray hit.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref cref="!:entityPredicate" /> is <c>null</c>.</exception>
            <summary>
Struct representing the result of a ray trace.
</summary>
        </member>
        <member name="M:Rage.World.ConvertScreenPositionToTrace(Rage.Camera,Rage.Vector2,Rage.Vector3@,Rage.Vector3@)">
            <summary>
Gets a trace start position and trace direction from the specified screen position.
</summary>
            <param name="camera">The camera currently being rendered.</param>
            <param name="screenPosition">The screen position.</param>
            <param name="cameraPosition">The position to start the trace from.</param>
            <param name="traceDirection">The direction to trace in.</param>
            <returns>A <see cref="T:System.Boolean" /> indicating whether the call was successful. Will only be <c>false</c> if the current camera could not be determined.</returns>
        </member>
        <member name="M:Rage.World.ConvertWorldPositionToScreenPosition(Rage.Vector3)">
            <summary>
Converts the specified position from world space to screen space.
</summary>
            <param name="worldPosition">The position, in world space, to convert.</param>
            <returns>An instance of <see cref="T:Rage.Vector2" /> representing the screen space position of the specified world position.</returns>
        </member>
        <member name="M:Rage.World.RemoveSpeedZone(System.UInt32)">
            <summary>
Removes a speed zone given its handle.
</summary>
            <param name="speedZoneHandle">The handle of the speed zone to remove.</param>
            <returns>A value indicating whether the removal was successful.</returns>
        </member>
        <member name="M:Rage.World.AddSpeedZone(Rage.Vector3,System.Single,System.Single)">
            <summary>
Adds a new speed zone limiting the maximum driving speed of AI-driven vehicles in an area.
</summary>
            <param name="position">The position to add the speed zone at.</param>
            <param name="radius">The radius of the speed zone.</param>
            <param name="maxSpeed">The maximum speed allowed by the speed zone.</param>
            <returns>An unsigned int representing the handle of the created speed zone.</returns>
        </member>
        <member name="M:Rage.World.SpawnExplosion(Rage.Vector3,System.Int32,System.Single,System.Boolean,System.Boolean,System.Single)">
            <summary>
Spawns a position at the specified position.
</summary>
            <param name="position">The position to spawn the explosion at.</param>
            <param name="explosionType">The type of explosion.</param>
            <param name="radius">The radius.</param>
            <param name="audible">
                <c>true</c> if the explosion should be audible; otherwise, <c>false</c>.</param>
            <param name="invisible">
                <c>true</c> if the explosion should be invisible; otherwise, <c>false</c>.</param>
            <param name="cameraShakeAmount">The amount of camera shake to apply.</param>
        </member>
        <member name="M:Rage.World.GetStreetHash(Rage.Vector3)">
            <summary>
Gets the hash of the name of the street at the given position.
</summary>
            <param name="position">The position to get the street name hash from.</param>
            <returns>An unsigned int representing the street name hash.</returns>
        </member>
        <member name="M:Rage.World.GetStreetName(System.UInt32)">
            <summary>
Gets the name of the street given its hash.
</summary>
            <param name="hash">The hash to get the street name from.</param>
            <returns>A <see cref="T:System.String" /> representing the street name.</returns>
        </member>
        <member name="M:Rage.World.GetStreetName(Rage.Vector3)">
            <summary>
Gets the name of the street at the given position.
</summary>
            <param name="position">The position to get the street name from.</param>
            <returns>A <see cref="T:System.String" /> representing the street name.</returns>
        </member>
        <member name="M:Rage.World.UnloadNorthYankton">
            <summary>
Unloads North Yankton from the game world.
</summary>
        </member>
        <member name="M:Rage.World.LoadNorthYankton">
            <summary>
Loads North Yankton into the game world.
</summary>
        </member>
        <member name="M:Rage.World.GetGroupByHandle(Rage.PoolHandle)">
            <summary>
Gets an existing <see cref="T:Rage.Group" /> from the specified handle.
</summary>
            <param name="handle">The handle of the group.</param>
            <returns>An instance of <see cref="T:Rage.Group" /> representing the specified handle, or <c>null</c> if the group doesn't exist.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the specified handle does not represent a group.</exception>
        </member>
        <member name="M:Rage.World.GetBlipByHandle(Rage.PoolHandle)">
            <summary>
Gets an existing <see cref="T:Rage.Blip" /> from the specified handle.
</summary>
            <param name="handle">The handle of the blip.</param>
            <returns>An instance of <see cref="T:Rage.Blip" /> representing the specified handle, or <c>null</c> if the blip doesn't exist.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the specified handle does not represent a blip.</exception>
        </member>
        <member name="M:Rage.World.GetEntityByHandle``1(Rage.PoolHandle)">
            <summary>
Gets an existing <see cref="T:Rage.Entity" /> from the specified handle.
</summary>
            <param name="handle">The handle of the entity.</param>
            <returns>An instance of the specified derived sub class of <see cref="T:Rage.Entity" /> representing the specified handle, or <c>null</c> if the entity doesn't exist.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the specified handle does not represent an entity (Ped, Vehicle or Object).</exception>
        </member>
        <member name="M:Rage.World.GetAllBuildings">
            <summary>
Gets all currently existing <see cref="T:Rage.Building" />s.
</summary>
            <returns>An array of all currently existing <see cref="T:Rage.Building" />s.</returns>
        </member>
        <member name="M:Rage.World.GetAllGroups">
            <summary>
Gets all currently existing <see cref="T:Rage.Group" />s.
</summary>
            <returns>An array of all currently existing <see cref="T:Rage.Group" />s.</returns>
        </member>
        <member name="M:Rage.World.GetAllBlips">
            <summary>
Gets all <see cref="T:Rage.Blip" />s currently in the game world.
</summary>
            <returns>An array of all <see cref="T:Rage.Blip" />s currently in the game world.</returns>
        </member>
        <member name="M:Rage.World.GetAllWeapons">
            <summary>
Gets all <see cref="T:Rage.Weapon" />s currently in the game world.
</summary>
            <returns>An array of all <see cref="T:Rage.Ped" />s currently in the game world.</returns>
        </member>
        <member name="M:Rage.World.GetAllPickupObjects">
            <summary>
Gets all pickup <see cref="T:Rage.Object" />s currently in the game world.
</summary>
            <returns>An array of all pickup <see cref="T:Rage.Object" />s currently in the game world.</returns>
        </member>
        <member name="M:Rage.World.GetAllObjects">
            <summary>
Gets all <see cref="T:Rage.Object" />s currently in the game world.
</summary>
            <returns>An array of all <see cref="T:Rage.Object" />s currently in the game world.</returns>
        </member>
        <member name="M:Rage.World.GetAllVehicles">
            <summary>
Gets all <see cref="T:Rage.Vehicle" />s currently in the game world.
</summary>
            <returns>An array of all <see cref="T:Rage.Vehicle" />s currently in the game world.</returns>
        </member>
        <member name="M:Rage.World.GetAllPeds">
            <summary>
Gets all <see cref="T:Rage.Ped" />s currently in the game world.
</summary>
            <returns>An array of all <see cref="T:Rage.Ped" />s currently in the game world.</returns>
        </member>
        <member name="M:Rage.World.GetAllEntities">
            <summary>
Gets all entities currently in the game world.
</summary>
            <returns>An array of all entities currently in the game world.</returns>
        </member>
        <member name="M:Rage.World.TransitionToWeather(Rage.WeatherType,System.Single)">
            <summary>
Starts transitioning the current weather to the specified weather, over the specified duration.
</summary>
            <param name="weatherType">The type of the weather to transition to.</param>
            <param name="duration">The duration the transition lasts, in seconds.</param>
        </member>
        <member name="P:Rage.World.WaterPuddlesIntensity">
            <summary>
Gets or sets the intensity of water puddles. This value automatically increases or decreases based on percipitation.
</summary>
            <value>The intensity of water puddles.</value>
        </member>
        <member name="P:Rage.World.ObjectCapacity">
            <summary>
Gets the total number of <see cref="T:Rage.Object" />s that can exist in the game world at any given time.
</summary>
            <value>The total number of <see cref="T:Rage.Object" />s that can exist in the game world at any given time.</value>
        </member>
        <member name="P:Rage.World.VehicleCapacity">
            <summary>
Gets the total number of <see cref="T:Rage.Vehicle" />s that can exist in the game world at any given time.
</summary>
            <value>The total number of <see cref="T:Rage.Vehicle" />s that can exist in the game world at any given time.</value>
        </member>
        <member name="P:Rage.World.PedCapacity">
            <summary>
Gets the total number of <see cref="T:Rage.Ped" />s that can exist in the game world at any given time.
</summary>
            <value>The total number of <see cref="T:Rage.Ped" />s that can exist in the game world at any given time.</value>
        </member>
        <member name="P:Rage.World.Weather">
            <summary>
Gets or sets the current weather.
</summary>
            <value>The current weather.</value>
            <exception cref="!:System.NotImplementedException">Thrown if the value is attempted retrieved.</exception>
        </member>
        <member name="P:Rage.World.TimeOfDay">
            <summary>
Gets or sets the time of day.
</summary>
            <value>The time of day.</value>
        </member>
        <member name="P:Rage.World.DateTime">
            <summary>
Gets or sets the date and time.
</summary>
            <value>The date and time.</value>
        </member>
        <member name="T:Rage.World">
            <summary>
Static class for various game world settings and functions.
</summary>
        </member>
        <member name="M:Rage.Vehicle.BlipSiren(System.Boolean)">
            <summary>
                <para>Blips the siren.</para>
                <para>This is identical to the blip that is played when the siren is briefly turned on and off, but does not turn on the light.</para>
            </summary>
            <param name="evenIfOn">If <c>true</c>, the siren will blip even if it's on; otherwise, it'll only blip if the siren is off. Note, that if the siren is on, and this parameter is true, this method will not return on the same tick.</param>
        </member>
        <member name="M:Rage.Vehicle.DetachWindscreen">
            <summary>
Detaches the windscreen of this instance.
</summary>
        </member>
        <member name="M:Rage.Vehicle.Explode(System.Boolean)">
            <summary>
Explodes this instance.
</summary>
            <param name="makeExplosion">
                <c>true</c> to create an explosion; <c>false</c> to simulate that the car has already been blown up.</param>
        </member>
        <member name="M:Rage.Vehicle.Explode">
            <summary>
Explodes this instance.
</summary>
        </member>
        <member name="M:Rage.Vehicle.Wash">
            <summary>
Washes this instance.
</summary>
        </member>
        <member name="M:Rage.Vehicle.Repair">
            <summary>
Repairs this instance.
</summary>
        </member>
        <member name="M:Rage.Vehicle.GetPreviousPedOnSeat(System.Int32)">
            <summary>
                <para>Gets the <see cref="T:Rage.Ped" /> that was previously on the seat at the specified index.</para>
                <para>A <see cref="T:Rage.Ped" /> is considered 'previous' when it leaves the vehicle.</para>
            </summary>
            <param name="seatIndex">The index to get the <see cref="T:Rage.Ped" /> from.</param>
            <returns>If a <see cref="T:Rage.Ped" /> is on the specified seat, returns the <see cref="T:Rage.Ped" />; otherwise, returns <c>null</c></returns>
        </member>
        <member name="M:Rage.Vehicle.GetPedOnSeat(System.Int32)">
            <summary>
Gets the <see cref="T:Rage.Ped" /> on the seat at the specified index.
</summary>
            <param name="seatIndex">The index to get the <see cref="T:Rage.Ped" /> from.</param>
            <returns>If a <see cref="T:Rage.Ped" /> is on the specified seat, returns the <see cref="T:Rage.Ped" />; otherwise, returns <c>null</c></returns>
        </member>
        <member name="M:Rage.Vehicle.IsSeatFree(System.Int32)">
            <summary>
Determines whether the seat at the specified index is free.
</summary>
            <param name="seatIndex">The index to check.</param>
            <returns>Returns <c>true</c> if the seat at the specified index is free; otherwise, returns <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Vehicle.GetFreeSeatIndex(System.Int32,System.Int32)">
            <summary>
                <para>Gets the first free index seat of this vehicle between the specified indices, both inclusive.</para>
            </summary>
            <returns>If a seat is found, returns the seat index; Otherwise, returns <c>null</c>.</returns>
        </member>
        <member name="M:Rage.Vehicle.GetFreeSeatIndex">
            <summary>
                <para>Gets the first free index seat of this vehicle.</para>
                <para>Includes the driver's seat.</para>
            </summary>
            <returns>If a seat is found, returns the seat index; Otherwise, returns <c>null</c>.</returns>
        </member>
        <member name="M:Rage.Vehicle.GetFreePassengerSeatIndex">
            <summary>
                <para>Gets the first free index seat of this vehicle.</para>
                <para>Does not include the driver's seat.</para>
            </summary>
            <returns>If a seat is found, returns the seat index; Otherwise, returns <c>null</c>.</returns>
        </member>
        <member name="M:Rage.Vehicle.SetLockedForPlayer(Rage.Player,System.Boolean)">
            <summary>
Sets whether this vehicle is locked for the specified <see cref="T:Rage.Player" /></summary>
            <param name="player">The player to set the lock status for.</param>
            <param name="locked">
                <c>true</c> to lock the vehicle for the specified player; <c>false</c> to unlock it.</param>
        </member>
        <member name="M:Rage.Vehicle.IsLockedForPlayer(Rage.Player)">
            <summary>
Determines whether this vehicle is locked for the specified <see cref="T:Rage.Player" />.
</summary>
            <param name="player">The player to get the lock status for.</param>
            <returns>Returns <c>true</c> of this vehicle is locked for the specified <see cref="T:Rage.Player" />; otherwise, returns <c>false</c></returns>
        </member>
        <member name="M:Rage.Vehicle.Deform(Rage.Vector3,System.Single,System.Single)">
            <summary>
Applies deformation to this vehicle.
</summary>
            <param name="offset">The offset to deform the vehicle at, in entity space.</param>
            <param name="radius">The radius to apply the deformation in.</param>
            <param name="amount">The amount of deformation to apply.</param>
        </member>
        <member name="M:Rage.Vehicle.FindTowTruck">
            <summary>
Finds the tow truck currently towing this <see cref="T:Rage.Vehicle" />.
</summary>
            <returns>An instance of <see cref="T:Rage.Vehicle" /> representing the tow truck, or <c>null</c> if this <see cref="T:Rage.Vehicle" /> isn't being towed.</returns>
        </member>
        <member name="M:Rage.Vehicle.DetachFromTowTruck">
            <summary>
                <para>Detaches this <see cref="T:Rage.Vehicle" /> from the tow truck it's currently being towed by, if any.</para>
            </summary>
        </member>
        <member name="M:Rage.Vehicle.DetachTowedVehicle">
            <summary>
                <para>Detaches the <see cref="T:Rage.Vehicle" /> currently being towed by this <see cref="T:Rage.Vehicle" />.</para>
                <para>This <see cref="T:Rage.Vehicle" /> must have a towing device.</para>
            </summary>
        </member>
        <member name="M:Rage.Vehicle.TowVehicle(Rage.Vehicle,System.Boolean)">
            <summary>
                <para>Attaches a <see cref="T:Rage.Vehicle" /> to the towing device of this <see cref="T:Rage.Vehicle" />.</para>
                <para>This <see cref="T:Rage.Vehicle" /> must have a towing device.</para>
            </summary>
            <param name="vehicle">The <see cref="T:Rage.Vehicle" /> to tow.</param>
            <param name="front">If <c>true</c>, the hook will be attached to the front of the specified vehicle; otherwise, the rear.</param>
        </member>
        <member name="M:Rage.Vehicle.MakePersistent">
            <summary>
Makes this vehicle and attached trailer persistent.
</summary>
        </member>
        <member name="M:Rage.Vehicle.IsComponentBroken(&lt;unknown type&gt;)">
            <summary>
Determines whether the specified component is broken.
</summary>
            <param name="component">The component to determine whether is broken.</param>
            <returns>If the specified component is broken, returns <c>true</c>; otherwise, returns <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Vehicle.AreAnyComponentsBroken(&lt;unknown type&gt;)">
            <summary>
Determines whether any of the specified components are broken.
</summary>
            <param name="component">The components to determine whether are broken.</param>
            <returns>If the specified components are broken, returns <c>true</c>; otherwise, returns <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Vehicle.AreAllComponentsBroken(&lt;unknown type&gt;)">
            <summary>
Determines whether all of the specified components are broken.
</summary>
            <param name="component">The components to determine whether are broken.</param>
            <returns>If the specified components are broken, returns <c>true</c>; otherwise, returns <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Vehicle.RepairComponents(&lt;unknown type&gt;)">
            <summary>
Repairs the specified component or components.
</summary>
            <param name="component">The component or components to repair.</param>
        </member>
        <member name="M:Rage.Vehicle.CreateRandomDriver">
            <summary>
Creates a new <see cref="T:Rage.Ped" /> with a random model in the driver's seat.
</summary>
            <returns>If succesful, returns an instance of <see cref="T:Rage.Ped" /> representing the created driver; otherwise, returns <c>null</c>.</returns>
        </member>
        <member name="M:Rage.Vehicle.GetDoors">
            <summary>
Gets all doors of this <see cref="T:Rage.Vehicle" />.
</summary>
            <returns>An array of type <see cref="T:Rage.VehicleDoor" /> representing all doors of this vehicle.</returns>
        </member>
        <member name="P:Rage.Vehicle.IsBig">
            <summary>
                <para>Gets a value indicating whether this is a big vehicle, like busses, trucks, semis, etc.</para>
                <para>Does not return true for certain special vehicles like CUTTER.</para>
            </summary>
            <value>
                <c>true</c> if this is a big vehicle; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Vehicle.HasTrailer">
            <summary>
Gets a value indicating whether this vehicle has a trailer attached.
</summary>
            <value>
                <c>true</c> if this vehicle has a trailer attached; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Vehicle.IsAlarmSounding">
            <summary>
Gets a value indicating whether this vehicle's alarm is sounding.
</summary>
            <value>
                <c>true</c> if this vehicle's alarm is sounding; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Vehicle.AlarmTimeLeft">
            <summary>
                <para>Gets or sets time left before the vehicle alarm stops.</para>
                <para>If greater than zero, the vehicle alarm will be sounding.</para>
            </summary>
            <value>The time left before the vehicle alarm stops.</value>
        </member>
        <member name="P:Rage.Vehicle.ShouldVehiclesYieldToThisVehicle">
            <summary>
                <para>Gets or sets whether other vehicles should yield for this vehicle.</para>
                <para>This vehicle must be an emergency vehicle (Police, ambulance or fire truck).</para>
            </summary>
            <value>
                <c>true</c> if other vehicles should yield for this vehicle; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Vehicle.AccelerationScale">
            <summary>
Gets the acceleration scale.
</summary>
            <value>The acceleration scale.</value>
        </member>
        <member name="P:Rage.Vehicle.SteeringAngle">
            <summary>
Gets or sets the steering angle.
</summary>
            <value>The steering angle, in degrees.</value>
        </member>
        <member name="P:Rage.Vehicle.SteeringScale">
            <summary>
Gets or sets the steering scale.
</summary>
            <value>A <see cref="T:System.Single" /> between -1.0f (fully right) and 1.0f (fully left).</value>
        </member>
        <member name="P:Rage.Vehicle.TowingCraneRaisedAmount">
            <summary>
                <para>Sets a value indicating how much the towing crane is raised.</para>
                <para>This <see cref="T:Rage.Vehicle" /> must have a towing device.</para>
            </summary>
            <value>A <see cref="T:System.Single" /> between 0.0f and 1.0f indicating how much the towing crane is raised.</value>
        </member>
        <member name="P:Rage.Vehicle.TopSpeed">
            <summary>
Gets or sets the top speed of this vehicle.
</summary>
            <value>The top speed of this vehicle.</value>
        </member>
        <member name="P:Rage.Vehicle.DriveForce">
            <summary>
Gets or sets the drive force of this vehicle.
</summary>
            <value>The drive force of this vehicle.</value>
        </member>
        <member name="P:Rage.Vehicle.NumberOfGears">
            <summary>
Gets or sets the number of gears this vehicle has.
</summary>
            <value>The number of gears this vehicle has. Must be between 1 and 6, inclusive.</value>
        </member>
        <member name="P:Rage.Vehicle.CurrentGear">
            <summary>
Gets the current gear of this vehicle.
</summary>
            <value>The current gear of this vehicle. Must be between 1 and 6, inclusive.</value>
        </member>
        <member name="P:Rage.Vehicle.Mods">
            <summary>
Gets an instance of <see cref="T:Rage.VehicleModder" /> that can be used to change mods on this vehicle.
</summary>
            <value>An instance of <see cref="T:Rage.VehicleModder" /> that can be used to change mods on this vehicle.</value>
        </member>
        <member name="P:Rage.Vehicle.TowedVehicle">
            <summary>
Gets the <see cref="T:Rage.Vehicle" /> currently being towed by this <see cref="T:Rage.Vehicle" />.
</summary>
            <value>The <see cref="T:Rage.Vehicle" /> currently being towed by this <see cref="T:Rage.Vehicle" />; or <c>null</c> if no vehicle is being towed.</value>
        </member>
        <member name="P:Rage.Vehicle.HasTowArm">
            <summary>
Gets a value indicating whether this vehicle has a tow arm.
</summary>
            <value>
                <c>true</c> if this vehicle has a tow arm; otherwise, false.</value>
        </member>
        <member name="P:Rage.Vehicle.HasForks">
            <summary>
Gets a value indicating whether this vehicle has forks.
</summary>
            <value>
                <c>true</c> if this vehicle has forks; otherwise, false.</value>
        </member>
        <member name="P:Rage.Vehicle.HasDiggerArm">
            <summary>
Gets a value indicating whether this vehicle has a digger arm.
</summary>
            <value>
                <c>true</c> if this vehicle has a digger arm; otherwise, false.</value>
        </member>
        <member name="P:Rage.Vehicle.HasTracks">
            <summary>
Gets a value indicating whether this vehicle has tracks.
</summary>
            <value>
                <c>true</c> if this vehicle has tracks; otherwise, false.</value>
        </member>
        <member name="P:Rage.Vehicle.HasBombBay">
            <summary>
Gets a value indicating whether this vehicle has a bomb bay.
</summary>
            <value>
                <c>true</c> if this vehicle has a bomb bay; otherwise, false.</value>
        </member>
        <member name="P:Rage.Vehicle.HasTrailerHitch">
            <summary>
Gets a value indicating whether this vehicle has a trailer hitch.
</summary>
            <value>
                <c>true</c> if this vehicle has a trailer hitch; otherwise, false.</value>
        </member>
        <member name="P:Rage.Vehicle.IsTrailer">
            <summary>
Gets a value indicating whether this vehicle is a trailer.
</summary>
            <value>The is trailer.</value>
        </member>
        <member name="P:Rage.Vehicle.RimColor">
            <summary>
Gets or sets the color of the rims on the wheels of this vehicle. The wheels must be custom.
</summary>
            <value>The color of the rims on the wheels of this vehicle.</value>
        </member>
        <member name="P:Rage.Vehicle.PearlescentColor">
            <summary>
Gets or sets the pearlescent color of this vehicle.
</summary>
            <value>The pearlescent color of this vehicle.</value>
        </member>
        <member name="P:Rage.Vehicle.SecondaryColor">
            <summary>
Gets or sets the secondary color of this vehicle.
</summary>
            <value>The secondary color of this vehicle.</value>
        </member>
        <member name="P:Rage.Vehicle.PrimaryColor">
            <summary>
Gets or sets the primary color of this vehicle.
</summary>
            <value>The primary color of this vehicle.</value>
        </member>
        <member name="P:Rage.Vehicle.Trailer">
            <summary>
Gets or sets the trailer on this vehicle.
</summary>
            <value>The trailer.</value>
        </member>
        <member name="P:Rage.Vehicle.HandlingData">
            <summary>
                <para>Gets or sets the handling data associated with this vehicle.</para>
                <para>Note, that this is a reference to the global handling data for this type of vehicle, and changing it, will change the handling data of all vehicles of this type.</para>
            </summary>
            <value>The handling data.</value>
        </member>
        <member name="P:Rage.Vehicle.RadioStation">
            <summary>
Sets the radio station of this vehicle.
</summary>
            <value>The radio station of this vehicle.</value>
        </member>
        <member name="P:Rage.Vehicle.HasBeenDisabledByWater">
            <summary>
Gets or sets whether this vehicle has been disabled by water. If this flag is set, the vehicle can't drive and the player can't enter it.
When this flag has been set manually, it is reset when exiting the vehicle, so it should be set when not in the vehicle.
</summary>
            <value>Whether this instance has been damaged by water.</value>
        </member>
        <member name="P:Rage.Vehicle.IsDeformationEnabled">
            <summary>
                <para>Gets or sets a value indicating whether deformation is enabled for this vehicle.</para>
                <para>If deformation is disabled, the car will still take damage, but will not become deform.</para>
                <para>Lights, fenders, etc. will still take damage.</para>
            </summary>
            <value>
                <c>true</c> if deformation is enabled for this vehicle; otherwise <c>false</c>.</value>
        </member>
        <member name="P:Rage.Vehicle.IsPoliceVehicle">
            <summary>
Gets a value indicating whether this vehicle is a police vehicle.
</summary>
            <value>
                <c>true</c> if this vehicle is a police vehicle; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Vehicle.CanTiresBurst">
            <summary>
Gets or sets a value indicating whether the tired of this vehicle can be burst.
</summary>
            <value>
                <c>true</c> if the tires of this vehicle can burst; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Vehicle.MustBeHotwired">
            <summary>
Gets or sets a value indicating whether this vehicle must be hotwired before its engine can be turned on.
</summary>
            <value>
                <c>true</c> if this vehicle must be hotwired; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Vehicle.IsInteriorLightOn">
            <summary>
Gets or sets a value indicating whether the interior light in this vehicle is on.
</summary>
            <value>
                <c>true</c> if the interior light in this vehicle is on; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Vehicle.IsEngineOn">
            <summary>
Gets or sets a value indicating whether the engine of this vehicle is on.
</summary>
            <value>
                <c>true</c> if the engine is on; otherwise, false.</value>
        </member>
        <member name="P:Rage.Vehicle.IsEngineStarting">
            <summary>
Gets or sets a value indicating whether the engine of this vehicle is currently starting.
</summary>
            <value>
                <c>true</c> if the engine is starting; otherwise, false.</value>
        </member>
        <member name="P:Rage.Vehicle.FuelLevel">
            <summary>
Gets or sets the amount of fuel in this vehicle.
<para /><para>When the amount of fuel is below 6.5f, the vehicle will start misbehaving.</para></summary>
            <value>The amount of fuel in this vehicle.</value>
        </member>
        <member name="P:Rage.Vehicle.FuelTankHealth">
            <summary>
                <para>Gets or sets the health of the car's fuel tank.</para>
                <para>The fuel tank health ranges between 0.0f and 1000.0f.</para>
                <para />
                <para>When the fuel tank health is below 700.0f, fuel will start leaking.</para>
                <para>When the fuel tank health is below 50.0f, the engine will be unable to start.</para>
            </summary>
            <value>The health of the car's fuel tank.</value>
        </member>
        <member name="P:Rage.Vehicle.EngineHealth">
            <summary>
                <para>Gets or sets the health of the car's engine.</para>
                <para>The engine health ranges between 0.0f and 1000.0f.</para>
                <para />
                <para>When the engine health is below 400.0f, the engine will start to smoke.</para>
                <para>When the engine health is 300.0f or below, the car's back fire will become smokey and sound worse.</para>
                <para>When the engine health is below 300.0f, the car will have difficulties maintaining a stable acceleration.</para>
                <para>When the engine health reaches 0.0f, the car's engine will die.</para>
            </summary>
            <value>The health of the car's engine.</value>
        </member>
        <member name="P:Rage.Vehicle.IsOnAllWheels">
            <summary>
Gets a value indicating whether all wheels of this vehicle are touching the ground.
</summary>
            <value>Whether all wheels of this vehicle are touching the ground.</value>
        </member>
        <member name="P:Rage.Vehicle.IsStolen">
            <summary>
Gets or sets a value indicating whether this vehicle is stolen.
</summary>
            <value>Whether this vehicle is stolen.</value>
        </member>
        <member name="P:Rage.Vehicle.IsConvertible">
            <summary>
Gets a value indicating whether this vehicle is a convertible.
</summary>
            <value>Whether this vehicle is a convertible.</value>
        </member>
        <member name="P:Rage.Vehicle.HasRoof">
            <summary>
                <para>Gets a value indicating whether this vehicle has a roof.</para>
                <para>Returns true for convertibles, even when their roof is down.</para>
            </summary>
            <value>Whether this vehicle has a roof.</value>
        </member>
        <member name="P:Rage.Vehicle.IsTaxiLightOn">
            <summary>
                <para>Gets or sets a value indicating whether the taxi lights are on.</para>
                <para>If this vehicle is not a taxi, the method will have no effect.</para>
            </summary>
            <value>Whether the taxi lights are on.</value>
        </member>
        <member name="P:Rage.Vehicle.IsFull">
            <summary>
Gets a value indicating whether this vehicle currently is full.
</summary>
            <value>Whether this vehicle currently is full.</value>
        </member>
        <member name="P:Rage.Vehicle.IsEmpty">
            <summary>
Gets a value indicating whether this vehicle currently has no occupants.
</summary>
            <value>Whether this vehicle currently has no occupants.</value>
        </member>
        <member name="P:Rage.Vehicle.HasOccupants">
            <summary>
                <para>Gets a value indicating whether this vehicle has one or more occupants.</para>
                <para>Includes the driver.</para>
            </summary>
            <value>Whether this vehicle has one or more occupants.</value>
        </member>
        <member name="P:Rage.Vehicle.HasPassengers">
            <summary>
                <para>Gets a value indicating whether this vehicle has one or more passengers.</para>
                <para>Does not include the driver.</para>
            </summary>
            <value>Whether this vehicle has one or more passengers.</value>
        </member>
        <member name="P:Rage.Vehicle.HasDriver">
            <summary>
Gets a value indicating whether this vehicle has a driver.
</summary>
            <value>Whether this vehicle has a driver.</value>
        </member>
        <member name="P:Rage.Vehicle.Driver">
            <summary>
Gets the <see cref="T:Rage.Ped" /> on the driver's seat of this vehicle.
</summary>
            <value>If the vehicle has a driver, returns the driver; otherwise, returns <c>null</c>.</value>
        </member>
        <member name="P:Rage.Vehicle.Occupants">
            <summary>
                <para>Gets the passengers of this vehicle.</para>
                <para>Includes the driver.</para>
            </summary>
            <value>An array of type <see cref="T:Rage.Ped" />, containing all the <see cref="T:Rage.Ped" />s currently in this vehicle. Including the driver.</value>
        </member>
        <member name="P:Rage.Vehicle.Passengers">
            <summary>
                <para>Gets the passengers of this vehicle.</para>
                <para>Does not include the driver.</para>
                <para />
                <para>If you need a passenger at a specific seat index, using <see cref="M:Rage.Vehicle.GetPedOnSeat(System.Int32)" /> is more efficient.</para>
            </summary>
            <value>An array of type <see cref="T:Rage.Ped" />, containing all the <see cref="T:Rage.Ped" />s currently in this vehicle as passengers. Does not include the driver.</value>
        </member>
        <member name="P:Rage.Vehicle.FreeSeatsCount">
            <summary>
                <para>Gets the number of free seats in this vehicle.</para>
                <para>Includes the driver's seat.</para>
            </summary>
            <value>The number of free seats in this vehicle.</value>
        </member>
        <member name="P:Rage.Vehicle.FreePassengerSeatsCount">
            <summary>
                <para>Gets the number of free passenger seats in this vehicle.</para>
                <para>Does not include the driver's seat.</para>
            </summary>
            <value>The number of free passenger seats in this vehicle.</value>
        </member>
        <member name="P:Rage.Vehicle.PassengerCount">
            <summary>
Gets the number of passengers this vehicle currently has. Does not include the driver.
</summary>
            <value>The number of passengers this vehicle currently has.</value>
        </member>
        <member name="P:Rage.Vehicle.PassengerCapacity">
            <summary>
Gets the number of passengers this vehicle has seats for. Does not include the driver seat.
</summary>
            <value>The passenger capacity of this vehicle.</value>
        </member>
        <member name="P:Rage.Vehicle.IsBurnoutForced">
            <summary>
Sets a value indicating whether this vehicle is forced into a burnout.
</summary>
            <value>Whether this vehicle is forced into a burnout.</value>
        </member>
        <member name="P:Rage.Vehicle.IsInBurnout">
            <summary>
Gets a value indicating whether this vehicle is in a burnout.
</summary>
            <value>Whether this vehicle is in a burnout.</value>
        </member>
        <member name="P:Rage.Vehicle.IsHandbrakeForced">
            <summary>
Gets or sets a value indicating whether this handbrake on this vehicle is forced on.
</summary>
            <value>
                <c>true</c> if the handbrake on this vehicle is forced on; otherwise <c>false</c>.</value>
        </member>
        <member name="P:Rage.Vehicle.IsStoppedAtTrafficLights">
            <summary>
Gets a value indicating whether this vehicle is currently stopped at traffic lights.
</summary>
            <value>The is stopped at traffic lights.</value>
        </member>
        <member name="P:Rage.Vehicle.LockStatus">
            <summary>
Gets or sets the lock status of this vehicle.
</summary>
            <value>The lock status of this vehicle.</value>
        </member>
        <member name="P:Rage.Vehicle.DirtLevel">
            <summary>
Gets or sets the dirt level of this vehicle.
</summary>
            <value>The dirt level of this vehicle.</value>
        </member>
        <member name="P:Rage.Vehicle.Wheels">
            <summary>
Gets the wheels of this vehicle.
</summary>
            <value>The wheels of this vehicle.</value>
        </member>
        <member name="P:Rage.Vehicle.Windows">
            <summary>
Gets the windows of this vehicle.
</summary>
            <value>The windows of this vehicle.</value>
        </member>
        <member name="P:Rage.Vehicle.Doors">
 While C++/CLI and the .NET framework supports indexers for all properties, C# only allow indexers for the 'this' property,
 so I made this work-around to allow indexers on these properties.

<summary>
Gets the doors of this vehicle.
</summary><value>The doors of this vehicle.</value></member>
        <member name="P:Rage.Vehicle.LicensePlate">
            <summary>
Gets or sets the license plate of this vehicle.
</summary>
            <value>The license plate of this vehicle. Can be between 0 and 8 characters in length, inclusive.</value>
        </member>
        <member name="P:Rage.Vehicle.IsDriveable">
 GTA V has both a setter and getter of this method. The getter in GTA V has 2 parameters. The first is the vehicle, the second seems to be a bool.
 I'm guessing the bool is whether to include or ignore the SET_VEHICLE_UNDRIVEABLE value, and only return whether the vehicle is driveable due to damage.

<summary>
Gets or sets whether this instance is driveable.
</summary><value>Whether this instance is driveable.</value></member>
        <member name="P:Rage.Vehicle.IndicatorLightsStatus">
            <summary>
Sets the status of theindicator lights on this vehicle.
</summary>
            <value>The status of theindicator lights on this vehicle.</value>
        </member>
        <member name="P:Rage.Vehicle.IsSirenSilent">
            <summary>
                <para>Gets or sets a value indicating whether the siren is silent.</para>
                <para>If this vehicle is not an emergency vehicle, the method will have no effect.</para>
            </summary>
            <value>
                <c>true</c> if the siren is silent; otherwise, <c>false</c></value>
        </member>
        <member name="P:Rage.Vehicle.IsSirenOn">
            <summary>
                <para>Gets or sets a value indicating whether the siren is on.</para>
                <para>If this vehicle is not an emergency vehicle, the method will have no effect.</para>
            </summary>
            <value>Whether the siren is on.</value>
        </member>
        <member name="P:Rage.Vehicle.HasSiren">
            <summary>
Gets a value indicating whether this vehicle has a siren.
</summary>
            <value>
                <c>true</c> if this vehicle has a siren; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Rage.Vehicle.#ctor(Rage.Model,Rage.Vector3,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Vehicle" /> class.
</summary>
            <param name="model">The model to use.</param>
            <param name="position">The position to spawn at.</param>
            <param name="heading">The heading to spawn in.</param>
        </member>
        <member name="M:Rage.Vehicle.#ctor(Rage.Model,Rage.Vector3)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Vehicle" /> class.
</summary>
            <param name="model">The model to use.</param>
            <param name="position">The position to spawn at.</param>
            <param name="heading">The heading to spawn in.</param>
        </member>
        <member name="M:Rage.Vehicle.#ctor(Rage.PoolHandle)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Vehicle" /> class.
</summary>
            <param name="handle">The handle of the vehicle.</param>
        </member>
        <member name="T:Rage.Vehicle">
            <summary>
Represents a vehicle in the game world.
</summary>
        </member>
        <member name="M:Rage.Ped.ClearBlood">
            <summary>
Removes all blood decals from this <see cref="T:Rage.Ped" />.
</summary>
        </member>
        <member name="M:Rage.Ped.ResetVariation">
            <summary>
Assigns default drawable and drawable texture indices to all components of this ped.
</summary>
        </member>
        <member name="M:Rage.Ped.RandomizeVariation">
            <summary>
Assigns random drawable and drawable texture indices to all components of this ped;
however, it will not assign invalid compositions, eg. caucasian head on an african american body.
It will not however, ensure non-silly outfits (Player characters in particular).
</summary>
        </member>
        <member name="M:Rage.Ped.SetVariation(System.Int32,System.Int32,System.Int32)">
            <summary>
Sets the variation of this <see cref="T:Rage.Ped" />.
</summary>
            <param name="componentIndex">The index of the component to set the variation for.</param>
            <param name="drawableIndex">The index of the drawable variation.</param>
            <param name="drawableTextureIndex">The index of the drawable texture variation.</param>
        </member>
        <member name="M:Rage.Ped.GetVariation(System.Int32,System.Int32,System.Int32)">
            <summary>
Gets the variation of this <see cref="T:Rage.Ped" />.
</summary>
            <param name="componentIndex">The index of the component to get the variation of.</param>
            <param name="drawableIndex">The index of the drawable variation.</param>
            <param name="drawableTextureIndex">The index of the drawable texture variation.</param>
        </member>
        <member name="M:Rage.Ped.GetTextureVariationCount(System.Int32,System.Int32)">
            <summary>
Gets the number of drawable variations for the specified component of this <see cref="T:Rage.Ped" />.
</summary>
            <param name="componentIndex">The index of the component to get the number of drawable variations from.</param>
            <param name="drawableIndex">The index of the drawable variation to get the number of texture variations from.</param>
            <returns>The number of texture variations for the specified drawable variation for this <see cref="T:Rage.Ped" /></returns>
        </member>
        <member name="M:Rage.Ped.GetDrawableVariationCount(System.Int32)">
            <summary>
Gets the number of drawable variations for the specified component of this <see cref="T:Rage.Ped" />.
</summary>
            <param name="componentIndex">The index of the component to get the number of drawable variations from.</param>
            <returns>The number of drawable variations for the specified component for this <see cref="T:Rage.Ped" /></returns>
        </member>
        <member name="M:Rage.Ped.Resurrect">
            <summary>
Resurrects this instance.
</summary>
        </member>
        <member name="M:Rage.Ped.ClearWetness">
            <summary>
Clears the wetness of this <see cref="T:Rage.Ped" />.
</summary>
        </member>
        <member name="M:Rage.Ped.SetWetnessHeight(System.Single)">
            <summary>
Sets the height of the wetness of this <see cref="T:Rage.Ped" />.
</summary>
            <param name="height">The height. 1f is all wet, 0f is not wet at all. 0.5f is wet from the feet to the pelvis.</param>
        </member>
        <member name="M:Rage.Ped.Kill">
            <summary>
Kills this instance.
</summary>
        </member>
        <member name="M:Rage.Ped.PlayAmbientSpeech(System.String,System.String,System.Int32,Rage.SpeechModifier)">
            <summary>
                <para>Plays the specified ambient speech.</para>
            </summary>
            <param name="voiceName">The name of the voice to use. If <c>null</c> the <see cref="T:Rage.Ped" />'s current voice will be used.</param>
            <param name="speechName">The name of the ambient speech to play.</param>
            <param name="number">The number of the ambient speech to play. If equal to, or less than 0, a random number will be chosen.</param>
            <param name="modifier">A value indicating how to play the speech.</param>
            <example>
Assuming the <see cref="T:Rage.Ped" />'s current voice is "A_F_M_TRAMPBEAC_01_WHITE_FULL_01", plays a random of the following speeches.
GENERIC_THANKS_01
GENERIC_THANKS_02
GENERIC_THANKS_03
<code>PlayAmbientSpeech(null, "GENERIC_THANKS", 0, SpeechModifier.Force);</code></example>
            <example>
Assuming the <see cref="T:Rage.Ped" />'s current voice is "A_F_M_TRAMPBEAC_01_WHITE_FULL_01", plays GENERIC_THANKS_02.
<code>PlayAmbientSpeech(null, "GENERIC_THANKS", 2, SpeechModifier.Force);</code></example>
        </member>
        <member name="M:Rage.Ped.PlayAmbientSpeech(System.String,System.Boolean)">
            <summary>
Plays the specified ambient speech.
</summary>
            <param name="speechName">The name of the ambient speech to play.</param>
            <param name="useMegaphoneEffect">Whether to use a megaphone effect.</param>
            <remarks>This overload stops any currently playing ambient speeches first.</remarks>
        </member>
        <member name="M:Rage.Ped.PlayAmbientSpeech(System.String)">
            <summary>
Plays the specified ambient speech.
</summary>
            <param name="speechName">The name of the ambient speech to play.</param>
            <remarks>This overload stops any currently playing ambient speeches first.</remarks>
        </member>
        <member name="M:Rage.Ped.RemoveHelmet(System.Boolean)">
            <summary>
Removes this <see cref="T:Rage.Ped" />'s current helmet.
</summary>
            <param name="instantly">If <c>true</c> the helmet will be instantly removed; otherwise, the <see cref="T:Rage.Ped" /> will take it off and drop it on the ground.</param>
        </member>
        <member name="M:Rage.Ped.GiveHelmet(System.Boolean,Rage.HelmetTypes,System.Int32)">
            <summary>
Gives this <see cref="T:Rage.Ped" /> a new helmet of the specified type.
</summary>
            <param name="canBeRemovedByPed">Whether the helmet can be removed by the <see cref="T:Rage.Ped" />.</param>
            <param name="helmetType">The type of helmet to give to this <see cref="T:Rage.Ped" />.</param>
            <param name="textureIndex">The index of the texture of the helmet.</param>
        </member>
        <member name="M:Rage.Ped.IsInVehicle(Rage.Vehicle,System.Boolean)">
            <summary>
Gets whether this <see cref="T:Rage.Ped" /> is in the specified <see cref="T:Rage.Vehicle" />.
</summary>
            <param name="vehicle">The <see cref="T:Rage.Vehicle" /> to check if this instance is inside.</param>
            <param name="atGetIn">If <c>true</c> this method returns true if the ped is currently getting into the vehicle (that is, the ped has opened the door, and is about to get in); if <c>false</c> the method doesn't return true until the ped is sitting in the seat.</param>
            <returns>If this instance is currently in the specified <see cref="T:Rage.Vehicle" />, returns <c>true</c>; otherwise, returns <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Ped.IsInAnyVehicle(System.Boolean)">
            <summary>
Gets whether this <see cref="T:Rage.Ped" /> is in any <see cref="T:Rage.Vehicle" />.
</summary>
            <param name="atGetIn">If <c>true</c> this method returns true if the ped is currently getting into the vehicle (that is, the ped has opened the door, and is about to get in); if <c>false</c> the method doesn't return true until the ped is sitting in the seat.</param>
            <returns>If this instance is currently in any vehicle, returns <c>true</c>; otherwise, returns <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Ped.WarpIntoVehicle(Rage.Vehicle,System.Int32)">
            <summary>
Warps this <see cref="T:Rage.Ped" /> into the specified <see cref="T:Rage.Vehicle" />.
</summary>
            <param name="vehicle">The <see cref="T:Rage.Vehicle" /> to warp the <see cref="T:Rage.Ped" /> into.</param>
            <param name="seatIndex">The index of the seat to warp the <see cref="T:Rage.Ped" /> onto.</param>
        </member>
        <member name="M:Rage.Ped.IsStandingOnVehicle(Rage.Vehicle)">
            <summary>
Determines whether this <see cref="T:Rage.Ped" /> is standing on the specified vehicle.
</summary>
            <returns>Whether this <see cref="T:Rage.Ped" /> is standing on the specified vehicle.</returns>
        </member>
        <member name="M:Rage.Ped.IsStandingOnVehicle">
            <summary>
Determines whether this <see cref="T:Rage.Ped" /> is standing on a vehicle.
</summary>
            <returns>Whether this <see cref="T:Rage.Ped" /> is standing on a vehicle.</returns>
        </member>
        <member name="M:Rage.Ped.SetTargetableByPlayer(Rage.Player,System.Boolean)">
            <summary>
Sets whether this <see cref="T:Rage.Ped" /> can be targetted.
</summary>
            <param name="player">The player.</param>
            <param name="value">Whether this <see cref="T:Rage.Ped" /> can be targetted by the specified <see cref="T:Rage.Player" />.</param>
        </member>
        <member name="M:Rage.Ped.GetNearbyVehicles(System.Int32)">
            <summary>
Gets <see cref="T:Rage.Vehicle" />s near this <see cref="T:Rage.Ped" />.
</summary>
            <param name="maximumCount">The maximum number of nearby <see cref="T:Rage.Vehicle" />s to get. Must be between 1 and 16.</param>
            <returns>An array of type <see cref="T:Rage.Vehicle" /> containing the nearby <see cref="T:Rage.Vehicle" />s.</returns>
        </member>
        <member name="M:Rage.Ped.GetNearbyPeds(System.Int32)">
            <summary>
Gets <see cref="T:Rage.Ped" />s near this <see cref="T:Rage.Ped" />.
</summary>
            <param name="maximumCount">The maximum number of nearby <see cref="T:Rage.Ped" />s to get. Must be between 1 and 16.</param>
            <returns>An array of type <see cref="T:Rage.Ped" /> containing the nearby <see cref="T:Rage.Ped" />s.</returns>
        </member>
        <member name="M:Rage.Ped.IsBoneValid(&lt;unknown type&gt;)">
            <summary>
Determines whether the specified bone identifier is valid for this <see cref="T:Rage.Ped" />.
</summary>
            <param name="boneId">The bone identifier.</param>
            <returns>If the bone identifier is valid, returns <c>true</c>; otherwise, returns <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Ped.GetBonePosition(&lt;unknown type&gt;)">
            <summary>
Gets the position of the specified bone, in world space.
</summary>
            <param name="boneId">The bone identifier.</param>
            <returns>A <see cref="T:Rage.Vector3" /> representing the position of the specified bone, in world space.</returns>
        </member>
        <member name="M:Rage.Ped.GetBoneIndex(&lt;unknown type&gt;)">
            <summary>
Gets the index of a bone of this <see cref="T:Rage.Ped" />, given the bone's id.
</summary>
            <param name="boneName">The id of the bone.</param>
            <returns>A <see cref="T:System.Int32" /> representing the index of the bone.</returns>
            <exception cref="T:System.ArgumentException">Thrown if this <see cref="T:Rage.Ped" /> does not have a bone with the specified name.</exception>
        </member>
        <member name="M:Rage.Ped.Delete">
            <inheritdoc />
        </member>
        <member name="P:Rage.Ped.KeepTasks">
            <summary>
                <para>Sets whether this <see cref="T:Rage.Ped" /> will keep tasks assigned.</para>
            </summary>
            <value>
                <c>true</c> if tasks should be kept; otherwise <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.LastEuphoriaMessageName">
            <summary>
Gets the name of the Euphoria message that was last dispatched to this <see cref="T:Rage.Ped" />.
</summary>
            <value>The name of the Euphoria message that was last dispatched to this <see cref="T:Rage.Ped" />.</value>
        </member>
        <member name="P:Rage.Ped.Group">
            <summary>
Gets the group this <see cref="T:Rage.Ped" /> is currently in.
</summary>
            <value>The group this <see cref="T:Rage.Ped" /> is currently in. <c>null</c> if this <see cref="T:Rage.Ped" /> is not in a group.</value>
        </member>
        <member name="P:Rage.Ped.MovementAnimationSet">
            <summary>
Gets or sets the <see cref="T:Rage.AnimationSet" /> used by this <see cref="T:Rage.Ped" /> for movement.
</summary>
            <value>The <see cref="T:Rage.AnimationSet" /> used by this <see cref="T:Rage.Ped" /> for movement. If <c>null</c> the original <see cref="T:Rage.AnimationSet" /> will be restored.</value>
        </member>
        <member name="P:Rage.Ped.SeatIndex">
            <summary>
Gets the index of the seat this <see cref="T:Rage.Ped" /> is currently on.
</summary>
            <value>The index of the seat.</value>
            <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="T:Rage.Ped" /> is not in a vehicle.</exception>
        </member>
        <member name="P:Rage.Ped.BlockPermanentEvents">
            <summary>
                <para>Sets whether permanent events are blocked for this <see cref="T:Rage.Ped" />.</para>
                <para>If permanent events are blocked, this <see cref="T:Rage.Ped" /> will only do as it's told, and won't flee when shot at, etc.</para>
            </summary>
            <value>
                <c>true</c> if permanent events are blocked; otherwise <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsBeingStealthKilled">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is currently being stealth killed.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is currently being stealth killed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsPerformingStealthKill">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is currently performing a stealth kill.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is currently performing a stealth kill; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsWearingHelmet">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is currently wearing a helmet.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is currently wearing a helmet; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsRagdoll">
            <summary>
Gets or sets a value indicating whether this <see cref="T:Rage.Ped" /> is currently ragdolled.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is currently ragdolled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsGettingUp">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is getting up.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is getting up; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.CanAttackFriendlies">
            <summary>
Sets a value indicating whether this <see cref="T:Rage.Ped" /> can attack other <see cref="T:Rage.Ped" />s considered friendly to this <see cref="T:Rage.Ped" />. Eg. <see cref="T:Rage.Ped" />s in the same relationship group, or that this <see cref="T:Rage.Ped" />'s relationship group respects.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> can attack other <see cref="T:Rage.Ped" />s considered friendly to this <see cref="T:Rage.Ped" />; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsGoingIntoCover">
            <summary>
                <para>Gets a value indicating whether this <see cref="T:Rage.Ped" /> is currently going into cover.</para>
            </summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is currently going into cover; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsInCoverFacingRight">
            <summary>
                <para>Gets a value indicating whether this <see cref="T:Rage.Ped" /> is currently in cover and facing right.</para>
                <para>A <see cref="T:Rage.Ped" /> is considered in cover if it has fully entered the cover state. It is not in cover while moving into cover.</para>
            </summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is currently in cover and facing right; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsInCoverFacingLeft">
            <summary>
                <para>Gets a value indicating whether this <see cref="T:Rage.Ped" /> is currently in cover and facing left.</para>
                <para>A <see cref="T:Rage.Ped" /> is considered in cover if it has fully entered the cover state. It is not in cover while moving into cover.</para>
            </summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is currently in cover and facing left; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsInCover">
            <summary>
                <para>Gets a value indicating whether this <see cref="T:Rage.Ped" /> is currently in cover.</para>
                <para>A <see cref="T:Rage.Ped" /> is considered in cover if it has fully entered the cover state. It is not in cover while moving into cover.</para>
            </summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is currently in cover; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsFleeing">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is currently fleeing.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is currently fleeing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.JackingTarget">
            <summary>
Gets the <see cref="T:Rage.Ped" /> currently being jacked by this <see cref="T:Rage.Ped" />.
</summary>
            <value>If this <see cref="T:Rage.Ped" /> is currently jacking, the <see cref="T:Rage.Ped" /> being jacked; otherwise, <c>null</c>.</value>
        </member>
        <member name="P:Rage.Ped.Jacker">
            <summary>
Gets the <see cref="T:Rage.Ped" /> currently jacking this <see cref="T:Rage.Ped" />.
</summary>
            <value>If this <see cref="T:Rage.Ped" /> is being jacked, the <see cref="T:Rage.Ped" /> doing the jacking; otherwise, <c>null</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsBeingJacked">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is currently being pulled or otherwise being moved out of a vehicle by another <see cref="T:Rage.Ped" />.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is currently being pulled or otherwise being moved out of a vehicle by another <see cref="T:Rage.Ped" />; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsJacking">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is currently pulling or otherwise moving another <see cref="T:Rage.Ped" /> out of a vehicle.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is currently pulling or otherwise moving another <see cref="T:Rage.Ped" /> out of a vehicle; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsDoingDriveby">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is aiming from a vehicle.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is aiming from a vehicle; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsInTaxi">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is in a taxi, passenger or otherwise.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is in a taxi, passenger or otherwise; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsPassenger">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is currently on a non-driver seat in a vehicle.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is currently on a non-driver seat in a vehicle; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsDiving">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is currently diving.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is currently diving; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsSwimming">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is currently swimming.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is currently swimming; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsClimbing">
            <summary>
                <para>Gets a value indicating whether this <see cref="T:Rage.Ped" /> is currently climbing.</para>
                <para>A <see cref="T:Rage.Ped" /> is considered climbing if performing one of the following actions.</para>
                <list type="bullet">
                    <item>
                        <description>Climbing up.</description>
                    </item>
                    <item>
                        <description>Vaulting.</description>
                    </item>
                    <item>
                        <description>Stepping up.</description>
                    </item>
                    <item>
                        <description>Stepping over.</description>
                    </item>
                    <item>
                        <description>Climbing a ladder.</description>
                    </item>
                </list>
            </summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is currently climbing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsJumping">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is currently jumping.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is currently jumping; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsFalling">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is currently falling.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is currently falling; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.CanBeTargetted">
            <summary>
Sets a value indicating whether this <see cref="T:Rage.Ped" /> can be targetted by players.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> can be targetted by players; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.CanBeShotInVehicles">
            <summary>
Sets a value indicating whether this <see cref="T:Rage.Ped" /> is able to take damage from gun fire while in a vehicle.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is able to take damage from gun fire while in a vehicle; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.CanDrownInVehicles">
            <summary>
Sets a value indicating whether this <see cref="T:Rage.Ped" /> is able to drown while in a vehicle. The value of this property has no influence on <see cref="P:Rage.Ped.CanDrownOutsideVehicles" />.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is able to drown while in a vehicle; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.CanDrownOutsideVehicles">
            <summary>
Sets a value indicating whether this <see cref="T:Rage.Ped" /> is able to drown while in water, outside a vehicle. The value of this property has no influence on <see cref="P:Rage.Ped.CanDrownInVehicles" />.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is able to drown while in water, outside a vehicle; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsInMeleeCombat">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is in melee combat. The <see cref="T:Rage.Ped" /> must be AI-controlled.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is not a player and is in melee combat; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsInCombat">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is in combat. The <see cref="T:Rage.Ped" /> must be AI-controlled.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is not a player and is in combat; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsReloading">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is reloading.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is reloading; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.IsAimingFromCover">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is aiming from cover.
</summary>
            <value>
                <c>true</c> if this <see cref="T:Rage.Ped" /> is aiming from cover; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Ped.Voice">
            <summary>
Sets the voice of this <see cref="T:Rage.Ped" />.
</summary>
            <value>The voice of this <see cref="T:Rage.Ped" />.</value>
        </member>
        <member name="P:Rage.Ped.Tasks">
            <summary>
Gets an instance of <see cref="T:Rage.TaskInvoker" /> for this <see cref="T:Rage.Ped" /> that can be used to invoke tasks on this <see cref="T:Rage.Ped" />.
</summary>
            <value>An instance of <see cref="T:Rage.TaskInvoker" /> for this <see cref="T:Rage.Ped" /> that can be used to invoke tasks on this <see cref="T:Rage.Ped" />.</value>
        </member>
        <member name="P:Rage.Ped.IsPlantingBomb">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is currently planting a bomb.
</summary>
            <value>Whether this <see cref="T:Rage.Ped" /> is currently planting a bomb.</value>
        </member>
        <member name="P:Rage.Ped.IsInSeaVehicle">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is in a vehicle operating on or under water.
</summary>
            <value>Whether this <see cref="T:Rage.Ped" /> is in a vehicle operating on or under water.</value>
        </member>
        <member name="P:Rage.Ped.IsInAirVehicle">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is in an air vehicle.
</summary>
            <value>Whether this <see cref="T:Rage.Ped" /> is in an air vehicle.</value>
        </member>
        <member name="P:Rage.Ped.IsInPlane">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is in a plane.
</summary>
            <value>Whether this <see cref="T:Rage.Ped" /> is in a plane.</value>
        </member>
        <member name="P:Rage.Ped.IsInHelicopter">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is in a helicopter.
</summary>
            <value>Whether this <see cref="T:Rage.Ped" /> is in a helicopter.</value>
        </member>
        <member name="P:Rage.Ped.IsInSubmersible">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is in a submersible.
</summary>
            <value>Whether this <see cref="T:Rage.Ped" /> is in a submersible.</value>
        </member>
        <member name="P:Rage.Ped.IsInBoat">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is in a boat.
</summary>
            <value>Whether this <see cref="T:Rage.Ped" /> is in a boat.</value>
        </member>
        <member name="P:Rage.Ped.IsOnBike">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is on a bike.
</summary>
            <value>Whether this <see cref="T:Rage.Ped" /> is a bike.</value>
        </member>
        <member name="P:Rage.Ped.IsOnFoot">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is on foot.
</summary>
            <value>Whether this <see cref="T:Rage.Ped" /> is on foot.</value>
        </member>
        <member name="P:Rage.Ped.IsHuman">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is a human.
</summary>
            <value>Whether this <see cref="T:Rage.Ped" /> is a human.</value>
        </member>
        <member name="P:Rage.Ped.IsFemale">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is a female.
</summary>
            <value>Whether this <see cref="T:Rage.Ped" /> is a female.</value>
        </member>
        <member name="P:Rage.Ped.IsMale">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.Ped" /> is a male.
</summary>
            <value>Whether this <see cref="T:Rage.Ped" /> is a male.</value>
        </member>
        <member name="P:Rage.Ped.RelationshipGroup">
            <summary>
                <para>Gets or sets the relationship group of this instance.</para>
                <para>Relationship groups indicate the acquaintance between different types of Peds.</para>
                <para>For instance, by default CIVMALE and CIVFEMALE are set to respect each other; however, this behaviour can be changed.</para>
                <para>CIVMALE could be set to hate CIVFEMALE, and CIVFEMALE could be set to hate CIVMALE, and all civilians would start fighting each other on side, males vs females. (Granted that they're in those respective groups, as males could certainly be added to the CIVFEMALE group.</para>
                <para>Groups can also have different acquaintances between each other. For instance, imagine three new groups: DEVELOPER, CUSTOMER and PIRATE, where Peds in the DEVELOPER relationship group hate Peds in the PIRATE group and like (not respect) Peds in the CUSTOMER group. Peds in the PIRATE group like the Peds in the DEVELOPER group, and are neutral towards people in the CUSTOMER group. Peds in the CUSTOMER group like Peds in the DEVELOPER group and dislike Peds in the PIRATE group.</para>
                <para>Any Ped in the DEVELOPER group will attack Peds in the PIRATE group on sight, but Peds in the PIRATE group won't attack Peds in the DEVELOPER group because they like them.</para>
            </summary>
        </member>
        <member name="P:Rage.Ped.IsGettingIntoVehicle">
            <summary>
                <para>Gets a value indicating whether this instance is getting into a vehicle.</para>
            </summary>
        </member>
        <member name="P:Rage.Ped.LastVehicle">
            <summary>
Gets the last <see cref="T:Rage.Vehicle" /> this ped was in.
</summary>
        </member>
        <member name="P:Rage.Ped.CurrentVehicle">
            <summary>
Gets the <see cref="T:Rage.Vehicle" /> this ped is currently in, or <c>null</c> if this ped is currently not in any <see cref="T:Rage.Vehicle" />.
</summary>
        </member>
        <member name="P:Rage.Ped.Accuracy">
            <summary>
Sets a value between 0 and 100, indicating how well this instance aims.
</summary>
        </member>
        <member name="P:Rage.Ped.IsShooting">
            <summary>
Gets a value indicating whether this instance is currently firing a weapon.
</summary>
        </member>
        <member name="P:Rage.Ped.CanOnlyBeDamagedByPlayer">
            <summary>
Gets a value indicating whether this instance can only be damaged by a player.
</summary>
        </member>
        <member name="P:Rage.Ped.IsStopped">
            <summary>
Gets a value indicating whether this instance is currently standing still.
</summary>
        </member>
        <member name="P:Rage.Ped.IsFatallyInjured">
            <summary>
Gets a value indicating whether this instance is fatally injured.
</summary>
        </member>
        <member name="P:Rage.Ped.IsInjured">
            <summary>
Gets a value indicating whether this instance is injured.
</summary>
        </member>
        <member name="P:Rage.Ped.IsPlayer">
            <summary>
Gets a value indicating whether this instance is the any player's current <see cref="T:Rage.Ped" />.
<seealso cref="T:Rage.Player" /></summary>
        </member>
        <member name="P:Rage.Ped.IsLocalPlayer">
            <summary>
Gets a value indicating whether this instance is the local player's current <see cref="T:Rage.Ped" />.
<seealso cref="T:Rage.Player" /></summary>
        </member>
        <member name="M:Rage.Ped.#ctor(Rage.Vector3)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Ped" /> class.
</summary>
            <param name="position">The position to spawn at.</param>
        </member>
        <member name="M:Rage.Ped.#ctor(Rage.Model,Rage.Vector3,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Ped" /> class.
</summary>
            <param name="model">The model to use.</param>
            <param name="position">The position to spawn at.</param>
            <param name="heading">The heading to spawn in.</param>
        </member>
        <member name="M:Rage.Ped.#ctor(Rage.PoolHandle)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Ped" /> class.
</summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="T:Rage.Ped">
            <summary>
Represents a character in the game world.
</summary>
        </member>
        <member name="M:Rage.DecisionMaker.#ctor(System.UInt32)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.DecisionMaker" /> class.
</summary>
            <param name="hash">The hash of the decision maker.</param>
        </member>
        <member name="M:Rage.DecisionMaker.#ctor(System.String)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.DecisionMaker" /> class.
</summary>
            <param name="name">The name of the decision maker.</param>
            <example>
The following names are used by the game: PLAYER, COP, FIREMAN, MEDIC, OFFDUTY_EMT, SECURITY, SWAT, EMPTY, BASE, DEFAULT, GANG, FAMILY, GULL, HEN, RAT, FISH, SHARK, HORSE, DOMESTICANIMAL, DOG, WILDANIMAL, COUGAR, SMALLANIMAL, CAT, RABBIT.
Note that certain decision makers inherit responses from another decision maker. For instance, COP inherits from BASE.
</example>
        </member>
        <member name="M:Rage.TaskInvoker.GoToWhileAiming(Rage.Entity,System.Single,System.Single)">
            <summary>
Makes the <see cref="T:Rage.Ped" /> go to an the specified <see cref="T:Rage.Entity" /> while aiming at it.
</summary>
            <param name="entity">The <see cref="T:Rage.Entity" /> to go to.</param>
            <param name="distanceThreshold">The distance from the entity to stop at.</param>
            <param name="aimingStartDistance">The distance from the entity to begin aiming at it from.</param>
            <returns>An instance of <see cref="T:Rage.Task" /> that can be used to retrieve information about the task.</returns>
        </member>
        <member name="M:Rage.TaskInvoker.GoToOffsetFromEntity(Rage.Entity,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
Makes the <see cref="T:Rage.Ped" /> go to an offset from the specified <see cref="T:Rage.Entity" />.
</summary>
            <param name="entity">The <see cref="T:Rage.Entity" /> to go to.</param>
            <param name="timeOut">The time out in milliseconds, to allow the task to complete. If the task times out, the task will be cancelled.</param>
            <param name="offset">The offset from the <see cref="T:Rage.Entity" />, in meters.</param>
            <param name="angularOffset">The angular offset in degrees from the front of the <see cref="T:Rage.Entity" />.</param>
            <param name="speed">The speed to move at, in meters per second. The <see cref="P:Rage.TaskInvoker.Ped" /> will move using the animation closest to the specified speed.</param>
            <returns>An instance of <see cref="T:Rage.Task" /> that can be used to retrieve information about the task.</returns>
        </member>
        <member name="M:Rage.TaskInvoker.CruiseWithVehicle(Rage.Vehicle,System.Single,&lt;unknown type&gt;)">
            <summary>
Makes the <see cref="T:Rage.Ped" /> cruise with the specified vehicle.
</summary>
            <param name="vehicle">The vehicle to cruise with.</param>
            <param name="speed">The speed to drive at, in meters per second.</param>
            <param name="flags">The bitwise flags indicating the behaviour of the task.</param>
            <returns>An instance of <see cref="T:Rage.Task" /> that can be used to retrieve information about the task.</returns>
        </member>
        <member name="M:Rage.TaskInvoker.CruiseWithVehicle(System.Single,&lt;unknown type&gt;)">
            <summary>
Makes the <see cref="T:Rage.Ped" /> cruise with its current vehicle.
</summary>
            <param name="speed">The speed to drive at, in meters per second.</param>
            <param name="flags">The bitwise flags indicating the behaviour of the task.</param>
            <returns>An instance of <see cref="T:Rage.Task" /> that can be used to retrieve information about the task.</returns>
        </member>
        <member name="M:Rage.TaskInvoker.CruiseWithVehicle(System.Single)">
            <summary>
Makes the <see cref="T:Rage.Ped" /> cruise with its current vehicle, using flag <see cref="F:&lt;unknown type&gt;.Normal" />.
</summary>
            <param name="speed">The speed to drive at, in meters per second.</param>
            <returns>An instance of <see cref="T:Rage.Task" /> that can be used to retrieve information about the task.</returns>
        </member>
        <member name="M:Rage.TaskInvoker.DriveToPosition(Rage.Vehicle,Rage.Vector3,System.Single,&lt;unknown type&gt;,System.Single)">
            <summary>
Makes the <see cref="T:Rage.Ped" /> drive to the specified position using the specified <see cref="T:Rage.Vehicle" />.
</summary>
            <param name="vehicle">The <see cref="T:Rage.Vehicle" /> to use.</param>
            <param name="position">The position to drive to.</param>
            <param name="speed">The speed to drive at, in meters per second.</param>
            <param name="flags">The bitwise flags indicating the behaviour of the task.</param>
            <param name="acceptedDistance">The accepted distance, in meters, from the specified position to complete the task.</param>
            <returns>An instance of <see cref="T:Rage.Task" /> that can be used to retrieve information about the task.</returns>
        </member>
        <member name="M:Rage.TaskInvoker.DriveToPosition(Rage.Vector3,System.Single,&lt;unknown type&gt;,System.Single)">
            <summary>
Makes the <see cref="T:Rage.Ped" /> drive to the specified position using its current <see cref="T:Rage.Vehicle" />.
</summary>
            <param name="position">The position to drive to.</param>
            <param name="speed">The speed to drive at, in meters per second.</param>
            <param name="flags">The bitwise flags indicating the behaviour of the task.</param>
            <param name="acceptedDistance">The accepted distance, in meters, from the specified position to complete the task.</param>
            <returns>An instance of <see cref="T:Rage.Task" /> that can be used to retrieve information about the task.</returns>
        </member>
        <member name="M:Rage.TaskInvoker.DriveToPosition(Rage.Vector3,System.Single,&lt;unknown type&gt;)">
            <summary>
Makes the <see cref="T:Rage.Ped" /> drive to the specified position using its current <see cref="T:Rage.Vehicle" />. The accepted distance from the specified position to complete the task, is 5 meters.
</summary>
            <param name="position">The position to drive to.</param>
            <param name="speed">The speed to drive at, in meters per second.</param>
            <param name="flags">The bitwise flags indicating the behaviour of the task.</param>
            <returns>An instance of <see cref="T:Rage.Task" /> that can be used to retrieve information about the task.</returns>
        </member>
        <member name="M:Rage.TaskInvoker.RappelFromHelicopter">
            <summary>
Makes the <see cref="T:Rage.Ped" /> rappel from the current vehicle. The vehicle must be a helicopter and the set the <see cref="T:Rage.Ped" /> is on must support rappelling.
</summary>
            <returns>An instance of <see cref="T:Rage.Task" /> that can be used to retrieve information about the task.</returns>
        </member>
        <member name="M:Rage.TaskInvoker.LeaveVehicle(&lt;unknown type&gt;)">
            <summary>
Makes the <see cref="T:Rage.Ped" /> leave its current <see cref="T:Rage.Vehicle" />.
</summary>
            <param name="flags">The bitwise flags indicating the behaviour of the task.</param>
            <returns>An instance of <see cref="T:Rage.Task" /> that can be used to retrieve information about the task.</returns>
        </member>
        <member name="M:Rage.TaskInvoker.EnterVehicle(Rage.Vehicle,System.Int32,System.Int32)">
            <summary>
Makes the <see cref="T:Rage.Ped" /> enter the specified <see cref="T:Rage.Vehicle" />.
</summary>
            <param name="vehicle">The <see cref="T:Rage.Vehicle" /> to enter.</param>
            <param name="timeOut">The time out in milliseconds, to allow the task to complete. If the task times out, the <see cref="T:Rage.Ped" /> will be warped into the specified <see cref="T:Rage.Vehicle" />.</param>
            <param name="seatIndex">
                <para>The index of the seat the <see cref="T:Rage.Ped" /> should get onto.</para>
                <para>If the specified index is -1, the <see cref="T:Rage.Ped" /> will get into the driver's seat.</para>
                <para>If the specified index is -2, the <see cref="T:Rage.Ped" /> will get into any free seat (TODO: VERIFY!).</para>
                <para>For regular cars, usually the seats are indexed as follows:</para>
                <list type="table">
                    <listheader>
                        <term>Index</term>
                        <description>Seat</description>
                    </listheader>
                    <item>
                        <term>0</term>
                        <description>Passenger seat</description>
                    </item>
                    <item>
                        <term>1</term>
                        <description>Left rear</description>
                    </item>
                    <item>
                        <term>2</term>
                        <description>Right rear</description>
                    </item>
                </list>
            </param>
            <returns>An instance of <see cref="T:Rage.Task" /> that can be used to retrieve information about the task.</returns>
        </member>
        <member name="M:Rage.TaskInvoker.EnterVehicle(Rage.Vehicle,System.Int32)">
            <summary>
Makes the <see cref="T:Rage.Ped" /> enter the specified <see cref="T:Rage.Vehicle" />.
</summary>
            <param name="vehicle">The <see cref="T:Rage.Vehicle" /> to enter.</param>
            <param name="seatIndex">
                <para>The index of the seat the <see cref="T:Rage.Ped" /> should get onto.</para>
                <para>If the specified index is -1, the <see cref="T:Rage.Ped" /> will get into the driver's seat.</para>
                <para>If the specified index is -2, the <see cref="T:Rage.Ped" /> will get into any free seat (TODO: VERIFY!).</para>
                <para>For regular cars, usually the seats are indexed as follows:</para>
                <list type="table">
                    <listheader>
                        <term>Index</term>
                        <description>Seat</description>
                    </listheader>
                    <item>
                        <term>0</term>
                        <description>Passenger seat</description>
                    </item>
                    <item>
                        <term>1</term>
                        <description>Left rear</description>
                    </item>
                    <item>
                        <term>2</term>
                        <description>Right rear</description>
                    </item>
                </list>
            </param>
            <returns>An instance of <see cref="T:Rage.Task" /> that can be used to retrieve information about the task.</returns>
        </member>
        <member name="M:Rage.TaskInvoker.Jump">
            <summary>
Makes the <see cref="T:Rage.Ped" /> jump.
</summary>
            <returns>An instance of <see cref="T:Rage.Task" /> that can be used to retrieve information about the task.</returns>
        </member>
        <member name="M:Rage.TaskInvoker.ClearSecondary">
            <summary>
Clears only the <see cref="T:Rage.Ped" />'s secondary task.
</summary>
        </member>
        <member name="M:Rage.TaskInvoker.ClearImmediately">
            <summary>
Clears the <see cref="T:Rage.Ped" />'s tasks immediately.
</summary>
        </member>
        <member name="M:Rage.TaskInvoker.Clear">
            <summary>
Clears the <see cref="T:Rage.Ped" />'s tasks.
</summary>
        </member>
        <member name="M:Rage.AnimationSet.Dismiss">
            <inheritdoc />
        </member>
        <member name="M:Rage.AnimationSet.LoadAndWait">
            <inheritdoc />
        </member>
        <member name="M:Rage.AnimationSet.Load">
            <inheritdoc />
        </member>
        <member name="P:Rage.AnimationSet.IsLoaded">
            <inheritdoc />
        </member>
        <member name="P:Rage.AnimationSet.Name">
            <inheritdoc />
        </member>
        <member name="M:Rage.WeaponDescriptor.Equals(Rage.WeaponDescriptor)">
            <summary>
Indicates whether the current <see cref="T:Rage.WeaponDescriptor" /> is equal to another <see cref="T:Rage.WeaponDescriptor" />.
</summary>
            <param name="obj">An <see cref="T:Rage.WeaponDescriptor" /> to compare with this <see cref="T:Rage.WeaponDescriptor" />.</param>
            <returns>
                <c>true</c> if the current <see cref="T:Rage.WeaponDescriptor" /> is equal to the other <see cref="T:Rage.WeaponDescriptor" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.WeaponDescriptor.DropToGround">
            <summary>
Drops this weapon. The weapon will be placed on the ground in front of the <see cref="P:Rage.WeaponDescriptor.Ped" />.
</summary>
        </member>
        <member name="M:Rage.WeaponDescriptor.Drop">
            <summary>
Drops this weapon. If the weapon is in the owning <see cref="P:Rage.WeaponDescriptor.Ped" />'s hand, it will be physicall dropped; otherwise, it will be placed on the ground in front of the <see cref="P:Rage.WeaponDescriptor.Ped" />.
</summary>
        </member>
        <member name="P:Rage.WeaponDescriptor.MagazineSize">
            <summary>
Gets the amount of ammo this weapon will have in its magazine after reloading.
</summary>
            <value>The amount of ammo this weapon will have in its magazine after reloading.</value>
        </member>
        <member name="P:Rage.WeaponDescriptor.LoadedAmmo">
            <summary>
Gets the amount of ammo currently in this weapon.
</summary>
            <value>The amount of ammo currently in this weapon.</value>
        </member>
        <member name="P:Rage.WeaponDescriptor.Ammo">
            <summary>
Gets the amount of ammo available for this weapon.
</summary>
            <value>The amount of ammo available for this weapon.</value>
        </member>
        <member name="P:Rage.WeaponDescriptor.MaximumAmmo">
            <summary>
Gets the maximum amount of ammo this weapon can hold.
</summary>
            <value>The maximum amount of ammo this weapon can hold.</value>
        </member>
        <member name="P:Rage.WeaponDescriptor.Hash">
            <summary>
Gets the hash of this weapon.
</summary>
            <value>The hash of this weapon.</value>
        </member>
        <member name="P:Rage.WeaponDescriptor.Asset">
            <summary>
Gets the asset of this weapon.
</summary>
            <value>An instance of <see cref="T:Rage.WeaponAsset" /> representing the asset of this weapon.</value>
        </member>
        <member name="P:Rage.WeaponDescriptor.Ped">
            <summary>
Gets the owning <see cref="P:Rage.WeaponDescriptor.Ped" /> of this weapon.
</summary>
            <value>The owning <see cref="P:Rage.WeaponDescriptor.Ped" /> of this weapon.</value>
        </member>
        <member name="M:Rage.WeaponAsset.Dismiss">
            <inheritdoc />
        </member>
        <member name="M:Rage.WeaponAsset.LoadAndWait">
            <inheritdoc />
        </member>
        <member name="M:Rage.WeaponAsset.Load">
            <inheritdoc />
        </member>
        <member name="P:Rage.WeaponAsset.IsLoaded">
            <inheritdoc />
        </member>
        <member name="P:Rage.WeaponAsset.Hash">
            <inheritdoc />
        </member>
        <member name="P:Rage.Weapon.AmmoInClip">
            <summary>
Gets or sets the amount of ammo in the current clip of this instance.
</summary>
        </member>
        <member name="P:Rage.Weapon.Ammo">
            <summary>
Gets or sets the amount of ammo this instance has left.
</summary>
        </member>
        <member name="M:Rage.Weapon.#ctor(Rage.WeaponAsset,Rage.Vector3,System.Int32)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Weapon" /> class.
</summary>
            <param name="weaponAsset">The weapon asset.</param>
            <param name="position">The position.</param>
            <param name="ammoCount">The ammo count.</param>
        </member>
        <member name="M:Rage.Weapon.#ctor(Rage.PoolHandle)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Weapon" /> class.
</summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:Rage.Object.#ctor(Rage.Model,Rage.Vector3)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Object" /> class.
</summary>
            <param name="model">The model to use.</param>
            <param name="position">The position to spawn at.</param>
        </member>
        <member name="M:Rage.Object.#ctor(Rage.Model,Rage.Vector3,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Object" /> class.
</summary>
            <param name="model">The model to use.</param>
            <param name="position">The position to spawn at.</param>
            <param name="position">The heading of the object.</param>
        </member>
        <member name="M:Rage.Object.#ctor(Rage.PoolHandle)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Object" /> class.
</summary>
            <param name="handle">The handle of the object.</param>
        </member>
        <member name="T:Rage.Object">
            <summary>
Represents an object in the game world.
</summary>
        </member>
        <member name="M:Rage.Model.Dismiss">
            <inheritdoc />
        </member>
        <member name="M:Rage.Model.LoadCollisionAndWait">
            <summary>
Starts loading this asset's collision into memory and waits for it to finish loading.
</summary>
        </member>
        <member name="M:Rage.Model.LoadCollision">
            <summary>
Starts loading this asset's collision into memory.
</summary>
        </member>
        <member name="M:Rage.Model.LoadAndWait">
            <inheritdoc />
        </member>
        <member name="M:Rage.Model.Load">
            <inheritdoc />
        </member>
        <member name="M:Rage.Model.GetDimensions(Rage.Vector3@,Rage.Vector3@)">
            <summary>
                <para>Gets the dimensions of this model.</para>
                <para>The rear bottom left relative offset from the origin of the model.</para>
                <para>The front top right relative offset from the origin of the model.</para>
            </summary>
            <param name="rearBottomLeft">The negative dimensions.</param>
            <param name="frontTopRight">The positive dimensions.</param>
        </member>
        <member name="P:Rage.Model.IsObject">
            <summary>
Gets a value indicating whether this model represents an object.
</summary>
        </member>
        <member name="P:Rage.Model.IsPed">
            <summary>
Gets a value indicating whether this model represents a ped.
</summary>
            <remarks>The current implementation purely checks the name of the model.</remarks>
        </member>
        <member name="P:Rage.Model.IsVehicle">
            <summary>
Gets a value indicating whether this model represents a vehicle.
</summary>
        </member>
        <member name="P:Rage.Model.IsQuadBike">
            <summary>
Gets a value indicating whether this model represents a quad bike.
</summary>
        </member>
        <member name="P:Rage.Model.IsBicycle">
            <summary>
Gets a value indicating whether this model represents a bicycle.
</summary>
        </member>
        <member name="P:Rage.Model.IsBike">
            <summary>
Gets a value indicating whether this model represents a bike.
</summary>
        </member>
        <member name="P:Rage.Model.IsTrain">
            <summary>
Gets a value indicating whether this model represents a train.
</summary>
        </member>
        <member name="P:Rage.Model.IsCar">
            <summary>
Gets a value indicating whether this model represents a car.
</summary>
        </member>
        <member name="P:Rage.Model.IsHelicopter">
            <summary>
Gets a value indicating whether this model represents a helicopter.
</summary>
        </member>
        <member name="P:Rage.Model.IsPlane">
            <summary>
Gets a value indicating whether this model represents a plane.
</summary>
        </member>
        <member name="P:Rage.Model.IsBoat">
            <summary>
Gets a value indicating whether this model represents a boat.
</summary>
        </member>
        <member name="P:Rage.Model.IsCollisionLoaded">
            <summary>
Gets a value indicating whether this model's collision has been loaded into memory.
</summary>
        </member>
        <member name="P:Rage.Model.IsLoaded">
            <inheritdoc />
        </member>
        <member name="P:Rage.Model.Dimensions">
            <summary>
Gets the dimensions of this model.
</summary>
            <value>The dimensions of this model. The X-component is the width, the Y-component is the length and the Z-component is the height.</value>
        </member>
        <member name="P:Rage.Model.Name">
            <summary>
Gets the name of this model.
</summary>
            <value>If successful, the name of this model; otherwise, <c>null</c>.</value>
        </member>
        <member name="P:Rage.Model.Hash">
            <inheritdoc />
        </member>
        <member name="M:Rage.Model.#ctor(System.UInt32)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Model" /> class.
</summary>
            <param name="hash">The hash of the model.</param>
        </member>
        <member name="M:Rage.Model.#ctor(System.String)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Model" /> class.
</summary>
            <param name="modelName">The name of the model.</param>
        </member>
        <member name="T:Rage.TaskStatus">
            <summary>
Indicates the status of a task.
</summary>
        </member>
        <member name="F:Rage.TaskStatus.InProgress">
            <summary>
The task is currently being performed by the <see cref="T:Rage.Ped" />.
</summary>
        </member>
        <member name="F:Rage.TaskStatus.Interrupted">
            <summary>
The task was temporarily interrupted, eg. if the <see cref="T:Rage.Ped" /> is walking, and the player walks into the <see cref="T:Rage.Ped" /> so it stumbles.
</summary>
        </member>
        <member name="F:Rage.TaskStatus.None">
            <summary>
The task has not been performed yet, or has been done.
</summary>
        </member>
        <member name="F:Rage.TaskStatus.Preparing">
            <summary>
Means the <see cref="T:Rage.Ped" /> is waiting for events preventing it from performing its task, to end. Eg. if the task is issued while the <see cref="T:Rage.Ped" /> is ragdoll.
</summary>
        </member>
        <member name="F:Rage.TaskStatus.Unknown">
            <summary>
The current status of the task is unknown. Note, this value is never returned by the game.
</summary>
        </member>
        <member name="T:Rage.VehicleDrivingFlags">
            <summary>
Flags for driving tasks.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Emergency">
            <summary>
This is a combination flag for emergency driving, disregarding most rules.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Normal">
            <summary>
This is a combination flag for normal driving, respecting rules.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.StopAtDestination">
            <summary>
                <para>If this flag is specified, the vehicle will stop at the target.</para>
                <para>Note, when this flag is specified, the task will never end.</para>
            </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.AvoidHighways">
            <summary>
                <para>If this flag is specified, the vehicle will avoid highways when possible.</para>
            </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.IgnorePathFinding">
            <summary>
                <para>If this flag is specified, the vehicle will ignore path finding and drive straight to the target.</para>
            </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.DriveBySight">
            <summary>
                <para>If this flag is specified, the vehicle will navigate using real-time path finding.</para>
            </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.AllowMedianCrossing">
            <summary>
                <para>If this flag is specified, the vehicle will cross medians, and make u-turns on highways with missing pieces of railing.</para>
            </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Reverse">
            <summary>
If this flag is specified, the vehicle will drive in reverse.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.AllowWrongWay">
            <summary>
                <para>If this flag is specified, the vehicle will use one-way streets in the wrong direction, and drive against traffic on high ways.</para>
            </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.RespectIntersections">
            <summary>
                <para>If this flag is specified, the vehicle will respect the rules of an intersection.</para>
                <para>The vehicle will slow down severely at stop signs, stop at red lights, and use the lanes designated for the direction it needs to go.</para>
            </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.DriveAroundObjects">
            <summary>
                <para>If this flag is specified, the vehicle will drive around objects.</para>
            </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.DriveAroundPeds">
            <summary>
                <para>If this flag is specified, the vehicle will drive around people.</para>
            </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.DriveAroundVehicles">
            <summary>
                <para>If this flag is specified, the vehicle will drive around other vehicles.</para>
            </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.YieldToCrossingPedestrians">
            <summary>
                <para>If this flag is specified, the vehicle will yield for pedestrians crossing a crosswalk.</para>
                <para>It will not yield to people who are not using a crosswalk.</para>
            </summary>
        </member>
        <member name="F:&lt;unknown type&gt;.FollowTraffic">
            <summary>
                <para>If this flag is specified, the vehicle will drive as part of the traffic.</para>
                <para>It will keep in line and use signallers. It will ignore intersection rules (Stop signs, traffic lights, lane designations, etc.).</para>
            </summary>
        </member>
        <member name="T:Rage.LeaveVehicleFlags">
            <summary>
Flags for the LeaveVehicle task.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.BailOut">
            <summary>
Indicates that the <see cref="T:Rage.Ped" /> should bail out of the vehicle if it's moving. Without this flag, the <see cref="T:Rage.Ped" /> will still get out immediately, but without falling.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LeaveDoorOpen">
            <summary>
Indicates that the <see cref="T:Rage.Ped" /> should leave the door open after getting out.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.WarpOut">
            <summary>
Indicates that the <see cref="T:Rage.Ped" /> should warp out of the vehicle.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.None">
            <summary>
Indicates no flags.
</summary>
            <summary>
Indicates no flags.
</summary>
        </member>
        <member name="T:Rage.VehicleIndicatorLightsStatus">
            <summary>
Represents the status of vehicle indicator lights.
</summary>
        </member>
        <member name="T:Rage.VehicleLockStatus">
            <summary>
Represents the status of vehicle locks.
</summary>
        </member>
        <member name="T:Rage.Relationship">
            <summary>
Represents the relationships between relationship groups.
</summary>
        </member>
        <member name="T:Rage.VehicleConvertibleRoofState">
            <summary>
Represents the state of the convertible roof of a vehicle.
</summary>
        </member>
        <member name="T:Rage.HelmetTypes">
            <summary>
The various helmet types.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.RagdollOnCollision">
            <summary>
If this flag is specified, the character will ragdoll if it collides with anything.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.DisableRootMotion">
            <summary>
If this flag is specified, root motion will be disabeld. Root motion lets animations drive the physics.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.NoSound3">
            <summary>
If this flag is specified, sound events attached to this animation will be removed. Eg. foot steps. The difference between this, NoSound1 and NoSound2 is currently unknown.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.NoSound2">
            <summary>
If this flag is specified, sound events attached to this animation will be removed. Eg. foot steps. The difference between this, NoSound1 and NoSound3 is currently unknown.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.NoSound1">
            <summary>
If this flag is specified, sound events attached to this animation will be removed. Eg. foot steps. The difference between this, NoSound2 and NoSound3 is currently unknown.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Idle">
            <summary>
If this flag is specified, the animation is only played if the character is standing still, and will be interrupted if it moves.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SecondaryTask">
            <summary>
If this flag is specified, the animation will be played as a secondary task, allowing the character to perform other tasks, while still playing the animation.
</summary>
            <example>
This example will make the <see cref="T:Rage.Ped" /> named ped, move around with his hands on his back, as if cuffed, by playing the cuffed idle animation as a secondary task.
<code lang="C#">ped.Tasks.PlayAnimation("mp_arresting", "idle", 8f, AnimationFlags.UpperBodyOnly | AnimationFlags.SecondaryTask | AnimationFlags.Loop);</code><code lang="VB">ped.Tasks.PlayAnimation("mp_arresting", "idle", 8F, AnimationFlags.UpperBodyOnly Or AnimationFlags.SecondaryTask Or AnimationFlags.[Loop])</code><code lang="C++">ped-&gt;Tasks-&gt;PlayAnimation("mp_arresting", "idle", 8f, AnimationFlags.UpperBodyOnly | AnimationFlags.SecondaryTask | AnimationFlags.Loop);</code>
The UpperBodyOnly flag will play the animation only on the upper body.
The Loop flag will make sure the animation plays over and over, forever.
The SecondaryTask flag will make the animation play as a secondary task, so the character isn't blocked from moving or doing other tasks, like getting into or drive vehicles.
</example>
        </member>
        <member name="F:&lt;unknown type&gt;.UpperBodyOnly">
            <summary>
If this flag is specified, the animation will only play on the upper body.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.StayInEndFrame">
            <summary>
If this flag is specified, the animation will freeze on the last frame.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Loop">
            <summary>
If this flag is specified, the animation will loop.
</summary>
        </member>
        <member name="M:Rage.Entity.Delete">
            <inheritdoc />
        </member>
        <member name="M:Rage.Entity.IsValid">
            <inheritdoc />
        </member>
        <member name="M:Rage.Entity.Dismiss">
            <inheritdoc />
        </member>
        <member name="M:Rage.Entity.SetRotationYaw(System.Single)">
            <summary>
Sets Yaw-component of the <see cref="P:Rage.Entity.Rotation" /> of this entity.
</summary>
            <param name="value">The value to set the component to.</param>
        </member>
        <member name="M:Rage.Entity.SetRotationRoll(System.Single)">
            <summary>
Sets Roll-component of the <see cref="P:Rage.Entity.Rotation" /> of this entity.
</summary>
            <param name="value">The value to set the component to.</param>
        </member>
        <member name="M:Rage.Entity.SetRotationPitch(System.Single)">
            <summary>
Sets Pitch-component of the <see cref="P:Rage.Entity.Rotation" /> of this entity.
</summary>
            <param name="value">The value to set the component to.</param>
        </member>
        <member name="M:Rage.Entity.SetQuaternionW(System.Single)">
            <summary>
Sets W-component of the <see cref="P:Rage.Entity.Quaternion" /> of this entity.
</summary>
            <param name="value">The value to set the component to.</param>
        </member>
        <member name="M:Rage.Entity.SetQuaternionZ(System.Single)">
            <summary>
Sets Z-component of the <see cref="P:Rage.Entity.Quaternion" /> of this entity.
</summary>
            <param name="value">The value to set the component to.</param>
        </member>
        <member name="M:Rage.Entity.SetQuaternionY(System.Single)">
            <summary>
Sets Y-component of the <see cref="P:Rage.Entity.Quaternion" /> of this entity.
</summary>
            <param name="value">The value to set the component to.</param>
        </member>
        <member name="M:Rage.Entity.SetQuaternionX(System.Single)">
            <summary>
Sets X-component of the <see cref="P:Rage.Entity.Quaternion" /> of this entity.
</summary>
            <param name="value">The value to set the component to.</param>
        </member>
        <member name="M:Rage.Entity.SetPositionZ(System.Single)">
            <summary>
Sets Z-component of the <see cref="P:Rage.Entity.Position" /> of this entity.
</summary>
            <param name="value">The value to set the component to.</param>
        </member>
        <member name="M:Rage.Entity.SetPositionY(System.Single)">
            <summary>
Sets Y-component of the <see cref="P:Rage.Entity.Position" /> of this entity.
</summary>
            <param name="value">The value to set the component to.</param>
        </member>
        <member name="M:Rage.Entity.SetPositionX(System.Single)">
            <summary>
Sets X-component of the <see cref="P:Rage.Entity.Position" /> of this entity.
</summary>
            <param name="value">The value to set the component to.</param>
        </member>
        <member name="M:Rage.Entity.SetPositionWithSnap(Rage.Vector3)">
            <summary>
                <para>Sets the position of this <see cref="T:Rage.Entity" /> to the specified value.</para>
                <para>Unlike <see cref="P:Rage.Entity.Position" />, if the specified position is in the ground, the position will be adjusted to place the entity above it.</para>
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:Rage.Entity.GetOffsetPosition(Rage.Vector3)">
            <summary>
Gets a position offset relative to this instance, based on the instance's position and direction.
</summary>
            <param name="offset">The offset.</param>
            <returns>A <see cref="T:Rage.Vector3" /> representing the offset position.</returns>
            <example>
This example spawns a vehicle with the model "POLICE2", 7 meters in front, and 3 meters to the left of the player's character, facing the same direction as the player's character.
<code lang="C#">
Ped playerPed = Game.LocalPlayer.Character;
Vector3 spawnPosition = playerPed.GetOffsetPosition(new Vector3(-3f, 7f, 0f));
Vehicle car = new Vehicle("POLICE2", spawnPosition, playerPed.Heading);
</code><code lang="VB">
Dim playerPed As Ped = Game.LocalPlayer.Character
Dim spawnPosition As Vector3 = playerPed.GetOffsetPosition(New Vector3(-3F, 7F, 0F))
Dim car As New Vehicle("POLICE2", spawnPosition, playerPed.Heading)
</code><code lang="C++">
Ped^ playerPed = Game::LocalPlayer-&gt;Character;
Vector3 spawnPosition = playerPed-&gt;GetOffsetPosition(Vector3(-3.0f, 7.0f, 0.0f));
Vehicle^ car = gcnew Vehicle("POLICE2", spawnPosition, playerPed-&gt;Heading);
</code></example>
            <example>
This example spawns a vehicle with the model "POLICE2", 7 meters in front, and 3 meters to the left of the player's vehicle, facing the same direction as the player's vehicle.
<code lang="C#">
Vehicle playerVehicle = Game.LocalPlayer.Character.CurrentVehicle;
if (playerVehicle != null &amp;&amp; playerVehicle.IsValid())
{
    Vector3 spawnPosition = playerVehicle.GetOffsetPosition(new Vector3(-3f, 7f, 0f));
    Vehicle car = new Vehicle("POLICE2", spawnPosition, playerVehicle.Heading);
}
</code><code lang="VB">
Dim playerVehicle As Vehicle = Game.LocalPlayer.Character.CurrentVehicle
If playerVehicle IsNot Nothing AndAlso playerVehicle.IsValid() Then
	Dim spawnPosition As Vector3 = playerVehicle.GetOffsetPosition(New Vector3(-3F, 7F, 0F))
	Dim car As New Vehicle("POLICE2", spawnPosition, playerVehicle.Heading)
End If
</code><code lang="C++">
Vehicle^ playerVehicle = Game::LocalPlayer-&gt;Character-&gt;CurrentVehicle;
if (playerVehicle != nullptr &amp;&amp; playerVehicle-&gt;IsValid())
{
    Vector3 spawnPosition = playerVehicle-&gt;GetOffsetPosition(Vector3(-3.0f, 7.0f, 0.0f));
    Vehicle^ car = gcnew Vehicle("POLICE2", spawnPosition, playerVehicle-&gt;Heading);
}
</code></example>
        </member>
        <member name="M:Rage.Entity.GetPositionOffset(Rage.Vector3)">
            <summary>
                <para>Gets the offset to the specified world position, relative to this <see cref="T:Rage.Entity" />.</para>
                <para>This is essentially the opposite of <see cref="M:Rage.Entity.GetOffsetPosition(Rage.Vector3)" /></para>
            </summary>
            <param name="position">The world position to get the relative offset to.</param>
            <returns>A <see cref="T:Rage.Vector3" /> representing the relative offset to the world position, where X is right, Y is forward, and Z is up.</returns>
        </member>
        <member name="M:Rage.Entity.GetAttachedBlip">
            <summary>
Gets the <see cref="T:Rage.Blip" /> attached to this instance.
</summary>
            <returns>If a <see cref="T:Rage.Blip" /> is attached, returns the attached <see cref="T:Rage.Blip" />; otherwise, returns <c>null</c>.</returns>
        </member>
        <member name="M:Rage.Entity.AttachBlip">
            <summary>
Creates a new <see cref="T:Rage.Blip" /> and attaches it to this instance.
</summary>
            <returns>If successful, returns the created <see cref="T:Rage.Blip" />; otherwise, returns <c>null</c>.</returns>
        </member>
        <member name="M:Rage.Entity.MakePersistent">
            <summary>
Makes this entity persistent.
</summary>
        </member>
        <member name="M:Rage.Entity.HasBone(System.Int32)">
            <summary>
Determines whether this <see cref="T:Rage.Entity" /> has the specified bone.
</summary>
            <param name="boneIndex">The index of the bone.</param>
            <returns>If this <see cref="T:Rage.Entity" /> has the specified bone, returns <c>true</c>; otherwise, returns <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Entity.HasBone(System.String)">
            <summary>
Determines whether this <see cref="T:Rage.Entity" /> has the specified bone.
</summary>
            <param name="boneName">The name of the bone.</param>
            <returns>If this <see cref="T:Rage.Entity" /> has the specified bone, returns <c>true</c>; otherwise, returns <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Entity.GetBonePosition(System.Int32)">
            <summary>
Gets the position of the specified bone, in world space.
</summary>
            <param name="boneIndex">The index of the bone.</param>
            <returns>A <see cref="T:Rage.Vector3" /> representing the position of the specified bone, in world space.</returns>
        </member>
        <member name="M:Rage.Entity.GetBonePosition(System.String)">
            <summary>
Gets the position of the specified bone, in world space.
</summary>
            <param name="boneName">The name of the bone. See <a href="bf3684c3-2590-44f1-bd57-6684824ae168.htm">Bones List</a> for a list of bones.</param>
            <returns>A <see cref="T:Rage.Vector3" /> representing the position of the specified bone, in world space.</returns>
        </member>
        <member name="M:Rage.Entity.GetBoneIndex(System.String)">
            <summary>
Gets the index of a bone of this <see cref="T:Rage.Entity" />, given the bone's name.
</summary>
            <param name="boneName">The name of the bone.</param>
            <returns>A <see cref="T:System.Int32" /> representing the index of the bone.</returns>
            <exception cref="T:System.ArgumentException">Thrown if this <see cref="T:Rage.Entity" /> does not have a bone with the specified name.</exception>
        </member>
        <member name="M:Rage.Entity.Equals(Rage.IHandleable)">
            <summary>
Indicates whether the current <see cref="T:Rage.IHandleable" /> is equal to another <see cref="T:Rage.IHandleable" />.
</summary>
            <param name="obj">An <see cref="T:Rage.IHandleable" /> to compare with this <see cref="T:Rage.IHandleable" />.</param>
            <returns>
                <c>true</c> if the current <see cref="T:Rage.IHandleable" /> is equal to the other <see cref="T:Rage.IHandleable" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Entity.Equals(Rage.Entity)">
            <summary>
Indicates whether the current instance is equal to another instance of the same type.
</summary>
            <param name="obj">An <see cref="T:Rage.Entity" /> to compare with this <see cref="T:Rage.Entity" />.</param>
            <returns>
                <c>true</c> if the current <see cref="T:Rage.Entity" /> is equal to the other <see cref="T:Rage.Entity" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Rage.Entity.CreatedByTheCallingPlugin">
            <summary>
Gets or sets a value whether this instance was created by the calling plugin.
</summary>
        </member>
        <member name="P:Rage.Entity.BelowPosition">
            <summary>
Gets a position directly below this <see cref="T:Rage.Entity" />.
</summary>
            <value>A <see cref="T:Rage.Vector3" /> representing the position.</value>
        </member>
        <member name="P:Rage.Entity.AbovePosition">
            <summary>
Gets a position directly above this <see cref="T:Rage.Entity" />.
</summary>
            <value>A <see cref="T:Rage.Vector3" /> representing the position.</value>
        </member>
        <member name="P:Rage.Entity.RightPosition">
            <summary>
Gets a position directly to the right of this <see cref="T:Rage.Entity" />.
</summary>
            <value>A <see cref="T:Rage.Vector3" /> representing the position.</value>
        </member>
        <member name="P:Rage.Entity.LeftPosition">
            <summary>
Gets a position directly to the left of this <see cref="T:Rage.Entity" />.
</summary>
            <value>A <see cref="T:Rage.Vector3" /> representing the position.</value>
        </member>
        <member name="P:Rage.Entity.RearPosition">
            <summary>
Gets a position directly behind this <see cref="T:Rage.Entity" />.
</summary>
            <value>A <see cref="T:Rage.Vector3" /> representing the position.</value>
        </member>
        <member name="P:Rage.Entity.FrontPosition">
            <summary>
Gets a position directly in front of this <see cref="T:Rage.Entity" />.
</summary>
            <value>A <see cref="T:Rage.Vector3" /> representing the position.</value>
        </member>
        <member name="P:Rage.Entity.Height">
            <summary>
Gets the height of this <see cref="T:Rage.Entity" />.
</summary>
            <value>The height of this <see cref="T:Rage.Entity" /> in meters.</value>
        </member>
        <member name="P:Rage.Entity.Length">
            <summary>
Gets the length of this <see cref="T:Rage.Entity" />.
</summary>
            <value>The length of this <see cref="T:Rage.Entity" /> in meters.</value>
        </member>
        <member name="P:Rage.Entity.Width">
            <summary>
Gets the width of this <see cref="T:Rage.Entity" />.
</summary>
            <value>The width of this <see cref="T:Rage.Entity" /> in meters.</value>
        </member>
        <member name="P:Rage.Entity.NeedsCollision">
            <summary>
                <para>Gets a value indicating whether this instance needs collision.</para>
                <para>Entities not marked explicitly to need collision will still get collision, however, if other entities need collision, entities not marked as needing collision may lose it in favor of those.</para>
            </summary>
        </member>
        <member name="P:Rage.Entity.HeightAboveGround">
            <summary>
                <para>Gets this entity's distance from the ground in 1D on the Z-axis.</para>
                <para>The distance is measured from the entity's origin to the surface below the entity (Surfaces include roofs of buildings).</para>
            </summary>
            <value>The height above ground.</value>
        </member>
        <member name="P:Rage.Entity.IsInWater">
            <summary>
                <para>Gets a value indicating whether this entity is currently in water.</para>
                <para>Returns <c>true</c> the moment any part of the entity is touching water.</para>
            </summary>
            <value>Whether this entity is currently in water.</value>
        </member>
        <member name="P:Rage.Entity.IsPositionFrozen">
            <summary>
Sets a value indicating whether the position of this vehicle is frozen.
</summary>
            <value>Whether the position of this vehicle is frozen.</value>
        </member>
        <member name="P:Rage.Entity.IsVisible">
            <inheritdoc />
        </member>
        <member name="P:Rage.Entity.MaxHealth">
            <summary>
Gets or sets the maximum health of this instance.
</summary>
        </member>
        <member name="P:Rage.Entity.Health">
            <summary>
Gets or sets the health of this instance.
</summary>
        </member>
        <member name="P:Rage.Entity.IsPersistent">
            <inheritdoc />
        </member>
        <member name="P:Rage.Entity.Speed">
            <summary>
                <para>Gets the speed of this <see cref="T:Rage.Entity" /> in meters per second.</para>
                <para>This is equivalent of <see cref="P:Rage.Entity.Velocity" />.Length().</para>
            </summary>
            <value>The speed.</value>
        </member>
        <member name="P:Rage.Entity.Velocity">
            <summary>
Gets or sets the velocity of this entity.
</summary>
            <value>The velocity of this entity.</value>
        </member>
        <member name="P:Rage.Entity.Heading">
            <summary>
Gets or sets the heading of this instance in degrees.
</summary>
        </member>
        <member name="P:Rage.Entity.Direction">
            <inheritdoc />
        </member>
        <member name="P:Rage.Entity.Rotation">
            <inheritdoc />
        </member>
        <member name="P:Rage.Entity.Quaternion">
            <inheritdoc />
        </member>
        <member name="P:Rage.Entity.Position">
            <inheritdoc />
        </member>
        <member name="P:Rage.Entity.Model">
            <inheritdoc />
        </member>
        <member name="P:Rage.Entity.Invincible">
            <summary>
Sets the invincible.
</summary>
            <value>The invincible.</value>
        </member>
        <member name="P:Rage.Entity.IsAlive">
            <summary>
Gets a value indicating whether this instance is alive.
</summary>
        </member>
        <member name="P:Rage.Entity.IsDead">
            <summary>
Gets a value indicating whether this instance is dead.
</summary>
        </member>
        <member name="P:Rage.Entity.Metadata">
            <summary>
                <para>Gets the <a href="http://en.wikipedia.org/wiki/Metadata" target="_blank">metadata</a> associated with this instance.</para>
                <para>
The value of this property can be used to store data about this instance.<br />
Getting or setting metadata is done using the same syntax as getting or setting a property.<br />
Internally the value is added to a dictionary with the specified property name as key.
</para>
            </summary>
            <returns>An instance of <see cref="T:Rage.MetadataObject" />.</returns>
            <example>
                <para>
This example stores the integer 42 in the metadata of the player's <see cref="T:Rage.Ped" /> with the key "MyValue".
<code lang="C#">
Ped playerPed = Game.LocalPlayer.Character;
playerPed.Metadata.MyValue = 42;
</code><code lang="VB">
Dim playerPed As Ped = Game.LocalPlayer.Character
playerPed.Metadata.MyValue = 42
</code><code lang="C++">
Ped^ playerPed = Game::LocalPlayer-&gt;Character;
playerPed-&gt;Metadata-&gt;MyValue = 42;
</code></para>
                <para>
This example gets the integer stored in the metadata with the key "MyValue" of the player's <see cref="T:Rage.Ped" />.
<code lang="C#">
Ped playerPed = Game.LocalPlayer.Character;
int value = playerPed.Metadata.MyValue;
</code><code lang="VB">
Dim playerPed As Ped = Game.LocalPlayer.Character
Dim value As Integer = playerPed.Metadata.MyValue
</code><code lang="C++">
Ped^ playerPed = Game::LocalPlayer-&gt;Character;
int value = playerPed-&gt;Metadata-&gt;MyValue;
</code></para>
            </example>
        </member>
        <member name="P:Rage.Entity.MemoryAddress">
            <inheritdoc />
        </member>
        <member name="P:Rage.Entity.Handle">
            <inheritdoc />
        </member>
        <member name="T:Rage.Entity">
            <summary>
Represents an entity in the game world.
<seealso cref="T:Rage.Ped" /><seealso cref="T:Rage.Vehicle" /><seealso cref="T:Rage.Weapon" /><seealso cref="T:Rage.Camera" /></summary>
        </member>
        <member name="M:Rage.Quaternion.Equals(Rage.Quaternion@,Rage.Quaternion@)">
            <summary>
Determines whether the specified object instances are considered equal. 
</summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
                <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Quaternion.Equals(Rage.Quaternion)">
            <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Rage.Quaternion.Equals(System.Object)">
            <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Rage.Quaternion.GetHashCode">
            <summary>
Returns the hash code for this instance.
</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Rage.Quaternion.ToString">
            <summary>
Converts the value of the object to its equivalent string representation.
</summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Rage.Quaternion.op_Inequality(Rage.Quaternion,Rage.Quaternion)">
            <summary>
Tests for inequality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Quaternion.op_Equality(Rage.Quaternion,Rage.Quaternion)">
            <summary>
Tests for equality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Quaternion.op_UnaryNegation(Rage.Quaternion)">
            <summary>
Reverses the direction of a given quaternion.
</summary>
            <param name="quaternion">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:Rage.Quaternion.op_Subtraction(Rage.Quaternion,Rage.Quaternion)">
            <summary>
Subtracts two quaternions.
</summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:Rage.Quaternion.op_Addition(Rage.Quaternion,Rage.Quaternion)">
            <summary>
Adds two quaternions.
</summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:Rage.Quaternion.op_Division(Rage.Quaternion,System.Single)">
            <summary>
Divides a quaternion by another.
</summary>
            <param name="left">The first quaternion to divide.</param>
            <param name="right">The second quaternion to divide.</param>
            <returns>The divided quaternion.</returns>
        </member>
        <member name="M:Rage.Quaternion.op_Multiply(System.Single,Rage.Quaternion)">
            <summary>
Scales a quaternion by the given value.
</summary>
            <param name="quaternion">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:Rage.Quaternion.op_Multiply(Rage.Quaternion,System.Single)">
            <summary>
Scales a quaternion by the given value.
</summary>
            <param name="quaternion">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:Rage.Quaternion.op_Multiply(Rage.Quaternion,Rage.Quaternion)">
            <summary>
Multiplies a quaternion by another.
</summary>
            <param name="left">The first quaternion to multiply.</param>
            <param name="right">The second quaternion to multiply.</param>
            <returns>The multiplied quaternion.</returns>
        </member>
        <member name="M:Rage.Quaternion.Subtract(Rage.Quaternion@,Rage.Quaternion@,Rage.Quaternion@)">
            <summary>
Subtracts two quaternions.
</summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two quaternions.</param>
        </member>
        <member name="M:Rage.Quaternion.Subtract(Rage.Quaternion,Rage.Quaternion)">
            <summary>
Subtracts two quaternions.
</summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:Rage.Quaternion.SquadSetup(Rage.Quaternion,Rage.Quaternion,Rage.Quaternion,Rage.Quaternion)">
            <summary>
Sets up control points for spherical quadrangle interpolation.
</summary>
            <param name="source1">First source quaternion.</param>
            <param name="source2">Second source quaternion.</param>
            <param name="source3">Third source quaternion.</param>
            <param name="source4">Fourth source quaternion.</param>
            <returns>An array of three quaternions that represent control points for spherical quadrangle interpolation.</returns>
        </member>
        <member name="M:Rage.Quaternion.Squad(Rage.Quaternion@,Rage.Quaternion@,Rage.Quaternion@,Rage.Quaternion@,System.Single,Rage.Quaternion@)">
            <summary>
Interpolates between quaternions, using spherical quadrangle interpolation.
</summary>
            <param name="source1">First source quaternion.</param>
            <param name="source2">Second source quaternion.</param>
            <param name="source3">Thrid source quaternion.</param>
            <param name="source4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <param name="result">When the method completes, contains the spherical quadrangle interpolation of the quaternions.</param>
        </member>
        <member name="M:Rage.Quaternion.Squad(Rage.Quaternion,Rage.Quaternion,Rage.Quaternion,Rage.Quaternion,System.Single)">
            <summary>
Interpolates between quaternions, using spherical quadrangle interpolation.
</summary>
            <param name="source1">First source quaternion.</param>
            <param name="source2">Second source quaternion.</param>
            <param name="source3">Thrid source quaternion.</param>
            <param name="source4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <returns>The spherical quadrangle interpolation of the quaternions.</returns>
        </member>
        <member name="M:Rage.Quaternion.Slerp(Rage.Quaternion@,Rage.Quaternion@,System.Single,Rage.Quaternion@)">
            <summary>
Interpolates between two quaternions, using spherical linear interpolation.
</summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the spherical linear interpolation of the two quaternions.</param>
        </member>
        <member name="M:Rage.Quaternion.Slerp(Rage.Quaternion,Rage.Quaternion,System.Single)">
            <summary>
Interpolates between two quaternions, using spherical linear interpolation.
</summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The spherical linear interpolation of the two quaternions.</returns>
        </member>
        <member name="M:Rage.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single,Rage.Quaternion@)">
            <summary>
Creates a quaternion given a yaw, pitch, and roll value.
</summary>
            <param name="yaw">The yaw of rotation.</param>
            <param name="pitch">The pitch of rotation.</param>
            <param name="roll">The roll of rotation.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:Rage.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
Creates a quaternion given a yaw, pitch, and roll value.
</summary>
            <param name="yaw">The yaw of rotation.</param>
            <param name="pitch">The pitch of rotation.</param>
            <param name="roll">The roll of rotation.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:Rage.Quaternion.RotationMatrix(Rage.Matrix@,Rage.Quaternion@)">
            <summary>
Creates a quaternion given a rotation matrix.
</summary>
            <param name="matrix">The rotation matrix.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:Rage.Quaternion.RotationMatrix(Rage.Matrix)">
            <summary>
Creates a quaternion given a rotation matrix.
</summary>
            <param name="matrix">The rotation matrix.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:Rage.Quaternion.RotationAxis(Rage.Vector3@,System.Single,Rage.Quaternion@)">
            <summary>
Creates a quaternion given a rotation and an axis.
</summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:Rage.Quaternion.RotationAxis(Rage.Vector3,System.Single)">
            <summary>
Creates a quaternion given a rotation and an axis.
</summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:Rage.Quaternion.Normalize(Rage.Quaternion@,Rage.Quaternion@)">
            <summary>
Converts the quaternion into a unit quaternion.
</summary>
            <param name="quaternion">The quaternion to normalize.</param>
            <param name="result">When the method completes, contains the normalized quaternion.</param>
        </member>
        <member name="M:Rage.Quaternion.Normalize(Rage.Quaternion)">
            <summary>
Converts the quaternion into a unit quaternion.
</summary>
            <param name="quaternion">The quaternion to normalize.</param>
            <returns>The normalized quaternion.</returns>
        </member>
        <member name="M:Rage.Quaternion.Negate(Rage.Quaternion@,Rage.Quaternion@)">
            <summary>
Reverses the direction of a given quaternion.
</summary>
            <param name="quaternion">The quaternion to negate.</param>
            <param name="result">When the method completes, contains a quaternion facing in the opposite direction.</param>
        </member>
        <member name="M:Rage.Quaternion.Negate(Rage.Quaternion)">
            <summary>
Reverses the direction of a given quaternion.
</summary>
            <param name="quaternion">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:Rage.Quaternion.Multiply(Rage.Quaternion@,System.Single,Rage.Quaternion@)">
            <summary>
Scales a quaternion by the given value.
</summary>
            <param name="quaternion">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <param name="result">When the method completes, contains the scaled quaternion.</param>
        </member>
        <member name="M:Rage.Quaternion.Multiply(Rage.Quaternion,System.Single)">
            <summary>
Scales a quaternion by the given value.
</summary>
            <param name="quaternion">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:Rage.Quaternion.Multiply(Rage.Quaternion@,Rage.Quaternion@,Rage.Quaternion@)">
            <summary>
Modulates a quaternion by another.
</summary>
            <param name="left">The first quaternion to modulate.</param>
            <param name="right">The second quaternion to modulate.</param>
            <param name="result">When the moethod completes, contains the modulated quaternion.</param>
        </member>
        <member name="M:Rage.Quaternion.Multiply(Rage.Quaternion,Rage.Quaternion)">
            <summary>
Modulates a quaternion by another.
</summary>
            <param name="left">The first quaternion to modulate.</param>
            <param name="right">The second quaternion to modulate.</param>
            <returns>The modulated quaternion.</returns>
        </member>
        <member name="M:Rage.Quaternion.Logarithm(Rage.Quaternion@,Rage.Quaternion@)">
            <summary>
Calculates the natural logarithm of the specified quaternion.
</summary>
            <param name="quaternion">The quaternion whose logarithm will be calculated.</param>
            <param name="result">When the method completes, contains the natural logarithm of the quaternion.</param>
        </member>
        <member name="M:Rage.Quaternion.Logarithm(Rage.Quaternion)">
            <summary>
Calculates the natural logarithm of the specified quaternion.
</summary>
            <param name="quaternion">The quaternion whose logarithm will be calculated.</param>
            <returns>The natural logarithm of the quaternion.</returns>
        </member>
        <member name="M:Rage.Quaternion.Lerp(Rage.Quaternion@,Rage.Quaternion@,System.Single,Rage.Quaternion@)">
            <summary>
Performs a linear interpolation between two quaternions.
</summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two quaternions.</param>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:Rage.Quaternion.Lerp(Rage.Quaternion,Rage.Quaternion,System.Single)">
            <summary>
Performs a linear interpolation between two quaternion.
</summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two quaternions.</returns>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:Rage.Quaternion.Invert(Rage.Quaternion@,Rage.Quaternion@)">
            <summary>
Conjugates and renormalizes the quaternion.
</summary>
            <param name="quaternion">The quaternion to conjugate and renormalize.</param>
            <param name="result">When the method completes, contains the conjugated and renormalized quaternion.</param>
        </member>
        <member name="M:Rage.Quaternion.Invert(Rage.Quaternion)">
            <summary>
Conjugates and renormalizes the quaternion.
</summary>
            <param name="quaternion">The quaternion to conjugate and renormalize.</param>
            <returns>The conjugated and renormalized quaternion.</returns>
        </member>
        <member name="M:Rage.Quaternion.Exponential(Rage.Quaternion@,Rage.Quaternion@)">
            <summary>
Exponentiates a quaternion.
</summary>
            <param name="quaternion">The quaternion to exponentiate.</param>
            <param name="result">When the method completes, contains the exponentiated quaternion.</param>
        </member>
        <member name="M:Rage.Quaternion.Exponential(Rage.Quaternion)">
            <summary>
Exponentiates a quaternion.
</summary>
            <param name="quaternion">The quaternion to exponentiate.</param>
            <returns>The exponentiated quaternion.</returns>
        </member>
        <member name="M:Rage.Quaternion.Dot(Rage.Quaternion,Rage.Quaternion)">
            <summary>
Calculates the dot product of two quaternions.
</summary>
            <param name="left">First source quaternion.</param>
            <param name="right">Second source quaternion.</param>
            <returns>The dot product of the two quaternions.</returns>
        </member>
        <member name="M:Rage.Quaternion.Divide(Rage.Quaternion@,Rage.Quaternion@,Rage.Quaternion@)">
            <summary>
Divides a quaternion by another.
</summary>
            <param name="left">The first quaternion to divide.</param>
            <param name="right">The second quaternion to divide.</param>
            <returns>The divided quaternion.</returns>
        </member>
        <member name="M:Rage.Quaternion.Divide(Rage.Quaternion,Rage.Quaternion)">
            <summary>
Divides a quaternion by another.
</summary>
            <param name="left">The first quaternion to divide.</param>
            <param name="right">The second quaternion to divide.</param>
            <returns>The divided quaternion.</returns>
        </member>
        <member name="M:Rage.Quaternion.Conjugate(Rage.Quaternion@,Rage.Quaternion@)">
            <summary>
Conjugates a quaternion.
</summary>
            <param name="quaternion">The quaternion to conjugate.</param>
            <param name="result">When the method completes, contains the conjugated quaternion.</param>
        </member>
        <member name="M:Rage.Quaternion.Conjugate(Rage.Quaternion)">
            <summary>
Conjugates a quaternion.
</summary>
            <param name="quaternion">The quaternion to conjugate.</param>
            <returns>The conjugated quaternion.</returns>
        </member>
        <member name="M:Rage.Quaternion.Barycentric(Rage.Quaternion@,Rage.Quaternion@,Rage.Quaternion@,System.Single,System.Single,Rage.Quaternion@)">
            <summary>
Returns a <see cref="T:Rage.Quaternion" /> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
</summary>
            <param name="source1">A <see cref="T:Rage.Quaternion" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="source2">A <see cref="T:Rage.Quaternion" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="source3">A <see cref="T:Rage.Quaternion" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="weight1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="source2" />).</param>
            <param name="weight2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="source3" />).</param>
            <param name="result">When the method completes, contains a new <see cref="T:Rage.Quaternion" /> containing the 4D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:Rage.Quaternion.Barycentric(Rage.Quaternion,Rage.Quaternion,Rage.Quaternion,System.Single,System.Single)">
            <summary>
Returns a <see cref="T:Rage.Quaternion" /> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
</summary>
            <param name="source1">A <see cref="T:Rage.Quaternion" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="source2">A <see cref="T:Rage.Quaternion" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="source3">A <see cref="T:Rage.Quaternion" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="weight1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="source2" />).</param>
            <param name="weight2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="source3" />).</param>
            <returns>A new <see cref="T:Rage.Quaternion" /> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:Rage.Quaternion.Add(Rage.Quaternion@,Rage.Quaternion@,Rage.Quaternion@)">
            <summary>
Adds two quaternions.
</summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <param name="result">When the method completes, contains the sum of the two quaternions.</param>
        </member>
        <member name="M:Rage.Quaternion.Add(Rage.Quaternion,Rage.Quaternion)">
            <summary>
Adds two quaternions.
</summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:Rage.Quaternion.Invert">
            <summary>
Conjugates and renormalizes the quaternion.
</summary>
        </member>
        <member name="M:Rage.Quaternion.Conjugate">
            <summary>
Conjugates the quaternion.
</summary>
        </member>
        <member name="M:Rage.Quaternion.Normalize">
            <summary>
Converts the quaternion into a unit quaternion.
</summary>
        </member>
        <member name="M:Rage.Quaternion.LengthSquared">
            <summary>
Calculates the squared length of the quaternion.
</summary>
            <returns>The squared length of the quaternion.</returns>
        </member>
        <member name="M:Rage.Quaternion.Length">
            <summary>
Calculates the length of the quaternion.
</summary>
            <returns>The length of the quaternion.</returns>
        </member>
        <member name="P:Rage.Quaternion.Angle">
            <summary>
Gets the angle of the quaternion. The quaternion must be normalized.
</summary>
        </member>
        <member name="P:Rage.Quaternion.Axis">
            <summary>
Gets the axis components of the quaternion. The quaternion must be normalized.
</summary>
        </member>
        <member name="P:Rage.Quaternion.IsIdentity">
            <summary>
Gets a value indicating whether this instance is an identity <see cref="T:Rage.Quaternion" />.
</summary>
        </member>
        <member name="P:Rage.Quaternion.Identity">
            <summary>
Gets the identity <see cref="T:Rage.Quaternion" /> (0, 0, 0, 1).
</summary>
        </member>
        <member name="M:Rage.Quaternion.#ctor(Rage.Vector3,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Quaternion" /> structure.
</summary>
            <param name="value">A <see cref="T:Rage.Vector3" /> containing the first three values of the quaternion.</param>
            <param name="w">The W component of the quaternion.</param>
        </member>
        <member name="M:Rage.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Quaternion" /> structure.
</summary>
            <param name="x">The X component of the quaternion.</param>
            <param name="y">The Y component of the quaternion.</param>
            <param name="z">The Z component of the quaternion.</param>
            <param name="w">The W component of the quaternion.</param>
        </member>
        <member name="F:Rage.Quaternion.W">
            <summary>
Gets or sets the W component of the quaternion.
</summary>
            <value>The W component of the quaternion.</value>
        </member>
        <member name="F:Rage.Quaternion.Z">
            <summary>
Gets or sets the Z component of the quaternion.
</summary>
            <value>The Z component of the quaternion.</value>
        </member>
        <member name="F:Rage.Quaternion.Y">
            <summary>
Gets or sets the Y component of the quaternion.
</summary>
            <value>The Y component of the quaternion.</value>
        </member>
        <member name="F:Rage.Quaternion.X">
            <summary>
Gets or sets the X component of the quaternion.
</summary>
            <value>The X component of the quaternion.</value>
        </member>
        <member name="T:Rage.Quaternion">
            <summary>
Defines a four dimensional mathematical quaternion.
</summary>
            <unmanaged>D3DXQUATERNION</unmanaged>
        </member>
        <member name="P:Rage.INamedAsset.Name">
            <summary>
Gets the name of this asset.
</summary>
            <value>The name of this asset.</value>
        </member>
        <member name="T:Rage.INamedAsset">
            <summary>
Represents a game asset. Game assets are blueprints that describe an object. For example, a weapon asset specifies what model a weapon will use, how fast it shoots, how many bullets it has, etc.
<seealso cref="T:Rage.WeaponAsset" /></summary>
        </member>
        <member name="P:Rage.IHashedAsset.Hash">
            <summary>
Gets the hash of this asset.
</summary>
        </member>
        <member name="T:Rage.IHashedAsset">
            <summary>
Represents a game asset. Game assets are blueprints that describe an object. For example, a weapon asset specifies what model a weapon will use, how fast it shoots, how many bullets it has, etc.
<seealso cref="T:Rage.WeaponAsset" /></summary>
        </member>
        <member name="M:Rage.IAsset.Dismiss">
            <summary>
Unloads this asset from memory.
</summary>
        </member>
        <member name="M:Rage.IAsset.LoadAndWait">
            <summary>
Starts loading this asset into memory and waits for it to finish loading.
</summary>
        </member>
        <member name="M:Rage.IAsset.Load">
            <summary>
Starts loading this asset into memory.
</summary>
        </member>
        <member name="P:Rage.IAsset.IsLoaded">
            <summary>
Gets or sets a value indicating whether this asset has been loaded.
</summary>
        </member>
        <member name="T:Rage.IAsset">
            <summary>
Represents a game asset. Game assets are blueprints that describe an object. For example, a weapon asset specifies what model a weapon will use, how fast it shoots, how many bullets it has, etc.
<seealso cref="T:Rage.WeaponAsset" /></summary>
        </member>
        <member name="P:Rage.IFreezable.IsFrozen">
            <summary>
Gets or sets a value indicating whether this instance is frozen. Frozen instances will not be processed by the physics engine.
</summary>
        </member>
        <member name="T:Rage.IFreezable">
            <summary>
Represents an object that can be frozen. Frozen objects will not be processed by the physics engine.
</summary>
        </member>
        <member name="P:Rage.IBurnable.IsBurning">
            <summary>
Gets or sets a value indicating whether this instance is on fire.
</summary>
        </member>
        <member name="T:Rage.IBurnable">
            <summary>
Represents an object that can burn.
</summary>
        </member>
        <member name="M:Rage.IDeletable.Delete">
            <summary>
                <para>Deletes this instance.</para>
                <para>Any call to a non-existent instance is invalid and will cause an exception.</para>
            </summary>
        </member>
        <member name="T:Rage.IDeletable">
            <summary>
Represents an object that can be deleted.
</summary>
        </member>
        <member name="M:Rage.IPersistable.Dismiss">
            <summary>
                <para>If this instance is marked as persistent, makes the entity non-persistent. Non-persistent entities will be deleted from the game world during clean ups.</para>
                <para>This is equivalent to setting IsPersistent to <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Rage.IPersistable.IsPersistent">
            <summary>
Gets or sets a value indicating whether this instance is persistent within the game world. Persistent instances will not be removed automatically during clean ups.
</summary>
        </member>
        <member name="T:Rage.IPersistable">
            <summary>
Represents an object that can become persistent within the game world. Persistent objects will not be removed automatically during clean ups.
</summary>
        </member>
        <member name="P:Rage.IVisual.IsVisible">
            <summary>
                <para>Gets or sets a value indicating whether this instance is currently visible within the game world.</para>
                <para>Invisible instances will still be processed but will not be rendered.</para>
            </summary>
        </member>
        <member name="T:Rage.IVisual">
            <summary>
Represents an object that can be hidden in the game world.
</summary>
        </member>
        <member name="P:Rage.IRenderable.Model">
            <summary>
Gets or sets the <see cref="P:Rage.IRenderable.Model" /> of this instance.
</summary>
        </member>
        <member name="T:Rage.IRenderable">
            <summary>
Represents an object that can be rendered in the game world.
</summary>
        </member>
        <member name="P:Rage.IDirectional.Direction">
            <summary>
Gets or sets the direction of this instance.
</summary>
        </member>
        <member name="T:Rage.IDirectional">
            <summary>
Represents an object that has a direction.
</summary>
        </member>
        <member name="P:Rage.IRotatable.Direction">
            <summary>
Gets or sets the direction of this instance.
</summary>
        </member>
        <member name="P:Rage.IRotatable.Rotation">
            <summary>
Gets or sets the rotation of this instance.
</summary>
        </member>
        <member name="P:Rage.IRotatable.Quaternion">
            <summary>
Gets or sets the quaternion of this instance.
</summary>
        </member>
        <member name="T:Rage.IRotatable">
            <summary>
Represents an object that can be rotated.
</summary>
        </member>
        <member name="P:Rage.ISpatial.Position">
            <summary>
Gets or sets the position of this instance.
</summary>
        </member>
        <member name="T:Rage.ISpatial">
            <summary>
Represents an object that has a position.
</summary>
        </member>
        <member name="P:Rage.IAddressable.MemoryAddress">
            <summary>
Gets the memory address of this instance.
</summary>
        </member>
        <member name="T:Rage.IAddressable">
            <summary>
Represents an object that has an address.
<seealso cref="T:Rage.Ped" /><seealso cref="T:Rage.Vehicle" /><seealso cref="T:Rage.Weapon" /><seealso cref="T:Rage.Blip" /></summary>
        </member>
        <member name="M:Rage.IHandleable.IsValid">
            <summary>
Determines whether this instance still represents an existing entity within the game world. Calls to an invalid instance is illegal and will result in an exception.
</summary>
            <returns>If this instance still represents an existing entity within the game world, returns <c>true</c>; otherwise, returns <c>false</c>.</returns>
        </member>
        <member name="P:Rage.IHandleable.Handle">
            <summary>
Gets the handle of this instance. Used to identify the instance within its pool.
</summary>
        </member>
        <member name="T:Rage.IHandleable">
            <summary>
Represents an object in a pool.
<seealso cref="T:Rage.PoolHandle" /><seealso cref="T:Rage.Entity" /></summary>
        </member>
        <member name="M:Rage.Rotator.Equals(Rage.Rotator)">
            <summary>
Indicates whether the current instance is equal to another instance of the same type.
</summary>
            <param name="other">A <see cref="T:Rage.Rotator" /> to compare with this <see cref="T:Rage.Rotator" />.</param>
            <returns>
                <c>true</c> if the current <see cref="T:Rage.Rotator" /> is equal to the other <see cref="T:Rage.Rotator" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Rage.Rotator">
            <summary>
Represents a rotation.
</summary>
        </member>
        <member name="M:Rage.Vector3.Distance2D(Rage.Vector3,Rage.Vector3)">
            <summary>
Calculates the distance between two vectors, ignoring the Z-component.
</summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector3.Distance2D(Rage.Vector3,Rage.ISpatial)">
            <summary>
Calculates the distance between a vector and a <see cref="T:Rage.ISpatial" />, ignoring the Z-component.
</summary>
            <param name="value1">The first vector.</param>
            <param name="spatialObject">The <see cref="T:Rage.ISpatial" />.</param>
            <returns>The distance between the vector and the <see cref="T:Rage.ISpatial" />.</returns>
        </member>
        <member name="M:Rage.Vector3.DistanceSquared(Rage.Vector3,Rage.ISpatial)">
            <summary>
Calculates the distance between a vector and a <see cref="T:Rage.ISpatial" />, ignoring the Z-component.
</summary>
            <param name="value1">The first vector.</param>
            <param name="spatialObject">The <see cref="T:Rage.ISpatial" />.</param>
            <returns>The squared distance between the vector and the <see cref="T:Rage.ISpatial" />.</returns>
            <remarks>Distance squared is the value before taking the square root. 
Distance squared can often be used in place of distance if relative comparisons are being made. 
For example, consider three points A, B, and C. To determine whether B or C is further from A, 
compare the distance between A and B to the distance between A and C. Calculating the two distances 
involves two square roots, which are computationally expensive. However, using distance squared 
provides the same information and avoids calculating two square roots.
</remarks>
        </member>
        <member name="M:Rage.Vector3.Distance(Rage.Vector3,Rage.ISpatial)">
            <summary>
Calculates the distance between a vector and a <see cref="T:Rage.ISpatial" /></summary>
            <param name="value1">The first vector.</param>
            <param name="spatialObject">The <see cref="T:Rage.ISpatial" />.</param>
            <returns>The distance between the vector and the <see cref="T:Rage.ISpatial" />.</returns>
        </member>
        <member name="M:Rage.Vector3.ProjectOnTo(Rage.Vector3)">
            <summary>
Gets a new vector representing this vector projected onto the target vector.
</summary>
            <param name="target">The vector to project onto.</param>
            <returns>An instance of <see cref="T:Rage.Vector3" /> representing the result.</returns>
        </member>
        <member name="P:Rage.Vector3.RelativeBottom">
            <summary>
Returns the relative Bottom vector. (0,0,-1)
</summary>
        </member>
        <member name="P:Rage.Vector3.RelativeTop">
            <summary>
Returns the relative Top vector. (0,0,1)
</summary>
        </member>
        <member name="P:Rage.Vector3.RelativeBack">
            <summary>
Returns the relative Back vector. (0,-1,0)
</summary>
        </member>
        <member name="P:Rage.Vector3.RelativeFront">
            <summary>
Returns the relative Front vector. (0,1,0)
</summary>
        </member>
        <member name="P:Rage.Vector3.RelativeLeft">
            <summary>
Returns the relative Left vector. (-1,0,0)
</summary>
        </member>
        <member name="P:Rage.Vector3.RelativeRight">
            <summary>
Returns the relative Right vector. (1,0,0)
</summary>
        </member>
        <member name="P:Rage.Vector3.WorldWest">
            <summary>
Returns the world West vector. (-1,0,0)
</summary>
        </member>
        <member name="P:Rage.Vector3.WorldEast">
            <summary>
Returns the world East vector. (1,0,0)
</summary>
        </member>
        <member name="P:Rage.Vector3.WorldSouth">
            <summary>
Returns the world South vector. (0,-1,0)
</summary>
        </member>
        <member name="P:Rage.Vector3.WorldNorth">
            <summary>
Returns the world North vector. (0,1,0)
</summary>
        </member>
        <member name="P:Rage.Vector3.WorldDown">
            <summary>
Returns the world Down vector. (0,0,-1)
</summary>
        </member>
        <member name="P:Rage.Vector3.WorldUp">
            <summary>
Returns the world Up vector. (0,0,1)
</summary>
        </member>
        <member name="M:Rage.Vector3.Equals(Rage.Vector3@,Rage.Vector3@)">
            <summary>
Determines whether the specified object instances are considered equal. 
</summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Vector3.Equals(Rage.Vector3)">
            <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Rage.Vector3.Equals(System.Object)">
            <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Rage.Vector3.GetHashCode">
            <summary>
Returns the hash code for this instance.
</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Rage.Vector3.ToString">
            <summary>
Converts the value of the object to its equivalent string representation.
</summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Rage.Vector3.op_Inequality(Rage.Vector3,Rage.Vector3)">
            <summary>
Tests for inequality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Vector3.op_Equality(Rage.Vector3,Rage.Vector3)">
            <summary>
Tests for equality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Vector3.op_Division(Rage.Vector3,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Rage.Vector3.op_Multiply(System.Single,Rage.Vector3)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Rage.Vector3.op_Multiply(Rage.Vector3,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Rage.Vector3.op_UnaryNegation(Rage.Vector3)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:Rage.Vector3.op_Subtraction(Rage.Vector3,Rage.Vector3)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector3.op_Addition(Rage.Vector3,Rage.Vector3)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector3.Maximize(Rage.Vector3@,Rage.Vector3@,Rage.Vector3@)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:Rage.Vector3.Maximize(Rage.Vector3,Rage.Vector3)">
            <summary>
Returns a vector containing the largest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:Rage.Vector3.Minimize(Rage.Vector3@,Rage.Vector3@,Rage.Vector3@)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:Rage.Vector3.Minimize(Rage.Vector3,Rage.Vector3)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:Rage.Vector3.Unproject(Rage.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Rage.Matrix@,Rage.Vector3@)">
            <summary>
Projects a 3D vector from screen space into object space. 
</summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in object space.</param>
        </member>
        <member name="M:Rage.Vector3.Unproject(Rage.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Rage.Matrix)">
            <summary>
Projects a 3D vector from screen space into object space. 
</summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in object space.</returns>
        </member>
        <member name="M:Rage.Vector3.Project(Rage.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Rage.Matrix@,Rage.Vector3@)">
            <summary>
Projects a 3D vector from object space into screen space. 
</summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in screen space.</param>
        </member>
        <member name="M:Rage.Vector3.Project(Rage.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Rage.Matrix)">
            <summary>
Projects a 3D vector from object space into screen space. 
</summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in screen space.</returns>
        </member>
        <member name="M:Rage.Vector3.TransformNormal(Rage.Vector3[],Rage.Matrix@)">
            <summary>
Performs a normal transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="normals">The normal vectors to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed normals.</returns>
        </member>
        <member name="M:Rage.Vector3.TransformNormal(Rage.Vector3[],Rage.Matrix@,Rage.Vector3[])">
            <summary>
Performs a normal transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="normalsIn">The source vectors.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="normalsOut">The transformed <see cref="T:SlimDX.Vector3" />s.</param>
        </member>
        <member name="M:Rage.Vector3.TransformNormal(Rage.Vector3[],Rage.Matrix@,Rage.Vector3[],System.Int32,System.Int32)">
            <summary>
Performs a normal transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="normalsIn">The source vectors.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="normalsOut">The transformed <see cref="T:SlimDX.Vector3" />s.</param>
            <param name="offset">The offset at which to begin transforming.</param>
            <param name="count">The number of vectors to transform, or 0 to process the whole array.</param>
        </member>
        <member name="M:Rage.Vector3.TransformNormal(Rage.Vector3*,Rage.Matrix*,Rage.Vector3*,System.Int32)">
            <summary>
Performs a normal transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="normalsIn">The source normals to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="normalsOut">The transformed <see cref="T:SlimDX.Vector3" />s.</param>
            <param name="count">The number of vectors to transform.</param>
        </member>
        <member name="M:Rage.Vector3.TransformNormal(Rage.Vector3*,System.Int32,Rage.Matrix*,Rage.Vector3*,System.Int32,System.Int32)">
            <summary>
Performs a normal transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="normalsIn">The source normals to transform.</param>
            <param name="inputStride">The stride in bytes between normals in the input.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="normalsOut">The transformed <see cref="T:SlimDX.Vector3" />s.</param>
            <param name="outputStride">The stride in bytes between vectors in the output.</param>
            <param name="count">The number of vectors to transform.</param>
        </member>
        <member name="M:Rage.Vector3.TransformNormal(Rage.Vector3@,Rage.Matrix@,Rage.Vector3@)">
            <summary>
Performs a normal transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
        </member>
        <member name="M:Rage.Vector3.TransformNormal(Rage.Vector3,Rage.Matrix)">
            <summary>
Performs a normal transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed normal.</returns>
        </member>
        <member name="M:Rage.Vector3.TransformCoordinate(Rage.Vector3[],Rage.Matrix@)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="coordinates">The coordinate vectors to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed coordinates.</returns>
        </member>
        <member name="M:Rage.Vector3.TransformCoordinate(Rage.Vector3[],Rage.Matrix@,Rage.Vector3[])">
            <summary>
Performs a coordinate transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="coordinatesIn">The source coordinate vectors.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="coordinatesOut">The transformed coordinate <see cref="T:SlimDX.Vector3" />s.</param>
        </member>
        <member name="M:Rage.Vector3.TransformCoordinate(Rage.Vector3[],Rage.Matrix@,Rage.Vector3[],System.Int32,System.Int32)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="coordinatesIn">The source coordinate vectors.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="coordinatesOut">The transformed coordinate <see cref="T:SlimDX.Vector3" />s.</param>
            <param name="offset">The offset at which to begin transforming.</param>
            <param name="count">The number of coordinate vectors to transform, or 0 to process the whole array.</param>
        </member>
        <member name="M:Rage.Vector3.TransformCoordinate(Rage.Vector3*,Rage.Matrix*,Rage.Vector3*,System.Int32)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="coordinatesIn">The source coordinate vectors.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="coordinatesOut">The transformed coordinate <see cref="T:SlimDX.Vector3" />s.</param>
            <param name="count">The number of coordinate vectors to transform.</param>
        </member>
        <member name="M:Rage.Vector3.TransformCoordinate(Rage.Vector3*,System.Int32,Rage.Matrix*,Rage.Vector3*,System.Int32,System.Int32)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="coordinatesIn">The source coordinate vectors.</param>
            <param name="inputStride">The stride in bytes between vectors in the input.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="coordinatesOut">The transformed coordinate <see cref="T:SlimDX.Vector3" />s.</param>
            <param name="outputStride">The stride in bytes between vectors in the output.</param>
            <param name="count">The number of coordinate vectors to transform.</param>
        </member>
        <member name="M:Rage.Vector3.TransformCoordinate(Rage.Vector3@,Rage.Matrix@,Rage.Vector3@)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
        </member>
        <member name="M:Rage.Vector3.TransformCoordinate(Rage.Vector3,Rage.Matrix)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed coordinates.</returns>
        </member>
        <member name="M:Rage.Vector3.Transform(Rage.Vector3[],Rage.Quaternion@)">
            <summary>
Transforms an array of 3D vectors by the given <see cref="T:SlimDX.Quaternion" /> rotation.
</summary>
            <param name="vectors">The vectors to rotate.</param>
            <param name="rotation">The <see cref="T:SlimDX.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:SlimDX.Vector4" />.</returns>
        </member>
        <member name="M:Rage.Vector3.Transform(Rage.Vector3@,Rage.Quaternion@,Rage.Vector4@)">
            <summary>
Transforms a 3D vector by the given <see cref="T:SlimDX.Quaternion" /> rotation.
</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SlimDX.Quaternion" /> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SlimDX.Vector4" />.</param>
        </member>
        <member name="M:Rage.Vector3.Transform(Rage.Vector3,Rage.Quaternion)">
            <summary>
Transforms a 3D vector by the given <see cref="T:SlimDX.Quaternion" /> rotation.
</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SlimDX.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:SlimDX.Vector4" />.</returns>
        </member>
        <member name="M:Rage.Vector3.Transform(Rage.Vector3[],Rage.Matrix@)">
            <summary>
Transforms an array of 3D vectors by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vectors">The source vectors.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed <see cref="T:SlimDX.Vector4" />s.</returns>
        </member>
        <member name="M:Rage.Vector3.Transform(Rage.Vector3[],Rage.Matrix@,Rage.Vector4[])">
            <summary>
Transforms an array of 3D vectors by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vectorsIn">The source vectors.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="vectorsOut">The transformed <see cref="T:SlimDX.Vector4" />s.</param>
        </member>
        <member name="M:Rage.Vector3.Transform(Rage.Vector3[],Rage.Matrix@,Rage.Vector4[],System.Int32,System.Int32)">
            <summary>
Transforms an array of 3D vectors by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vectorsIn">The source vectors.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="vectorsOut">The transformed <see cref="T:SlimDX.Vector4" />s.</param>
            <param name="offset">The offset at which to begin transforming.</param>
            <param name="count">The number of vectors to transform, or 0 to process the whole array.</param>
        </member>
        <member name="M:Rage.Vector3.Transform(Rage.Vector3*,Rage.Matrix*,Rage.Vector4*,System.Int32)">
            <summary>
Transforms an array of 3D vectors by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vectorsIn">The source vectors.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="vectorsOut">The transformed <see cref="T:SlimDX.Vector4" />s.</param>
            <param name="count">The number of vectors to transform.</param>
        </member>
        <member name="M:Rage.Vector3.Transform(Rage.Vector3*,System.Int32,Rage.Matrix*,Rage.Vector4*,System.Int32,System.Int32)">
            <summary>
Transforms an array of 3D vectors by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vectorsIn">The source vectors.</param>
            <param name="inputStride">The stride in bytes between vectors in the input.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="vectorsOut">The transformed <see cref="T:SlimDX.Vector4" />s.</param>
            <param name="outputStride">The stride in bytes between vectors in the output.</param>
            <param name="count">The number of vectors to transform.</param>
        </member>
        <member name="M:Rage.Vector3.Transform(Rage.Vector3@,Rage.Matrix@,Rage.Vector4@)">
            <summary>
Transforms a 3D vector by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vector">The source vector.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:SlimDX.Vector4" />.</param>
        </member>
        <member name="M:Rage.Vector3.Transform(Rage.Vector3,Rage.Matrix)">
            <summary>
Transforms a 3D vector by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vector">The source vector.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed <see cref="T:SlimDX.Vector4" />.</returns>
        </member>
        <member name="M:Rage.Vector3.Normalize(Rage.Vector3@,Rage.Vector3@)">
            <summary>
Converts the vector into a unit vector.
</summary>
            <param name="vector">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:Rage.Vector3.Normalize(Rage.Vector3)">
            <summary>
Converts the vector into a unit vector.
</summary>
            <param name="vector">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:Rage.Vector3.Reflect(Rage.Vector3@,Rage.Vector3@,Rage.Vector3@)">
            <summary>
Returns the reflection of a vector off a surface that has the specified normal. 
</summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">When the method completes, contains the reflected vector.</param>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:Rage.Vector3.Reflect(Rage.Vector3,Rage.Vector3)">
            <summary>
Returns the reflection of a vector off a surface that has the specified normal. 
</summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:Rage.Vector3.Cross(Rage.Vector3@,Rage.Vector3@,Rage.Vector3@)">
            <summary>
Calculates the cross product of two vectors.
</summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">The cross product of the two vectors.</param>
        </member>
        <member name="M:Rage.Vector3.Cross(Rage.Vector3,Rage.Vector3)">
            <summary>
Calculates the cross product of two vectors.
</summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector3.Dot(Rage.Vector3,Rage.Vector3)">
            <summary>
Calculates the dot product of two vectors.
</summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector3.DistanceSquared(Rage.Vector3,Rage.Vector3)">
            <summary>
Calculates the squared distance between two vectors.
</summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
Distance squared can often be used in place of distance if relative comparisons are being made. 
For example, consider three points A, B, and C. To determine whether B or C is further from A, 
compare the distance between A and B to the distance between A and C. Calculating the two distances 
involves two square roots, which are computationally expensive. However, using distance squared 
provides the same information and avoids calculating two square roots.
</remarks>
        </member>
        <member name="M:Rage.Vector3.Distance(Rage.Vector3,Rage.Vector3)">
            <summary>
Calculates the distance between two vectors.
</summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector3.SmoothStep(Rage.Vector3@,Rage.Vector3@,System.Single,Rage.Vector3@)">
            <summary>
Performs a cubic interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:Rage.Vector3.SmoothStep(Rage.Vector3,Rage.Vector3,System.Single)">
            <summary>
Performs a cubic interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector3.Lerp(Rage.Vector3@,Rage.Vector3@,System.Single,Rage.Vector3@)">
            <summary>
Performs a linear interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:Rage.Vector3.Lerp(Rage.Vector3,Rage.Vector3,System.Single)">
            <summary>
Performs a linear interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:Rage.Vector3.Hermite(Rage.Vector3@,Rage.Vector3@,Rage.Vector3@,Rage.Vector3@,System.Single,Rage.Vector3@)">
            <summary>
Performs a Hermite spline interpolation.
</summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:Rage.Vector3.Hermite(Rage.Vector3,Rage.Vector3,Rage.Vector3,Rage.Vector3,System.Single)">
            <summary>
Performs a Hermite spline interpolation.
</summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:Rage.Vector3.Clamp(Rage.Vector3@,Rage.Vector3@,Rage.Vector3@,Rage.Vector3@)">
            <summary>
Restricts a value to be within a specified range.
</summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:Rage.Vector3.Clamp(Rage.Vector3,Rage.Vector3,Rage.Vector3)">
            <summary>
Restricts a value to be within a specified range.
</summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Rage.Vector3.CatmullRom(Rage.Vector3@,Rage.Vector3@,Rage.Vector3@,Rage.Vector3@,System.Single,Rage.Vector3@)">
            <summary>
Performs a Catmull-Rom interpolation using the specified positions.
</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:Rage.Vector3.CatmullRom(Rage.Vector3,Rage.Vector3,Rage.Vector3,Rage.Vector3,System.Single)">
            <summary>
Performs a Catmull-Rom interpolation using the specified positions.
</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:Rage.Vector3.Barycentric(Rage.Vector3@,Rage.Vector3@,Rage.Vector3@,System.Single,System.Single,Rage.Vector3@)">
            <summary>
Returns a <see cref="T:Rage.Vector3" /> containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.
</summary>
            <param name="value1">A <see cref="T:Rage.Vector3" /> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:Rage.Vector3" /> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:Rage.Vector3" /> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <param name="result">When the method completes, contains the 3D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:Rage.Vector3.Barycentric(Rage.Vector3,Rage.Vector3,Rage.Vector3,System.Single,System.Single)">
            <summary>
Returns a <see cref="T:Rage.Vector3" /> containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.
</summary>
            <param name="value1">A <see cref="T:Rage.Vector3" /> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:Rage.Vector3" /> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:Rage.Vector3" /> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <returns>A new <see cref="T:Rage.Vector3" /> containing the 3D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:Rage.Vector3.Negate(Rage.Vector3@,Rage.Vector3@)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:Rage.Vector3.Negate(Rage.Vector3)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:Rage.Vector3.Divide(Rage.Vector3@,System.Single,Rage.Vector3@)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:Rage.Vector3.Divide(Rage.Vector3,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Rage.Vector3.Modulate(Rage.Vector3@,Rage.Vector3@,Rage.Vector3@)">
            <summary>
Modulates a vector by another.
</summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the moethod completes, contains the modulated vector.</param>
        </member>
        <member name="M:Rage.Vector3.Modulate(Rage.Vector3,Rage.Vector3)">
            <summary>
Modulates a vector by another.
</summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:Rage.Vector3.Multiply(Rage.Vector3@,System.Single,Rage.Vector3@)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:Rage.Vector3.Multiply(Rage.Vector3,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Rage.Vector3.Subtract(Rage.Vector3@,Rage.Vector3@,Rage.Vector3@)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:Rage.Vector3.Subtract(Rage.Vector3,Rage.Vector3)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector3.Add(Rage.Vector3@,Rage.Vector3@,Rage.Vector3@)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:Rage.Vector3.Add(Rage.Vector3,Rage.Vector3)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector3.Normalize">
            <summary>
Converts the vector into a unit vector.
</summary>
        </member>
        <member name="M:Rage.Vector3.LengthSquared">
            <summary>
Calculates the squared length of the vector.
</summary>
            <returns>The squared length of the vector.</returns>
        </member>
        <member name="M:Rage.Vector3.Length">
            <summary>
Calculates the length of the vector.
</summary>
            <returns>The length of the vector.</returns>
        </member>
        <member name="M:Rage.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Vector3" /> class.
</summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:Rage.Vector3.#ctor(Rage.Vector2,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Vector3" /> class.
</summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:Rage.Vector3.#ctor(System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Vector3" /> class.
</summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="P:Rage.Vector3.SizeInBytes">
            <summary>
Gets the size of the <see cref="T:Rage.Vector3" /> type, in bytes.
</summary>
        </member>
        <member name="P:Rage.Vector3.UnitZ">
            <summary>
Gets the Z unit <see cref="T:Rage.Vector3" /> (0, 0, 1).
</summary>
            <value>A <see cref="T:Rage.Vector3" /> that has a value of (0, 0, 1).</value>
        </member>
        <member name="P:Rage.Vector3.UnitY">
            <summary>
Gets the Y unit <see cref="T:Rage.Vector3" /> (0, 1, 0).
</summary>
            <value>A <see cref="T:Rage.Vector3" /> that has a value of (0, 1, 0).</value>
        </member>
        <member name="P:Rage.Vector3.UnitX">
            <summary>
Gets the X unit <see cref="T:Rage.Vector3" /> (1, 0, 0).
</summary>
            <value>A <see cref="T:Rage.Vector3" /> that has a value of (1, 0, 0).</value>
        </member>
        <member name="P:Rage.Vector3.Zero">
            <summary>
Gets a <see cref="T:Rage.Vector3" /> with all of its components set to zero.
</summary>
            <value>A <see cref="T:Rage.Vector3" /> that has all of its components set to zero.</value>
        </member>
        <member name="F:Rage.Vector3.Z">
            <summary>
Gets or sets the Z component of the vector.
</summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="F:Rage.Vector3.Y">
            <summary>
Gets or sets the Y component of the vector.
</summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:Rage.Vector3.X">
            <summary>
Gets or sets the X component of the vector.
</summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="T:Rage.Vector3">
            <summary>
Defines a three component vector.
</summary>
            <unmanaged>D3DXVECTOR3</unmanaged>
        </member>
        <member name="M:Rage.Vector4.Equals(Rage.Vector4@,Rage.Vector4@)">
            <summary>
Determines whether the specified object instances are considered equal. 
</summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Vector4.Equals(Rage.Vector4)">
            <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Rage.Vector4.Equals(System.Object)">
            <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Rage.Vector4.GetHashCode">
            <summary>
Returns the hash code for this instance.
</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Rage.Vector4.ToString">
            <summary>
Converts the value of the object to its equivalent string representation.
</summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Rage.Vector4.op_Inequality(Rage.Vector4,Rage.Vector4)">
            <summary>
Tests for inequality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Vector4.op_Equality(Rage.Vector4,Rage.Vector4)">
            <summary>
Tests for equality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Rage.Vector4.op_Division(Rage.Vector4,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Rage.Vector4.op_Multiply(System.Single,Rage.Vector4)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Rage.Vector4.op_Multiply(Rage.Vector4,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Rage.Vector4.op_UnaryNegation(Rage.Vector4)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:Rage.Vector4.op_Subtraction(Rage.Vector4,Rage.Vector4)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector4.op_Addition(Rage.Vector4,Rage.Vector4)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector4.Maximize(Rage.Vector4@,Rage.Vector4@,Rage.Vector4@)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:Rage.Vector4.Maximize(Rage.Vector4,Rage.Vector4)">
            <summary>
Returns a vector containing the largest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:Rage.Vector4.Minimize(Rage.Vector4@,Rage.Vector4@,Rage.Vector4@)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:Rage.Vector4.Minimize(Rage.Vector4,Rage.Vector4)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:Rage.Vector4.Transform(Rage.Vector4[],Rage.Quaternion@)">
            <summary>
Transforms an array of 4D vectors by the given <see cref="T:SlimDX.Quaternion" /> rotation.
</summary>
            <param name="vectors">The vectors to rotate.</param>
            <param name="rotation">The <see cref="T:SlimDX.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:Rage.Vector4" />.</returns>
        </member>
        <member name="M:Rage.Vector4.Transform(Rage.Vector4@,Rage.Quaternion@,Rage.Vector4@)">
            <summary>
Transforms a 4D vector by the given <see cref="T:SlimDX.Quaternion" /> rotation.
</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SlimDX.Quaternion" /> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:Rage.Vector4" />.</param>
        </member>
        <member name="M:Rage.Vector4.Transform(Rage.Vector4,Rage.Quaternion)">
            <summary>
Transforms a 4D vector by the given <see cref="T:SlimDX.Quaternion" /> rotation.
</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:SlimDX.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:Rage.Vector4" />.</returns>
        </member>
        <member name="M:Rage.Vector4.Transform(Rage.Vector4[],Rage.Matrix@)">
            <summary>
Transforms an array of 4D vectors by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vectors">The source vectors.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed <see cref="T:Rage.Vector4" />s.</returns>
        </member>
        <member name="M:Rage.Vector4.Transform(Rage.Vector4@,Rage.Matrix@,Rage.Vector4@)">
            <summary>
Transforms a 4D vector by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vector">The source vector.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:Rage.Vector4" />.</param>
        </member>
        <member name="M:Rage.Vector4.Transform(Rage.Vector4,Rage.Matrix)">
            <summary>
Transforms a 4D vector by the given <see cref="T:SlimDX.Matrix" />.
</summary>
            <param name="vector">The source vector.</param>
            <param name="transformation">The transformation <see cref="T:SlimDX.Matrix" />.</param>
            <returns>The transformed <see cref="T:Rage.Vector4" />.</returns>
        </member>
        <member name="M:Rage.Vector4.Normalize(Rage.Vector4@,Rage.Vector4@)">
            <summary>
Converts the vector into a unit vector.
</summary>
            <param name="vector">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:Rage.Vector4.Normalize(Rage.Vector4)">
            <summary>
Converts the vector into a unit vector.
</summary>
            <param name="vector">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:Rage.Vector4.Dot(Rage.Vector4,Rage.Vector4)">
            <summary>
Calculates the dot product of two vectors.
</summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector4.DistanceSquared(Rage.Vector4,Rage.Vector4)">
            <summary>
Calculates the squared distance between two vectors.
</summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
Distance squared can often be used in place of distance if relative comparisons are being made. 
For example, consider three points A, B, and C. To determine whether B or C is further from A, 
compare the distance between A and B to the distance between A and C. Calculating the two distances 
involves two square roots, which are computationally expensive. However, using distance squared 
provides the same information and avoids calculating two square roots.
</remarks>
        </member>
        <member name="M:Rage.Vector4.Distance(Rage.Vector4,Rage.Vector4)">
            <summary>
Calculates the distance between two vectors.
</summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector4.SmoothStep(Rage.Vector4@,Rage.Vector4@,System.Single,Rage.Vector4@)">
            <summary>
Performs a cubic interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:Rage.Vector4.SmoothStep(Rage.Vector4,Rage.Vector4,System.Single)">
            <summary>
Performs a cubic interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector4.Lerp(Rage.Vector4@,Rage.Vector4@,System.Single,Rage.Vector4@)">
            <summary>
Performs a linear interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:Rage.Vector4.Lerp(Rage.Vector4,Rage.Vector4,System.Single)">
            <summary>
Performs a linear interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:Rage.Vector4.Hermite(Rage.Vector4@,Rage.Vector4@,Rage.Vector4@,Rage.Vector4@,System.Single,Rage.Vector4@)">
            <summary>
Performs a Hermite spline interpolation.
</summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:Rage.Vector4.Hermite(Rage.Vector4,Rage.Vector4,Rage.Vector4,Rage.Vector4,System.Single)">
            <summary>
Performs a Hermite spline interpolation.
</summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:Rage.Vector4.Clamp(Rage.Vector4@,Rage.Vector4@,Rage.Vector4@,Rage.Vector4@)">
            <summary>
Restricts a value to be within a specified range.
</summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:Rage.Vector4.Clamp(Rage.Vector4,Rage.Vector4,Rage.Vector4)">
            <summary>
Restricts a value to be within a specified range.
</summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Rage.Vector4.CatmullRom(Rage.Vector4@,Rage.Vector4@,Rage.Vector4@,Rage.Vector4@,System.Single,Rage.Vector4@)">
            <summary>
Performs a Catmull-Rom interpolation using the specified positions.
</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:Rage.Vector4.CatmullRom(Rage.Vector4,Rage.Vector4,Rage.Vector4,Rage.Vector4,System.Single)">
            <summary>
Performs a Catmull-Rom interpolation using the specified positions.
</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:Rage.Vector4.Barycentric(Rage.Vector4@,Rage.Vector4@,Rage.Vector4@,System.Single,System.Single,Rage.Vector4@)">
            <summary>
Returns a <see cref="T:Rage.Vector4" /> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
</summary>
            <param name="value1">A <see cref="T:Rage.Vector4" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:Rage.Vector4" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:Rage.Vector4" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <param name="result">When the method completes, contains the 4D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:Rage.Vector4.Barycentric(Rage.Vector4,Rage.Vector4,Rage.Vector4,System.Single,System.Single)">
            <summary>
Returns a <see cref="T:Rage.Vector4" /> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
</summary>
            <param name="value1">A <see cref="T:Rage.Vector4" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:Rage.Vector4" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:Rage.Vector4" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <returns>A new <see cref="T:Rage.Vector4" /> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:Rage.Vector4.Negate(Rage.Vector4@,Rage.Vector4@)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:Rage.Vector4.Negate(Rage.Vector4)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:Rage.Vector4.Divide(Rage.Vector4@,System.Single,Rage.Vector4@)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:Rage.Vector4.Divide(Rage.Vector4,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Rage.Vector4.Modulate(Rage.Vector4@,Rage.Vector4@,Rage.Vector4@)">
            <summary>
Modulates a vector by another.
</summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the moethod completes, contains the modulated vector.</param>
        </member>
        <member name="M:Rage.Vector4.Modulate(Rage.Vector4,Rage.Vector4)">
            <summary>
Modulates a vector by another.
</summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:Rage.Vector4.Multiply(Rage.Vector4@,System.Single,Rage.Vector4@)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:Rage.Vector4.Multiply(Rage.Vector4,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Rage.Vector4.Subtract(Rage.Vector4@,Rage.Vector4@,Rage.Vector4@)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:Rage.Vector4.Subtract(Rage.Vector4,Rage.Vector4)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector4.Add(Rage.Vector4@,Rage.Vector4@,Rage.Vector4@)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:Rage.Vector4.Add(Rage.Vector4,Rage.Vector4)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:Rage.Vector4.Normalize">
            <summary>
Converts the vector into a unit vector.
</summary>
        </member>
        <member name="M:Rage.Vector4.LengthSquared">
            <summary>
Calculates the squared length of the vector.
</summary>
            <returns>The squared length of the vector.</returns>
        </member>
        <member name="M:Rage.Vector4.Length">
            <summary>
Calculates the length of the vector.
</summary>
            <returns>The length of the vector.</returns>
        </member>
        <member name="M:Rage.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Vector4" /> class.
</summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:Rage.Vector4.#ctor(Rage.Vector3,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Vector4" /> class.
</summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:Rage.Vector4.#ctor(Rage.Vector2,System.Single,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Vector4" /> class.
</summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:Rage.Vector4.#ctor(System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Vector4" /> class.
</summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="P:Rage.Vector4.SizeInBytes">
            <summary>
Gets the size of the <see cref="T:Rage.Vector4" /> type, in bytes.
</summary>
        </member>
        <member name="P:Rage.Vector4.UnitW">
            <summary>
Gets the W unit <see cref="T:Rage.Vector4" /> (0, 0, 0, 1).
</summary>
            <value>A <see cref="T:Rage.Vector4" /> that has a value of (0, 0, 0, 1).</value>
        </member>
        <member name="P:Rage.Vector4.UnitZ">
            <summary>
Gets the Z unit <see cref="T:Rage.Vector4" /> (0, 0, 1, 0).
</summary>
            <value>A <see cref="T:Rage.Vector4" /> that has a value of (0, 0, 1, 0).</value>
        </member>
        <member name="P:Rage.Vector4.UnitY">
            <summary>
Gets the Y unit <see cref="T:Rage.Vector4" /> (0, 1, 0, 0).
</summary>
            <value>A <see cref="T:Rage.Vector4" /> that has a value of (0, 1, 0, 0).</value>
        </member>
        <member name="P:Rage.Vector4.UnitX">
            <summary>
Gets the X unit <see cref="T:Rage.Vector4" /> (1, 0, 0, 0).
</summary>
            <value>A <see cref="T:Rage.Vector4" /> that has a value of (1, 0, 0, 0).</value>
        </member>
        <member name="P:Rage.Vector4.Zero">
            <summary>
Gets a <see cref="T:Rage.Vector4" /> with all of its components set to zero.
</summary>
            <value>A <see cref="T:Rage.Vector4" /> that has all of its components set to zero.</value>
        </member>
        <member name="F:Rage.Vector4.W">
            <summary>
Gets or sets the W component of the vector.
</summary>
            <value>The W component of the vector.</value>
        </member>
        <member name="F:Rage.Vector4.Z">
            <summary>
Gets or sets the Z component of the vector.
</summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="F:Rage.Vector4.Y">
            <summary>
Gets or sets the Y component of the vector.
</summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:Rage.Vector4.X">
            <summary>
Gets or sets the X component of the vector.
</summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="T:Rage.Vector4">
            <summary>
Defines a four component vector.
</summary>
            <unmanaged>D3DXVECTOR4</unmanaged>
        </member>
        <member name="M:Rage.PoolHandle.ToString">
            <inheritdoc />
        </member>
        <member name="M:Rage.PoolHandle.op_Implicit(Rage.PoolHandle)~System.UInt32">
            <summary>
Converts the specified <see cref="T:Rage.PoolHandle" /> to a <see cref="T:System.UInt32" />.
</summary>
            <param name="poolHandle">The pool handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Rage.PoolHandle.op_Implicit(System.UInt32)~Rage.PoolHandle">
            <summary>
Converts the specified <see cref="T:System.UInt32" /> to a <see cref="T:Rage.PoolHandle" />.
</summary>
            <param name="value">The 32-bit unsigned integer representing the handle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:Rage.PoolHandle.Counter">
            <summary>
Gets or sets the counter of this <see cref="T:Rage.PoolHandle" />.
</summary>
        </member>
        <member name="P:Rage.PoolHandle.Index">
            <summary>
Gets or sets the index of this <see cref="T:Rage.PoolHandle" />.
</summary>
        </member>
        <member name="P:Rage.PoolHandle.Value">
            <summary>
Gets or sets the value of this <see cref="T:Rage.PoolHandle" />.
</summary>
        </member>
        <member name="P:Rage.PoolHandle.IsZero">
            <summary>
Gets a value indicating whether this <see cref="T:Rage.PoolHandle" /> is zero.
</summary>
        </member>
        <member name="M:Rage.PoolHandle.#ctor(System.UInt32)">
            <summary>
Initializes a new instance of the <see cref="T:Rage.PoolHandle" /> class.
</summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rage.PoolHandle">
            <summary>
                <para>Represents the handle of an item in a pool.</para>
                <para>
The RAGE engine has a special array type known as a pool.<br />
Pools are widely used throughout RAGE games to store things like <see cref="T:Rage.Ped" />s, <see cref="T:Rage.Vehicle" />s, <see cref="T:Rage.Weapon" />s, <see cref="T:Rage.Blip" />s, etc.<br />
Pools consist of slots, and each slot has an index ranging from 0 to the pools capacity.<br />
Essentially each slot has a flag that indicates whether the slot is free, and a counter. The counter is purely to avoid duplicate handles in case that same slot is reused immediately after it's freed.<br />
The handle is a composite number (32-bit unsigned integer) where the 24 most significant bits represent the item's index into the pool, and the last 8 bits represent the counter.<br />
Eg. if an item is stored at index 4 and its counter is 7, the handle would be (4 &lt;&lt; 8) | 7 = 1031 (0x00000407).<br />
A handle is validated by comparing its counter to the counter in the slot indicated by the index in the handle. If the slot is occupied and the counters match, the handle is valid.
These handles are used extensively in the engine's internal scripting system. If a native function takes an entity as parameter, it is by its handle.
</para>
            </summary>
        </member>
        <member name="M:Logging.GetContentsByAnyMeans">
            <summary>
                <para>Gets the contents of the log by any means necessary.</para>
                <para>Warning: Logging capabilities may stop working for this session after calling this method.</para>
            </summary>
            <returns>A <see cref="T:System.String" /> representing the contents of the log.</returns>
        </member>
        <member name="F:&lt;unknown type&gt;.User">
            <summary>
Log messages from Game::Log and Game::LogDebug().
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.NativeCalls">
            <summary>
Log messages pertaining to native calls (Each call will invoke a log entry to this category).
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GetEntities">
            <summary>
Log messages pertaining to World::GetAll*().
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ConsoleOutput">
            <summary>
The entries output to the console using GameConsole::Print().
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.HookManagerTicking">
            <summary>
Log messages pertaining to the Tick function in HookManager.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.NativeInvocation">
            <summary>
Log messages pertaining to native invocation.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Uncategorized">
            <summary>
Uncategorized log messages.
</summary>
        </member>
        <member name="M:Rage.Game.SetClipboardText(System.String)">
            <summary>
Sets the text in the clipboard.
</summary>
            <returns>A <see cref="T:System.String" /> representing the text to replace the clipboard with.</returns>
        </member>
        <member name="M:Rage.Game.GetClipboardText">
            <summary>
Gets the text in the clipboard.
</summary>
            <returns>A <see cref="T:System.String" /> representing the text in the clipboard.</returns>
        </member>
        <member name="M:Rage.Game.SetRadarZoomLevelThisFrame(System.Single)">
            <summary>
Sets the zoom level of the radar this frame.
</summary>
            <param name="zoomLevel">The zoom level.</param>
        </member>
        <member name="M:Rage.Game.UnlockMinimapPosition">
            <summary>
Unlocks the position of the minimap.
</summary>
        </member>
        <member name="M:Rage.Game.LockMinimapPosition(System.Single,System.Single)">
            <summary>
Locks the minimap to the specified world position.
</summary>
            <param name="x">The X-component of the world position to lock the minimap to.</param>
            <param name="y">The Y-component of the world position to lock the minimap to.</param>
        </member>
        <member name="M:Rage.Game.LockMinimapPosition(Rage.Vector2)">
            <summary>
Locks the minimap to the specified world position.
</summary>
            <param name="position">The world position to lock the minimap to.</param>
        </member>
        <member name="M:Rage.Game.LockMinimapPosition(Rage.Vector3)">
            <summary>
Locks the minimap to the specified world position.
</summary>
            <param name="position">The world position to lock the minimap to. The Z-component is ignored.</param>
        </member>
        <member name="M:Rage.Game.UnlockMinimapAngle">
            <summary>
Unlocks the angle of the minimap.
</summary>
        </member>
        <member name="M:Rage.Game.LockMinimapAngle(System.Int32)">
            <summary>
Locks the minimap to the specified angle.
</summary>
            <param name="angle">The angle to lock the minimap to, in degrees.</param>
        </member>
        <member name="M:Rage.Game.FadeScreenOut(System.Int32,System.Boolean)">
            <summary>
Fades the screen out over the specified amount of time.
</summary>
            <param name="ms">The time it takes to fade out, in milliseconds.</param>
            <param name="wait">Whether or not the call should block the current thread until the screen is faded in.</param>
        </member>
        <member name="M:Rage.Game.FadeScreenOut(System.Int32)">
            <summary>
Fades the screen out over the specified amount of time.
</summary>
            <param name="ms">The time it takes to fade out, in milliseconds.</param>
        </member>
        <member name="M:Rage.Game.FadeScreenIn(System.Int32,System.Boolean)">
            <summary>
Fades the screen in over the specified amount of time.
</summary>
            <param name="ms">The time it takes to fade in, in milliseconds.</param>
            <param name="wait">Whether or not the call should block the current thread until the screen is faded in.</param>
        </member>
        <member name="M:Rage.Game.FadeScreenIn(System.Int32)">
            <summary>
Fades the screen in over the specified amount of time.
</summary>
            <param name="ms">The time it takes to fade in, in milliseconds.</param>
        </member>
        <member name="M:Rage.Game.SetRelationshipBetweenRelationshipGroups(Rage.RelationshipGroup,Rage.RelationshipGroup,Rage.Relationship)">
            <summary>
Sets the relationship between the specified relationship groups.
</summary>
            <param name="sourceGroup">The source group.</param>
            <param name="targetGroup">The target group.</param>
            <param name="relationship">The relationship.</param>
            <example>
The following example makes the group "COP" hate the group "CRIMINAL", but not "CRIMINAL" hate "COP".
<code>Game.SetRelationshipBetweenRelationshipGroups("COP", "CRIMINAL", 5);</code></example>
        </member>
        <member name="M:Rage.Game.HasAchievementBeenPassed(Rage.Achievement)">
            <summary>
Determines whether the specified achievement has been passed.
</summary>
            <param name="achievement">The achievement identifier.</param>
            <returns>
                <c>true</c> if the achievement has been passed; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Rage.Game.GetAchievementProgress(Rage.Achievement)">
            <summary>
Gets the progress of the specified achievement.
</summary>
            <param name="achievement">The achievement identifier.</param>
            <returns>A 32-bit signed integer representing the progress of the achievement.</returns>
        </member>
        <member name="M:Rage.Game.UnloadActivePlugin">
            <summary>
Unloads the active plugin.
</summary>
        </member>
        <member name="M:Rage.Game.ReloadActivePlugin">
            <summary>
Reloads the active plugin.
</summary>
        </member>
        <member name="M:Rage.Game.TerminateAllScripts(System.String[])">
            <summary>
Terminates all scripts.
</summary>
            <param name="exceptions">An array of type <see cref="T:System.String" /> containing the names of the scripts to not terminate.</param>
        </member>
        <member name="M:Rage.Game.TerminateAllScriptsWithName(System.String)">
            <summary>
Terminates all scripts with the specified name.
</summary>
            <param name="name">The name of the script to terminate.</param>
        </member>
        <member name="M:Rage.Game.StartNewScript(System.String,System.Int32)">
            <summary>
Starts a new instance of the game script with the specified name and stack size.
</summary>
            <param name="name">The name.</param>
            <param name="stackSize">The size of the stack.</param>
            <remarks>If the specified script has not already been loaded, this method is not guaranteed to return on the same tick.</remarks>
            <returns>An unsigned int representing a handle to the started script.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the specified name does not represent a valid script.</exception>
        </member>
        <member name="M:Rage.Game.StartNewScript(System.String)">
            <summary>
Starts a new instance of the game script with the specified name with a stack size of 1424.
</summary>
            <param name="name">The name.</param>
            <remarks>If the specified script has not already been loaded, this method is not guaranteed to return on the same tick.</remarks>
            <returns>An unsigned int representing a handle to the started script.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the specified name does not represent a valid script.</exception>
        </member>
        <member name="M:Rage.Game.RemoveNotification(System.UInt32)">
            <summary>
Removes the specified notification.
</summary>
            <param name="handle">The handle to the notification to remove.</param>
        </member>
        <member name="M:Rage.Game.DisplayNotification(System.String,System.String,System.String,System.String,System.String)">
            <summary>
Adds a new notification above the map.
</summary>
            <param name="textureDictionaryName">The name of the game defined texture dictionary to display.</param>
            <param name="textureName">The name of the texture in the dictionary to display.</param>
            <param name="title">The title of the notification.</param>
            <param name="subtitle">The subtitle of the notification.</param>
            <param name="text">The text to display.</param>
            <returns>An unsigned 32-bit integer, representing the handle to the notification.</returns>
        </member>
        <member name="M:Rage.Game.DisplayNotification(System.String)">
            <summary>
Adds a new notification above the map.
</summary>
            <param name="text">The text to display.</param>
            <returns>An unsigned 32-bit integer, representing the handle to the notification.</returns>
        </member>
        <member name="M:Rage.Game.DisplaySubtitle(System.String,System.Int32)">
            <summary>
Displays the specified text in a subtitle.
</summary>
            <param name="text">The text to display.</param>
            <param name="duration">The duration to display the subtitle for, in milliseconds.</param>
        </member>
        <member name="M:Rage.Game.HideHelp">
            <summary>
Hides the current help box.
</summary>
        </member>
        <member name="M:Rage.Game.DisplayHelp(System.String,System.Int32)">
            <summary>
Displays the specified text in the help box.
</summary>
            <param name="text">The text to display.</param>
            <param name="forever">The duration to display the help box, in milliseconds. If a negative value is specified, the duration will default to 8 seconds.</param>
        </member>
        <member name="M:Rage.Game.DisplayHelp(System.String,System.Boolean)">
            <summary>
Displays the specified text in the help box.
</summary>
            <param name="text">The text to display.</param>
            <param name="forever">A value indicating whether to display the help box forever. If <c>false</c> the help box will be displayed for 8 seconds.</param>
        </member>
        <member name="M:Rage.Game.DisplayHelp(System.String)">
            <summary>
Displays the specified text in the help box.
</summary>
            <param name="text">The text to display.</param>
            <remarks>The text will be displayed for 8 seconds.</remarks>
        </member>
        <member name="M:Rage.Game.HandleRespawn">
            <summary>
Marks the current respawning of the local player as completed, allowing normal game functions, like HUD, opening the menu, etc.
</summary>
        </member>
        <member name="M:Rage.Game.GetLocalizedString(System.String)">
            <summary>
Gets the localized string from the specified localization string id.
</summary>
            <param name="localizationStringId">The localization string identifier.</param>
            <returns>If successful, returns a <see cref="T:System.String" /> representing the localized version of the specified localization string; otherwise, returns <c>null</c>.</returns>
            <example>This example will display a notification with "White Shorts" if the game language is set to english.
<code>Game.DisplayNotification(Game.GetLocalizedString("LEGS_P1_14_0"));</code></example>
        </member>
        <member name="M:Rage.Game.GetHashKey(System.String)">
            <summary>
Computes the hash of the given text using Jenkin's one-at-a-time algorithm.
</summary>
            <param name="text">The text to compute the hash from.</param>
            <returns>A <see cref="T:System.UInt32" /> representing the computed hash.</returns>
        </member>
        <member name="M:Rage.Game.GetNativeAddress(System.String)">
            <summary>
Gets the address of the native function with the specified name.
</summary>
            <param name="name">The name of the native function.</param>
            <returns>If the native function exists, returns a <see cref="T:System.IntPtr" /> representing the address of the native function; otherwise, returns <see cref="F:System.IntPtr.Zero" />.</returns>
        </member>
        <member name="M:Rage.Game.FindPattern(System.String,System.IntPtr)">
            <summary>
Finds the specified pattern of bytes in the game's memory.
</summary>
            <param name="pattern">The pattern to find. Wildcard ?? is supported.</param>
            <param name="startAddress">The address to start searching at. If <see cref="F:System.IntPtr.Zero" />, search is started at the base address.</param>
            <returns>An <see cref="T:System.IntPtr" /> representing the memory location the pattern was found at, or <see cref="F:System.IntPtr.Zero" /> if the pattern wasn't found.</returns>
            <remarks>
                <para>The pattern should be in the following format:</para>
                <para>XX XX XX XX XX XX XX XX XX XX</para>
                <para>Where each XX is a hexadecimal value representing the byte, or ?? to indicate a wildcard.</para>
                <para>eg. "77 37 E8 ?? ?? ?? ?? 84 C0"</para>
                <para>All white space is ignored.</para>
                <para />
                <para>Even though the search algorithm is fast, you shouldn't be calling this every frame.</para>
                <para>Ideally, you want to find all the patterns you need when your plugin initializes.</para>
            </remarks>
            <example>
When a new game patch is released, the memory layout of the game process changes.
This means that variables, code, etc. is no longer at the same offsets as in a previous patch.
To overcome this problem, byte pattern scanning can be used to find the correct addresses.
<br />
The following example shows a method that uses FindPattern to locate a piece of code
that accesses the GameTime variable (The variable accessed by GET_GAME_TIMER),
and then gets the address of the variable.
<code lang="C#">
private static IntPtr gameTimeAddress;
private unsafe static uint GetGameTime()
{
    if (gameTimeAddress == IntPtr.Zero)
    {
        string pattern =
        "8B 05 ?? ?? ?? ??" +   // mov     eax, [????????]
        "05 D0 07 00 00" +      // add     eax, 7D0h
        "39 05 ?? ?? ?? ??" +   // cmp     [GameTime], eax
        "77 37" +               // ja      short ????????
        "E8 ?? ?? ?? ??";      // call    ????????
        IntPtr address = Game.FindPattern(pattern, IntPtr.Zero);
        if (address == IntPtr.Zero)
        {
            // Pattern not found.
            return 0u;
        }

        address += 11; // Brings the address to the cmp instruction (39 05 ?? ?? ?? ??).

        // The CMP instruction uses an offset to the variable, not an absolute address.
        // The offset is from the address of the next instruction.
        // The offset is the last 4 bytes of the instruction.
        long offset = (long)*(int*)(address + 2); // Read the offset (cmp instruction address + 2).
        gameTimeAddress = (IntPtr)(address.ToInt64() + 6 + offset); // Address of GameTime = address of cmp instruction + size of cmp instruction (to get to next instruction) + offset.
    }

    return *(uint*)gameTimeAddress;
}
</code></example>
        </member>
        <member name="M:Rage.Game.FindPattern(System.String)">
            <summary>
Finds the specified pattern of bytes in the game's memory.
</summary>
            <param name="pattern">The pattern to find. Wildcard ?? is supported.</param>
            <returns>An <see cref="T:System.IntPtr" /> representing the memory location the pattern was found at, or <see cref="F:System.IntPtr.Zero" /> if the pattern wasn't found.</returns>
            <remarks>
                <para>The pattern should be in the following format:</para>
                <para>XX XX XX XX XX XX XX XX XX XX</para>
                <para>Where each XX is a hexadecimal value representing the byte, or ?? to indicate a wildcard.</para>
                <para>eg. "77 37 E8 ?? ?? ?? ?? 84 C0"</para>
                <para>All white space is ignored.</para>
                <para />
                <para>Scan starts at the base address. Use overload to specify start address.</para>
                <para>Even though the search algorithm is fast, you shouldn't be calling this every frame.</para>
                <para>Ideally, you want to find all the patterns you need when your plugin initializes.</para>
            </remarks>
            <example>
When a new game patch is released, the memory layout of the game process changes.
This means that variables, code, etc. is no longer at the same offsets as in a previous patch.
To overcome this problem, byte pattern scanning can be used to find the correct addresses.
<br />
The following example shows a method that uses FindPattern to locate a piece of code
that accesses the GameTime variable (The variable accessed by GET_GAME_TIMER),
and then gets the address of the variable.
<code lang="C#">
private static IntPtr gameTimeAddress;
private unsafe static uint GetGameTime()
{
    if (gameTimeAddress == IntPtr.Zero)
    {
        string pattern =
        "8B 05 ?? ?? ?? ??" +   // mov     eax, [????????]
        "05 D0 07 00 00" +      // add     eax, 7D0h
        "39 05 ?? ?? ?? ??" +   // cmp     [GameTime], eax
        "77 37" +               // ja      short ????????
        "E8 ?? ?? ?? ??";      // call    ????????
        IntPtr address = Game.FindPattern(pattern);
        if (address == IntPtr.Zero)
        {
            // Pattern not found.
            return 0u;
        }

        address += 11; // Brings the address to the cmp instruction (39 05 ?? ?? ?? ??).

        // The CMP instruction uses an offset to the variable, not an absolute address.
        // The offset is from the address of the next instruction.
        // The offset is the last 4 bytes of the instruction.
        long offset = (long)*(int*)(address + 2); // Read the offset (cmp instruction address + 2).
        gameTimeAddress = (IntPtr)(address.ToInt64() + 6 + offset); // Address of GameTime = address of cmp instruction + size of cmp instruction (to get to next instruction) + offset.
    }

    return *(uint*)gameTimeAddress;
}
</code></example>
        </member>
        <member name="M:Rage.Game.FindAllOccurrencesOfPattern(System.String,System.IntPtr)">
            <summary>
Finds all occurrences of the specified pattern of bytes in the game's memory.
</summary>
            <param name="pattern">The pattern to find. Wildcard ?? is supported.</param>
            <param name="startAddress">The address to start searching at. If <see cref="F:System.IntPtr.Zero" />, search is started at the base address.</param>
            <returns>An <see cref="T:System.IntPtr" /> representing the memory location the pattern was found at, or <see cref="F:System.IntPtr.Zero" /> if the pattern wasn't found.</returns>
            <remarks>
                <para>The pattern should be in the following format:</para>
                <para>XX XX XX XX XX XX XX XX XX XX</para>
                <para>Where each XX is a hexadecimal value representing the byte, or ?? to indicate a wildcard.</para>
                <para>eg. "77 37 E8 ?? ?? ?? ?? 84 C0"</para>
                <para>All white space is ignored.</para>
                <para />
                <para>Even though the search algorithm is fast, you shouldn't be calling this every frame.</para>
                <para>Ideally, you want to find all the patterns you need when your plugin initializes.</para>
            </remarks>
        </member>
        <member name="M:Rage.Game.FindAllOccurrencesOfPattern(System.String)">
            <summary>
Finds all occurrences of the specified pattern of bytes in the game's memory.
</summary>
            <param name="pattern">The pattern to find. Wildcard ?? is supported.</param>
            <returns>An <see cref="T:System.IntPtr" /> representing the memory location the pattern was found at, or <see cref="F:System.IntPtr.Zero" /> if the pattern wasn't found.</returns>
            <remarks>
                <para>Scan starts at the base address. Use overload to specify start address.</para>
                <para>The pattern should be in the following format:</para>
                <para>XX XX XX XX XX XX XX XX XX XX</para>
                <para>Where each XX is a hexadecimal value representing the byte, or ?? to indicate a wildcard.</para>
                <para>eg. "77 37 E8 ?? ?? ?? ?? 84 C0"</para>
                <para>All white space is ignored.</para>
                <para />
                <para>Even though the search algorithm is fast, you shouldn't be calling this every frame.</para>
                <para>Ideally, you want to find all the patterns you need when your plugin initializes.</para>
            </remarks>
        </member>
        <member name="P:Rage.Game.AlwaysReceiveKeyEvents">
            <summary>
Gets or sets a value indicating whether this plugin will still receive key events even if input focus is set to an active form.
</summary>
            <value>
                <c>true</c> if events should be still received otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Game.IsLoading">
            <summary>
Gets a value indicating whether the game is currently displaying the loading screen.
</summary>
            <value>
                <c>true</c> if the game is displaying the loading screen; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Rage.Game.DisableAutomaticRespawn">
            <summary>
Gets or sets a value indicating whether automatic respawns are disabled, allowing plugins to implement custom respawn systems.
</summary>
            <value>
                <c>true</c> if automatic respawns are disabled. otherwise, <c>false</c>. Respawns the player if set to <c>false</c> and the player is dead.</value>
        </member>
        <member name="P:Rage.Game.FadeScreenOutOnDeath">
            <summary>
Gets or sets a value indicating whether the game will fade out the screen when the player dies.
</summary>
            <value>Whether the game will fade out the screen when the player dies.</value>
        </member>
        <member name="P:Rage.Game.IsMissionActive">
            <summary>
Gets or sets a value indicating whether a mission is currently active.
</summary>
            <value>
                <c>true</c> if a missing is currently active; otherwise <c>false</c>.</value>
        </member>
        <member name="P:Rage.Game.IsScreenFadedOut">
            <summary>
Gets a value indicating whether the screen is currently faded out.
</summary>
            <value>Whether the screen is currently faded out.</value>
        </member>
        <member name="P:Rage.Game.IsScreenFadedIn">
            <summary>
Gets a value indicating whether the screen is currently faded in.
</summary>
            <value>Whether the screen is currently faded in.</value>
        </member>
        <member name="P:Rage.Game.IsScreenFadingOut">
            <summary>
Gets a value indicating whether the screen is currently fading out.
</summary>
            <value>Whether the screen is currently fading out.</value>
        </member>
        <member name="P:Rage.Game.IsScreenFadingIn">
            <summary>
Gets a value indicating whether the screen is currently fading in.
</summary>
            <value>Whether the screen is currently fading in.</value>
        </member>
        <member name="P:Rage.Game.Console">
            <summary>
Gets the console.
</summary>
            <value>The console.</value>
        </member>
        <member name="P:Rage.Game.ProductVersion">
            <summary>
Gets the product version of the game.
</summary>
        </member>
        <member name="P:Rage.Game.ShowPoliceBlipsOnRadar">
            <summary>
Sets a value indicating whether blips representing police units should be shown on the radar when the local player is wanted.
</summary>
            <value>Whether blips representing police units should be shown on the radar when the local player is wanted.</value>
        </member>
        <member name="P:Rage.Game.MaxWantedLevel">
            <summary>
Gets or sets the maximum wanted level.
</summary>
            <value>The maximum wanted level.</value>
        </member>
        <member name="P:Rage.Game.TimeScale">
            <summary>
Gets or sets the time scale multiplier.
</summary>
            <value>The time scale multiplier.</value>
        </member>
        <member name="P:Rage.Game.FrameRate">
            <summary>
Gets the current frame rate.
</summary>
            <value>The current frame rate.</value>
        </member>
        <member name="P:Rage.Game.FrameCount">
            <summary>
Gets the total number of frames that's been rendered this session.
</summary>
            <value>The total number of frames that's been rendered this session.</value>
        </member>
        <member name="P:Rage.Game.FrameTime">
            <summary>
Gets the time it currently takes to render a frame, in milliseconds.
</summary>
            <value>The time it currently takes to render a frame, in milliseconds.</value>
        </member>
        <member name="P:Rage.Game.GameTime">
            <summary>
Gets the game time in milliseconds. Unlike <see cref="P:System.Environment.TickCount" /> this value is scaled based on the game time dilation.
</summary>
        </member>
        <member name="P:Rage.Game.Resolution">
            <summary>
                <para>Gets the current game resolution.</para>
                <para>
This is the resolution of the game window, not the actual screen resolution.<br />
When the game is running in full screen mode, this will be the same as the screen resolution.
</para>
            </summary>
        </member>
        <member name="P:Rage.Game.LocalPlayer">
            <summary>
Gets the local <see cref="T:Rage.Player" /> instance.
</summary>
        </member>
        <member name="P:Rage.Game.BuildNumber">
            <summary>
Gets the build number of the game.
</summary>
            <value>The build number of the game.</value>
        </member>
        <member name="M:Rage.Game.LogExtremelyVerboseDebug(System.String)">
            <summary>
                <para>Logs the specified text to the RAGE Plugin Hook log file, if the current logging verbosity setting is set to <see cref="!:LoggingVerbosity::ExtremelyVerbose" />.</para>
                <para>When the calling <see cref="T:System.Reflection.Assembly" /> is not compiled in DEBUG mode, calls to this method will not be compiled.</para>
            </summary>
            <remarks>See <see cref="M:Rage.Game.LogTrivialDebug(System.String)" /> for an example.</remarks>
            <param name="text">The text to log.</param>
        </member>
        <member name="M:Rage.Game.LogVeryVerboseDebug(System.String)">
            <summary>
                <para>Logs the specified text to the RAGE Plugin Hook log file, if the current logging verbosity setting is set to <see cref="!:LoggingVerbosity::VeryVerbose" />.</para>
                <para>When the calling <see cref="T:System.Reflection.Assembly" /> is not compiled in DEBUG mode, calls to this method will not be compiled.</para>
            </summary>
            <remarks>See <see cref="M:Rage.Game.LogTrivialDebug(System.String)" /> for an example.</remarks>
            <param name="text">The text to log.</param>
        </member>
        <member name="M:Rage.Game.LogVerboseDebug(System.String)">
            <summary>
                <para>Logs the specified text to the RAGE Plugin Hook log file, if the current logging verbosity setting is set to <see cref="!:LoggingVerbosity::Verbose" />.</para>
                <para>When the calling <see cref="T:System.Reflection.Assembly" /> is not compiled in DEBUG mode, calls to this method will not be compiled.</para>
            </summary>
            <remarks>See <see cref="M:Rage.Game.LogTrivialDebug(System.String)" /> for an example.</remarks>
            <param name="text">The text to log.</param>
        </member>
        <member name="M:Rage.Game.LogTrivialDebug(System.String)">
            <summary>
                <para>Logs the specified text to the RAGE Plugin Hook log file, if the current logging verbosity setting is set to <see cref="!:LoggingVerbosity::Trivial" />.</para>
                <para>When the calling <see cref="T:System.Reflection.Assembly" /> is not compiled in DEBUG mode, calls to this method will not be compiled.</para>
            </summary>
            <param name="text">The text to log.</param>
            <example>
                <para>
Consider a plugin with the following source code:
<code lang="C#">
void SpawnPoliceVehicle()
{
    new Vehicle("VEHICLE2", Game.LocalPlayer.Character.GetOffsetPosition(Vector3.RelativeFront * 7f), 0f);
    Game.LogDebug("Spawned police car");
}
</code><code lang="VB">
Private Sub SpawnPoliceVehicle()
    New Vehicle("VEHICLE2", Game.LocalPlayer.Character.GetOffsetPosition(Vector3.RelativeFront * 7F), 0F)
    Game.LogDebug("Spawned police car")
End Sub
</code><code lang="C++">
void SpawnPoliceVehicle()
{
    gcnew Vehicle("VEHICLE2", Game::LocalPlayer-&gt;Character-&gt;GetOffsetPosition(Vector3.RelativeFront * 7.0f), 0.0f);
    Game::LogDebug("Spawned police car");
}
</code></para>
                <para>
When the plugin is compiled in DEBUG mode, the code is compiled to:
<code lang="C#">
void SpawnPoliceVehicle()
{
    new Vehicle("VEHICLE2", Game.LocalPlayer.Character.GetOffsetPosition(Vector3.RelativeFront * 7f), 0f);
    Game.LogDebug("Spawned police car");
}
</code><code lang="VB">
Private Sub SpawnPoliceVehicle()
    New Vehicle("VEHICLE2", Game.LocalPlayer.Character.GetOffsetPosition(Vector3.RelativeFront * 7F), 0F)
    Game.LogDebug("Spawned police car")
End Sub
</code><code lang="C++">
void SpawnPoliceVehicle()
{
    gcnew Vehicle("VEHICLE2", Game::LocalPlayer-&gt;Character-&gt;GetOffsetPosition(Vector3.RelativeFront * 7.0f), 0.0f);
    Game::LogDebug("Spawned police car");
}
</code></para>
                <para>
However, when the plugin is not compiled in DEBUG mode (Eg. RELEASE mode), the code is compiled to:
<code lang="C#">
void SpawnPoliceVehicle()
{
    new Vehicle("VEHICLE2", Game.LocalPlayer.Character.GetOffsetPosition(Vector3.RelativeFront * 7f), 0f);
}
</code><code lang="VB">
Private Sub SpawnPoliceVehicle()
    New Vehicle("VEHICLE2", Game.LocalPlayer.Character.GetOffsetPosition(Vector3.RelativeFront * 7F), 0F)
End Sub
</code><code lang="C++">
void SpawnPoliceVehicle()
{
    gcnew Vehicle("VEHICLE2", Game::LocalPlayer-&gt;Character-&gt;GetOffsetPosition(Vector3.RelativeFront * 7.0f), 0.0f);
}
</code></para>
            </example>
        </member>
        <member name="M:Rage.Game.LogExtremelyVerbose(System.String)">
            <summary>
Logs the specified text to the RAGE Plugin Hook log file, if the current logging verbosity setting is set to <see cref="!:LoggingVerbosity::ExtremelyVerbose" />.
</summary>
            <param name="text">The text to log.</param>
        </member>
        <member name="M:Rage.Game.LogVeryVerbose(System.String)">
            <summary>
Logs the specified text to the RAGE Plugin Hook log file, if the current logging verbosity setting is set to <see cref="!:LoggingVerbosity::VeryVerbose" />.
</summary>
            <param name="text">The text to log.</param>
        </member>
        <member name="M:Rage.Game.LogVerbose(System.String)">
            <summary>
Logs the specified text to the RAGE Plugin Hook log file, if the current logging verbosity setting is set to <see cref="!:LoggingVerbosity::Verbose" />.
</summary>
            <param name="text">The text to log.</param>
        </member>
        <member name="M:Rage.Game.LogTrivial(System.String)">
            <summary>
Logs the specified text to the RAGE Plugin Hook log file, if the current logging verbosity setting is set to <see cref="!:LoggingVerbosity::Trivial" />.
</summary>
            <param name="text">The text to log.</param>
        </member>
        <member name="M:Rage.Game.RaiseRawFrameRender(Rage.GraphicsEventArgs)">
            <summary>
Raises the <see cref="E:Rage.Game.RawFrameRender" /> event.
</summary>
            <param name="e">The <see cref="T:Rage.GraphicsEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Rage.Game.RaiseFrameRender(Rage.GraphicsEventArgs)">
            <summary>
Raises the <see cref="E:Rage.Game.FrameRender" /> event.
</summary>
            <param name="e">The <see cref="T:Rage.GraphicsEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="P:Rage.Game.IsPaused">
            <summary>
                <para>Gets or sets whether the game is paused.</para>
                <para>The game cannot be paused in certain cases, eg. when the console is open.</para>.
</summary>
            <value>
                <c>true</c> if the game is paused; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Rage.Game.RawFrameRender">
            <summary>
                <para>Called on each frame.</para>
                <para>Natives cannot be called in here, and any attempt to may crash the game.</para>
            </summary>
            <example />
        </member>
        <member name="E:Rage.Game.FrameRender">
            <summary>
                <para>Called on each tick to gather render calls.</para>
                <para>
This is not called on each frame, but rather each game tick, and draw calls get queued for the frame renderer.<br />
This allows natives to be called from here; however, you may see flickering in the rendering because of this.<br />
To avoid this, you can use <see cref="E:Rage.Game.RawFrameRender" /> which gets called on each frame, but won't allow native calls.
</para>
            </summary>
        </member>
        <member name="T:Rage.Game">
            <summary>
Static class for various game settings and functions.
</summary>
        </member>
        <member name="P:Rage.Attributes.ConsoleCommandParameterAutoCompleterAttribute.SupportedTypes">
            <summary>
Gets or sets the supported types of this auto completer.
</summary>
        </member>
        <member name="M:Rage.Attributes.ConsoleCommandParameterAutoCompleterAttribute.#ctor(System.Type[])">
            <summary>
Initializes a new instance of the <see cref="T:Rage.Attributes.ConsoleCommandParameterAutoCompleterAttribute" /> class.
</summary>
            <param name="supportedTypes">The supported types.</param>
        </member>
        <member name="T:Rage.Attributes.ConsoleCommandParameterAutoCompleterAttribute">
            <summary>
Attribute to let parameter auto completers specify which types they support.
</summary>
        </member>
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Max``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Min``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Average``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.EuphoriaParameterAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Max``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Min``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Average``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Max``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Min``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Average``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Max``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Min``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Average``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Max``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Min``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Average``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.EuphoriaParameterAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Max``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Min``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Average``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Max``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Min``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Average``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Max``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Min``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Average``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Max``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Min``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Average``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Max``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Min``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Average``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Max``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Min``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Average``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Max``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Min``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Average``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Max``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Min``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Average``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Max``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Min``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Average``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Max``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Min``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Average``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Max``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Min``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Rage.MathHelper.Average``1(``0[])'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleCommandAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.ConsoleVariableAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Rage.Attributes.EuphoriaParameterAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Rage.Game.TickCount'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UsingString'. -->
    </members>
</doc>